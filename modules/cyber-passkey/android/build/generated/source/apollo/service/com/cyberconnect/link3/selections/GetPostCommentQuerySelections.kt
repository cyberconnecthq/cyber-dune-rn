//
// AUTO-GENERATED FILE. DO NOT MODIFY.
//
// This class was automatically generated by Apollo GraphQL version '3.8.2'.
//
package com.cyberconnect.link3.selections

import com.apollographql.apollo3.api.CompiledArgument
import com.apollographql.apollo3.api.CompiledField
import com.apollographql.apollo3.api.CompiledSelection
import com.apollographql.apollo3.api.CompiledVariable
import com.apollographql.apollo3.api.list
import com.apollographql.apollo3.api.notNull
import com.cyberconnect.link3.type.Comment
import com.cyberconnect.link3.type.CommentPage
import com.cyberconnect.link3.type.ContentLikeStatus
import com.cyberconnect.link3.type.DateTime
import com.cyberconnect.link3.type.GraphQLBoolean
import com.cyberconnect.link3.type.GraphQLID
import com.cyberconnect.link3.type.GraphQLInt
import com.cyberconnect.link3.type.GraphQLString
import com.cyberconnect.link3.type.LightInfo
import com.cyberconnect.link3.type.PageInfo
import com.cyberconnect.link3.type.Post
import com.cyberconnect.link3.type.User
import kotlin.collections.List

public object GetPostCommentQuerySelections {
  private val __pageInfo: List<CompiledSelection> = listOf(
        CompiledField.Builder(
          name = "startCursor",
          type = GraphQLString.type.notNull()
        ).build(),
        CompiledField.Builder(
          name = "endCursor",
          type = GraphQLString.type.notNull()
        ).build(),
        CompiledField.Builder(
          name = "hasNextPage",
          type = GraphQLBoolean.type.notNull()
        ).build(),
        CompiledField.Builder(
          name = "hasPreviousPage",
          type = GraphQLBoolean.type.notNull()
        ).build()
      )

  private val __lightInfo: List<CompiledSelection> = listOf(
        CompiledField.Builder(
          name = "handle",
          type = GraphQLString.type.notNull()
        ).build(),
        CompiledField.Builder(
          name = "avatar",
          type = GraphQLString.type.notNull()
        ).build(),
        CompiledField.Builder(
          name = "avatarFrameTokenId",
          type = GraphQLID.type
        ).build(),
        CompiledField.Builder(
          name = "displayName",
          type = GraphQLString.type.notNull()
        ).build(),
        CompiledField.Builder(
          name = "formattedAddress",
          type = GraphQLString.type.notNull()
        ).build()
      )

  private val __author: List<CompiledSelection> = listOf(
        CompiledField.Builder(
          name = "lightInfo",
          type = LightInfo.type.notNull()
        ).selections(__lightInfo)
        .build()
      )

  private val __likedStatus: List<CompiledSelection> = listOf(
        CompiledField.Builder(
          name = "liked",
          type = GraphQLBoolean.type.notNull()
        ).build()
      )

  private val __lightInfo1: List<CompiledSelection> = listOf(
        CompiledField.Builder(
          name = "handle",
          type = GraphQLString.type.notNull()
        ).build(),
        CompiledField.Builder(
          name = "avatar",
          type = GraphQLString.type.notNull()
        ).build(),
        CompiledField.Builder(
          name = "displayName",
          type = GraphQLString.type.notNull()
        ).build(),
        CompiledField.Builder(
          name = "formattedAddress",
          type = GraphQLString.type.notNull()
        ).build()
      )

  private val __author1: List<CompiledSelection> = listOf(
        CompiledField.Builder(
          name = "lightInfo",
          type = LightInfo.type.notNull()
        ).selections(__lightInfo1)
        .build()
      )

  private val __list1: List<CompiledSelection> = listOf(
        CompiledField.Builder(
          name = "id",
          type = GraphQLID.type.notNull()
        ).build(),
        CompiledField.Builder(
          name = "body",
          type = GraphQLString.type.notNull()
        ).build(),
        CompiledField.Builder(
          name = "likedStatus",
          type = ContentLikeStatus.type.notNull()
        ).selections(__likedStatus)
        .build(),
        CompiledField.Builder(
          name = "likeCount",
          type = GraphQLInt.type.notNull()
        ).build(),
        CompiledField.Builder(
          name = "commentCount",
          type = GraphQLInt.type.notNull()
        ).build(),
        CompiledField.Builder(
          name = "publishedAt",
          type = DateTime.type.notNull()
        ).build(),
        CompiledField.Builder(
          name = "author",
          type = User.type.notNull()
        ).selections(__author1)
        .build()
      )

  private val __trendingComments: List<CompiledSelection> = listOf(
        CompiledField.Builder(
          name = "list",
          type = Comment.type.notNull().list().notNull()
        ).selections(__list1)
        .build()
      )

  private val __likedStatus1: List<CompiledSelection> = listOf(
        CompiledField.Builder(
          name = "liked",
          type = GraphQLBoolean.type.notNull()
        ).build()
      )

  private val __list: List<CompiledSelection> = listOf(
        CompiledField.Builder(
          name = "id",
          type = GraphQLID.type.notNull()
        ).build(),
        CompiledField.Builder(
          name = "author",
          type = User.type.notNull()
        ).selections(__author)
        .build(),
        CompiledField.Builder(
          name = "trendingComments",
          type = CommentPage.type.notNull()
        ).selections(__trendingComments)
        .build(),
        CompiledField.Builder(
          name = "body",
          type = GraphQLString.type.notNull()
        ).build(),
        CompiledField.Builder(
          name = "likedStatus",
          type = ContentLikeStatus.type.notNull()
        ).selections(__likedStatus1)
        .build(),
        CompiledField.Builder(
          name = "likeCount",
          type = GraphQLInt.type.notNull()
        ).build(),
        CompiledField.Builder(
          name = "commentCount",
          type = GraphQLInt.type.notNull()
        ).build(),
        CompiledField.Builder(
          name = "publishedAt",
          type = DateTime.type.notNull()
        ).build()
      )

  private val __comments: List<CompiledSelection> = listOf(
        CompiledField.Builder(
          name = "pageInfo",
          type = PageInfo.type.notNull()
        ).selections(__pageInfo)
        .build(),
        CompiledField.Builder(
          name = "list",
          type = Comment.type.notNull().list().notNull()
        ).selections(__list)
        .build()
      )

  private val __post: List<CompiledSelection> = listOf(
        CompiledField.Builder(
          name = "comments",
          type = CommentPage.type.notNull()
        ).arguments(listOf(
          CompiledArgument.Builder("after", CompiledVariable("after")).build(),
          CompiledArgument.Builder("first", CompiledVariable("first")).build()
        ))
        .selections(__comments)
        .build()
      )

  public val __root: List<CompiledSelection> = listOf(
        CompiledField.Builder(
          name = "post",
          type = Post.type
        ).arguments(listOf(
          CompiledArgument.Builder("id", CompiledVariable("postId")).build()
        ))
        .selections(__post)
        .build()
      )
}
