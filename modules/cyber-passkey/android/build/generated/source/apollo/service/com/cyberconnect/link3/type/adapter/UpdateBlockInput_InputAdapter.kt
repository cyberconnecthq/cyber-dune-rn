//
// AUTO-GENERATED FILE. DO NOT MODIFY.
//
// This class was automatically generated by Apollo GraphQL version '3.8.2'.
//
package com.cyberconnect.link3.type.adapter

import com.apollographql.apollo3.api.Adapter
import com.apollographql.apollo3.api.CustomScalarAdapters
import com.apollographql.apollo3.api.IntAdapter
import com.apollographql.apollo3.api.Optional
import com.apollographql.apollo3.api.StringAdapter
import com.apollographql.apollo3.api.json.JsonReader
import com.apollographql.apollo3.api.json.JsonWriter
import com.apollographql.apollo3.api.nullable
import com.apollographql.apollo3.api.obj
import com.apollographql.apollo3.api.present
import com.cyberconnect.link3.type.UpdateBlockInput
import kotlin.IllegalStateException
import kotlin.Unit

public object UpdateBlockInput_InputAdapter : Adapter<UpdateBlockInput> {
  public override fun fromJson(reader: JsonReader, customScalarAdapters: CustomScalarAdapters):
      UpdateBlockInput = throw IllegalStateException("Input type used in output position")

  public override fun toJson(
    writer: JsonWriter,
    customScalarAdapters: CustomScalarAdapters,
    `value`: UpdateBlockInput,
  ): Unit {
    writer.name("displayName")
    StringAdapter.toJson(writer, customScalarAdapters, value.displayName)
    writer.name("index")
    IntAdapter.toJson(writer, customScalarAdapters, value.index)
    if (value.link is Optional.Present) {
      writer.name("link")
      LinkCreation_InputAdapter.obj().nullable().present().toJson(writer, customScalarAdapters,
          value.link)
    }
    if (value.superLink is Optional.Present) {
      writer.name("superLink")
      SuperLinkCreation_InputAdapter.obj().nullable().present().toJson(writer, customScalarAdapters,
          value.superLink)
    }
    if (value.twitter is Optional.Present) {
      writer.name("twitter")
      TwitterCreation_InputAdapter.obj().nullable().present().toJson(writer, customScalarAdapters,
          value.twitter)
    }
    if (value.credential is Optional.Present) {
      writer.name("credential")
      CredentialCreation_InputAdapter.obj().nullable().present().toJson(writer,
          customScalarAdapters, value.credential)
    }
    if (value.nft is Optional.Present) {
      writer.name("nft")
      NFTCreation_InputAdapter.obj().nullable().present().toJson(writer, customScalarAdapters,
          value.nft)
    }
    if (value.w3st is Optional.Present) {
      writer.name("w3st")
      W3STCreation_InputAdapter.obj().nullable().present().toJson(writer, customScalarAdapters,
          value.w3st)
    }
    if (value.snapshot is Optional.Present) {
      writer.name("snapshot")
      SnapshotCreation_InputAdapter.obj().nullable().present().toJson(writer, customScalarAdapters,
          value.snapshot)
    }
    if (value.nftCollection is Optional.Present) {
      writer.name("nftCollection")
      NFTCollectionCreation_InputAdapter.obj().nullable().present().toJson(writer,
          customScalarAdapters, value.nftCollection)
    }
    if (value.contact is Optional.Present) {
      writer.name("contact")
      ContactCreation_InputAdapter.obj().nullable().present().toJson(writer, customScalarAdapters,
          value.contact)
    }
  }
}
