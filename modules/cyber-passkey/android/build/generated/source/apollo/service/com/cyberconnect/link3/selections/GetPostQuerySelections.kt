//
// AUTO-GENERATED FILE. DO NOT MODIFY.
//
// This class was automatically generated by Apollo GraphQL version '3.8.2'.
//
package com.cyberconnect.link3.selections

import com.apollographql.apollo3.api.CompiledArgument
import com.apollographql.apollo3.api.CompiledField
import com.apollographql.apollo3.api.CompiledFragment
import com.apollographql.apollo3.api.CompiledSelection
import com.apollographql.apollo3.api.CompiledVariable
import com.apollographql.apollo3.api.list
import com.apollographql.apollo3.api.notNull
import com.cyberconnect.link3.type.Author
import com.cyberconnect.link3.type.DateTime
import com.cyberconnect.link3.type.EVMAddress
import com.cyberconnect.link3.type.EssenceMwInfo
import com.cyberconnect.link3.type.EssenceMwType
import com.cyberconnect.link3.type.GraphQLBoolean
import com.cyberconnect.link3.type.GraphQLID
import com.cyberconnect.link3.type.GraphQLInt
import com.cyberconnect.link3.type.GraphQLString
import com.cyberconnect.link3.type.Organization
import com.cyberconnect.link3.type.OrganizationLightInfo
import com.cyberconnect.link3.type.PersonalDisplayName
import com.cyberconnect.link3.type.PersonalPicture
import com.cyberconnect.link3.type.Post
import com.cyberconnect.link3.type.PostEssence
import com.cyberconnect.link3.type.PostQuestion
import com.cyberconnect.link3.type.PrivateInfo
import com.cyberconnect.link3.type.Profile
import com.cyberconnect.link3.type.Timestamp
import com.cyberconnect.link3.type.Url
import kotlin.collections.List

public object GetPostQuerySelections {
  private val __lightInfo: List<CompiledSelection> = listOf(
        CompiledField.Builder(
          name = "displayName",
          type = GraphQLString.type.notNull()
        ).build(),
        CompiledField.Builder(
          name = "profileHandle",
          type = GraphQLString.type.notNull()
        ).build(),
        CompiledField.Builder(
          name = "profilePicture",
          type = GraphQLString.type.notNull()
        ).build()
      )

  private val __onOrganization: List<CompiledSelection> = listOf(
        CompiledField.Builder(
          name = "__typename",
          type = GraphQLString.type.notNull()
        ).build(),
        CompiledField.Builder(
          name = "lightInfo",
          type = OrganizationLightInfo.type.notNull()
        ).selections(__lightInfo)
        .build()
      )

  private val __privateInfo: List<CompiledSelection> = listOf(
        CompiledField.Builder(
          name = "address",
          type = EVMAddress.type.notNull()
        ).build()
      )

  private val __onUser: List<CompiledSelection> = listOf(
        CompiledField.Builder(
          name = "privateInfo",
          type = PrivateInfo.type
        ).selections(__privateInfo)
        .build()
      )

  private val __author: List<CompiledSelection> = listOf(
        CompiledField.Builder(
          name = "__typename",
          type = GraphQLString.type.notNull()
        ).build(),
        CompiledFragment.Builder(
          typeCondition = "Organization",
          possibleTypes = listOf("Organization")
        ).selections(__onOrganization)
        .build(),
        CompiledFragment.Builder(
          typeCondition = "User",
          possibleTypes = listOf("User")
        ).selections(__onUser)
        .build()
      )

  private val __displayName1: List<CompiledSelection> = listOf(
        CompiledField.Builder(
          name = "displayName",
          type = GraphQLString.type.notNull()
        ).build()
      )

  private val __profilePicture1: List<CompiledSelection> = listOf(
        CompiledField.Builder(
          name = "picture",
          type = GraphQLString.type
        ).build()
      )

  private val __onPerProfile: List<CompiledSelection> = listOf(
        CompiledField.Builder(
          name = "bio",
          type = GraphQLString.type.notNull()
        ).build(),
        CompiledField.Builder(
          name = "displayName",
          type = PersonalDisplayName.type.notNull()
        ).alias("personalDisplayName")
        .selections(__displayName1)
        .build(),
        CompiledField.Builder(
          name = "isFollowing",
          type = GraphQLBoolean.type.notNull()
        ).build(),
        CompiledField.Builder(
          name = "profilePicture",
          type = PersonalPicture.type.notNull()
        ).alias("personalprofilePicture")
        .selections(__profilePicture1)
        .build()
      )

  private val __organization: List<CompiledSelection> = listOf(
        CompiledField.Builder(
          name = "id",
          type = GraphQLID.type.notNull()
        ).build()
      )

  private val __onOrgProfile: List<CompiledSelection> = listOf(
        CompiledField.Builder(
          name = "bio",
          type = GraphQLString.type.notNull()
        ).build(),
        CompiledField.Builder(
          name = "displayName",
          type = GraphQLString.type.notNull()
        ).build(),
        CompiledField.Builder(
          name = "isFollowing",
          type = GraphQLBoolean.type.notNull()
        ).build(),
        CompiledField.Builder(
          name = "profilePicture",
          type = GraphQLString.type.notNull()
        ).build(),
        CompiledField.Builder(
          name = "organization",
          type = Organization.type.notNull()
        ).selections(__organization)
        .build()
      )

  private val __profile: List<CompiledSelection> = listOf(
        CompiledField.Builder(
          name = "__typename",
          type = GraphQLString.type.notNull()
        ).build(),
        CompiledField.Builder(
          name = "id",
          type = GraphQLID.type.notNull()
        ).build(),
        CompiledField.Builder(
          name = "handle",
          type = GraphQLString.type.notNull()
        ).build(),
        CompiledFragment.Builder(
          typeCondition = "PerProfile",
          possibleTypes = listOf("PerProfile")
        ).selections(__onPerProfile)
        .build(),
        CompiledFragment.Builder(
          typeCondition = "OrgProfile",
          possibleTypes = listOf("OrgProfile")
        ).selections(__onOrgProfile)
        .build()
      )

  private val __mwInfo: List<CompiledSelection> = listOf(
        CompiledField.Builder(
          name = "currencyAddress",
          type = GraphQLString.type
        ).build(),
        CompiledField.Builder(
          name = "endTime",
          type = Timestamp.type
        ).build(),
        CompiledField.Builder(
          name = "startTime",
          type = Timestamp.type
        ).build(),
        CompiledField.Builder(
          name = "mwAddress",
          type = GraphQLString.type
        ).build(),
        CompiledField.Builder(
          name = "price",
          type = GraphQLString.type
        ).build(),
        CompiledField.Builder(
          name = "profileRequired",
          type = GraphQLBoolean.type
        ).build(),
        CompiledField.Builder(
          name = "totalSupply",
          type = GraphQLInt.type.notNull()
        ).build()
      )

  private val __postQuestion: List<CompiledSelection> = listOf(
        CompiledField.Builder(
          name = "questions",
          type = GraphQLString.type.notNull().list().notNull()
        ).build(),
        CompiledField.Builder(
          name = "options",
          type = GraphQLString.type.notNull().list().notNull()
        ).build()
      )

  private val __essence: List<CompiledSelection> = listOf(
        CompiledField.Builder(
          name = "contract",
          type = GraphQLString.type
        ).build(),
        CompiledField.Builder(
          name = "tokenUri",
          type = GraphQLString.type
        ).build(),
        CompiledField.Builder(
          name = "tokenId",
          type = GraphQLInt.type.notNull()
        ).build(),
        CompiledField.Builder(
          name = "cyberAccount",
          type = EVMAddress.type.notNull()
        ).build(),
        CompiledField.Builder(
          name = "imageUrl",
          type = Url.type.notNull()
        ).build(),
        CompiledField.Builder(
          name = "chainId",
          type = GraphQLInt.type.notNull()
        ).build(),
        CompiledField.Builder(
          name = "profileId",
          type = GraphQLInt.type
        ).build(),
        CompiledField.Builder(
          name = "essenceId",
          type = GraphQLInt.type
        ).build(),
        CompiledField.Builder(
          name = "mwType",
          type = EssenceMwType.type.notNull()
        ).build(),
        CompiledField.Builder(
          name = "mwInfo",
          type = EssenceMwInfo.type.notNull()
        ).selections(__mwInfo)
        .build(),
        CompiledField.Builder(
          name = "postQuestion",
          type = PostQuestion.type
        ).selections(__postQuestion)
        .build()
      )

  private val __post: List<CompiledSelection> = listOf(
        CompiledField.Builder(
          name = "id",
          type = GraphQLID.type.notNull()
        ).build(),
        CompiledField.Builder(
          name = "author",
          type = Author.type.notNull()
        ).selections(__author)
        .build(),
        CompiledField.Builder(
          name = "profile",
          type = Profile.type.notNull()
        ).selections(__profile)
        .build(),
        CompiledField.Builder(
          name = "title",
          type = GraphQLString.type.notNull()
        ).build(),
        CompiledField.Builder(
          name = "description",
          type = GraphQLString.type.notNull()
        ).build(),
        CompiledField.Builder(
          name = "body",
          type = GraphQLString.type.notNull()
        ).build(),
        CompiledField.Builder(
          name = "cover",
          type = Url.type.notNull()
        ).build(),
        CompiledField.Builder(
          name = "arweaveTxHash",
          type = GraphQLString.type.notNull()
        ).build(),
        CompiledField.Builder(
          name = "publishedAt",
          type = DateTime.type.notNull()
        ).build(),
        CompiledField.Builder(
          name = "commentVisible",
          type = GraphQLBoolean.type.notNull()
        ).build(),
        CompiledField.Builder(
          name = "viewCount",
          type = GraphQLInt.type.notNull()
        ).build(),
        CompiledField.Builder(
          name = "essence",
          type = PostEssence.type
        ).selections(__essence)
        .build()
      )

  public val __root: List<CompiledSelection> = listOf(
        CompiledField.Builder(
          name = "post",
          type = Post.type
        ).arguments(listOf(
          CompiledArgument.Builder("id", CompiledVariable("id")).build()
        ))
        .selections(__post)
        .build()
      )
}
