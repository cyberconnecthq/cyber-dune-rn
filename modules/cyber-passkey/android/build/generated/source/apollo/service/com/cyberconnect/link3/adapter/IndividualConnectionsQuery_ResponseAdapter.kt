//
// AUTO-GENERATED FILE. DO NOT MODIFY.
//
// This class was automatically generated by Apollo GraphQL version '3.8.2'.
//
package com.cyberconnect.link3.adapter

import com.apollographql.apollo3.api.Adapter
import com.apollographql.apollo3.api.CustomScalarAdapters
import com.apollographql.apollo3.api.StringAdapter
import com.apollographql.apollo3.api.evaluate
import com.apollographql.apollo3.api.json.JsonReader
import com.apollographql.apollo3.api.json.JsonWriter
import com.apollographql.apollo3.api.list
import com.apollographql.apollo3.api.nullable
import com.apollographql.apollo3.api.obj
import com.apollographql.apollo3.api.possibleTypes
import com.cyberconnect.link3.IndividualConnectionsQuery
import com.cyberconnect.link3.fragment.ConnectionPersonalProfile
import kotlin.String
import kotlin.Unit

public object IndividualConnectionsQuery_ResponseAdapter {
  public object Data : Adapter<IndividualConnectionsQuery.Data> {
    public val RESPONSE_NAMES: kotlin.collections.List<String> = listOf("recommended")

    public override fun fromJson(reader: JsonReader, customScalarAdapters: CustomScalarAdapters):
        IndividualConnectionsQuery.Data {
      var _recommended: IndividualConnectionsQuery.Recommended? = null

      while(true) {
        when (reader.selectName(RESPONSE_NAMES)) {
          0 -> _recommended = Recommended.obj().fromJson(reader, customScalarAdapters)
          else -> break
        }
      }

      return IndividualConnectionsQuery.Data(
        recommended = _recommended!!
      )
    }

    public override fun toJson(
      writer: JsonWriter,
      customScalarAdapters: CustomScalarAdapters,
      `value`: IndividualConnectionsQuery.Data,
    ): Unit {
      writer.name("recommended")
      Recommended.obj().toJson(writer, customScalarAdapters, value.recommended)
    }
  }

  public object Recommended : Adapter<IndividualConnectionsQuery.Recommended> {
    public val RESPONSE_NAMES: kotlin.collections.List<String> = listOf("data")

    public override fun fromJson(reader: JsonReader, customScalarAdapters: CustomScalarAdapters):
        IndividualConnectionsQuery.Recommended {
      var _data: IndividualConnectionsQuery.Data1? = null

      while(true) {
        when (reader.selectName(RESPONSE_NAMES)) {
          0 -> _data = Data1.obj().nullable().fromJson(reader, customScalarAdapters)
          else -> break
        }
      }

      return IndividualConnectionsQuery.Recommended(
        `data` = _data
      )
    }

    public override fun toJson(
      writer: JsonWriter,
      customScalarAdapters: CustomScalarAdapters,
      `value`: IndividualConnectionsQuery.Recommended,
    ): Unit {
      writer.name("data")
      Data1.obj().nullable().toJson(writer, customScalarAdapters, value.`data`)
    }
  }

  public object Data1 : Adapter<IndividualConnectionsQuery.Data1> {
    public val RESPONSE_NAMES: kotlin.collections.List<String> = listOf("recommendedProfiles")

    public override fun fromJson(reader: JsonReader, customScalarAdapters: CustomScalarAdapters):
        IndividualConnectionsQuery.Data1 {
      var _recommendedProfiles: IndividualConnectionsQuery.RecommendedProfiles? = null

      while(true) {
        when (reader.selectName(RESPONSE_NAMES)) {
          0 -> _recommendedProfiles = RecommendedProfiles.obj().fromJson(reader,
              customScalarAdapters)
          else -> break
        }
      }

      return IndividualConnectionsQuery.Data1(
        recommendedProfiles = _recommendedProfiles!!
      )
    }

    public override fun toJson(
      writer: JsonWriter,
      customScalarAdapters: CustomScalarAdapters,
      `value`: IndividualConnectionsQuery.Data1,
    ): Unit {
      writer.name("recommendedProfiles")
      RecommendedProfiles.obj().toJson(writer, customScalarAdapters, value.recommendedProfiles)
    }
  }

  public object RecommendedProfiles : Adapter<IndividualConnectionsQuery.RecommendedProfiles> {
    public val RESPONSE_NAMES: kotlin.collections.List<String> = listOf("list", "pageInfo")

    public override fun fromJson(reader: JsonReader, customScalarAdapters: CustomScalarAdapters):
        IndividualConnectionsQuery.RecommendedProfiles {
      var _list: kotlin.collections.List<IndividualConnectionsQuery.List>? = null
      var _pageInfo: IndividualConnectionsQuery.PageInfo? = null

      while(true) {
        when (reader.selectName(RESPONSE_NAMES)) {
          0 -> _list = List.obj(true).list().fromJson(reader, customScalarAdapters)
          1 -> _pageInfo = PageInfo.obj(true).fromJson(reader, customScalarAdapters)
          else -> break
        }
      }

      return IndividualConnectionsQuery.RecommendedProfiles(
        list = _list!!,
        pageInfo = _pageInfo!!
      )
    }

    public override fun toJson(
      writer: JsonWriter,
      customScalarAdapters: CustomScalarAdapters,
      `value`: IndividualConnectionsQuery.RecommendedProfiles,
    ): Unit {
      writer.name("list")
      List.obj(true).list().toJson(writer, customScalarAdapters, value.list)

      writer.name("pageInfo")
      PageInfo.obj(true).toJson(writer, customScalarAdapters, value.pageInfo)
    }
  }

  public object List : Adapter<IndividualConnectionsQuery.List> {
    public val RESPONSE_NAMES: kotlin.collections.List<String> = listOf("__typename")

    public override fun fromJson(reader: JsonReader, customScalarAdapters: CustomScalarAdapters):
        IndividualConnectionsQuery.List {
      var __typename: String? = null

      while(true) {
        when (reader.selectName(RESPONSE_NAMES)) {
          0 -> __typename = StringAdapter.fromJson(reader, customScalarAdapters)
          else -> break
        }
      }

      check(__typename != null) {
        "__typename was not found"
      }

      var _connectionPersonalProfile: ConnectionPersonalProfile? = null
      if (possibleTypes("PerProfile").evaluate(customScalarAdapters.adapterContext.variables(), __typename, customScalarAdapters.adapterContext, null)) {
        reader.rewind()
        _connectionPersonalProfile = com.cyberconnect.link3.fragment.ConnectionPersonalProfileImpl_ResponseAdapter.ConnectionPersonalProfile.fromJson(reader,
            customScalarAdapters)
      }

      return IndividualConnectionsQuery.List(
        __typename = __typename,
        connectionPersonalProfile = _connectionPersonalProfile
      )
    }

    public override fun toJson(
      writer: JsonWriter,
      customScalarAdapters: CustomScalarAdapters,
      `value`: IndividualConnectionsQuery.List,
    ): Unit {
      writer.name("__typename")
      StringAdapter.toJson(writer, customScalarAdapters, value.__typename)

      if (value.connectionPersonalProfile != null) {
        com.cyberconnect.link3.fragment.ConnectionPersonalProfileImpl_ResponseAdapter.ConnectionPersonalProfile.toJson(writer,
            customScalarAdapters, value.connectionPersonalProfile)
      }
    }
  }

  public object PageInfo : Adapter<IndividualConnectionsQuery.PageInfo> {
    public val RESPONSE_NAMES: kotlin.collections.List<String> = listOf("__typename")

    public override fun fromJson(reader: JsonReader, customScalarAdapters: CustomScalarAdapters):
        IndividualConnectionsQuery.PageInfo {
      var __typename: String? = null

      while(true) {
        when (reader.selectName(RESPONSE_NAMES)) {
          0 -> __typename = StringAdapter.fromJson(reader, customScalarAdapters)
          else -> break
        }
      }

      reader.rewind()
      val _pageInfo = com.cyberconnect.link3.fragment.PageInfoImpl_ResponseAdapter.PageInfo.fromJson(reader,
          customScalarAdapters)

      return IndividualConnectionsQuery.PageInfo(
        __typename = __typename!!,
        pageInfo = _pageInfo
      )
    }

    public override fun toJson(
      writer: JsonWriter,
      customScalarAdapters: CustomScalarAdapters,
      `value`: IndividualConnectionsQuery.PageInfo,
    ): Unit {
      writer.name("__typename")
      StringAdapter.toJson(writer, customScalarAdapters, value.__typename)

      com.cyberconnect.link3.fragment.PageInfoImpl_ResponseAdapter.PageInfo.toJson(writer,
          customScalarAdapters, value.pageInfo)
    }
  }
}
