//
// AUTO-GENERATED FILE. DO NOT MODIFY.
//
// This class was automatically generated by Apollo GraphQL version '3.8.2'.
//
package com.cyberconnect.link3.fragment

import com.apollographql.apollo3.api.Adapter
import com.apollographql.apollo3.api.AnyAdapter
import com.apollographql.apollo3.api.BooleanAdapter
import com.apollographql.apollo3.api.CustomScalarAdapters
import com.apollographql.apollo3.api.StringAdapter
import com.apollographql.apollo3.api.json.JsonReader
import com.apollographql.apollo3.api.json.JsonWriter
import com.apollographql.apollo3.api.list
import com.apollographql.apollo3.api.obj
import com.cyberconnect.link3.type.EventStatus
import com.cyberconnect.link3.type.adapter.EventStatus_ResponseAdapter
import kotlin.Any
import kotlin.Boolean
import kotlin.String
import kotlin.Unit
import kotlin.collections.List

public object EventBlockImpl_ResponseAdapter {
  public object EventBlock : Adapter<com.cyberconnect.link3.fragment.EventBlock> {
    public val RESPONSE_NAMES: List<String> = listOf("events")

    public override fun fromJson(reader: JsonReader, customScalarAdapters: CustomScalarAdapters):
        com.cyberconnect.link3.fragment.EventBlock {
      var _events: List<com.cyberconnect.link3.fragment.EventBlock.Event>? = null

      while(true) {
        when (reader.selectName(RESPONSE_NAMES)) {
          0 -> _events = Event.obj().list().fromJson(reader, customScalarAdapters)
          else -> break
        }
      }

      return com.cyberconnect.link3.fragment.EventBlock(
        events = _events!!
      )
    }

    public override fun toJson(
      writer: JsonWriter,
      customScalarAdapters: CustomScalarAdapters,
      `value`: com.cyberconnect.link3.fragment.EventBlock,
    ): Unit {
      writer.name("events")
      Event.obj().list().toJson(writer, customScalarAdapters, value.events)
    }
  }

  public object Event : Adapter<com.cyberconnect.link3.fragment.EventBlock.Event> {
    public val RESPONSE_NAMES: List<String> = listOf("id", "status", "timezone", "lightInfo",
        "title", "startTimestamp")

    public override fun fromJson(reader: JsonReader, customScalarAdapters: CustomScalarAdapters):
        com.cyberconnect.link3.fragment.EventBlock.Event {
      var _id: String? = null
      var _status: EventStatus? = null
      var _timezone: String? = null
      var _lightInfo: com.cyberconnect.link3.fragment.EventBlock.LightInfo? = null
      var _title: String? = null
      var _startTimestamp: Any? = null

      while(true) {
        when (reader.selectName(RESPONSE_NAMES)) {
          0 -> _id = StringAdapter.fromJson(reader, customScalarAdapters)
          1 -> _status = EventStatus_ResponseAdapter.fromJson(reader, customScalarAdapters)
          2 -> _timezone = StringAdapter.fromJson(reader, customScalarAdapters)
          3 -> _lightInfo = LightInfo.obj().fromJson(reader, customScalarAdapters)
          4 -> _title = StringAdapter.fromJson(reader, customScalarAdapters)
          5 -> _startTimestamp = AnyAdapter.fromJson(reader, customScalarAdapters)
          else -> break
        }
      }

      return com.cyberconnect.link3.fragment.EventBlock.Event(
        id = _id!!,
        status = _status!!,
        timezone = _timezone!!,
        lightInfo = _lightInfo!!,
        title = _title!!,
        startTimestamp = _startTimestamp!!
      )
    }

    public override fun toJson(
      writer: JsonWriter,
      customScalarAdapters: CustomScalarAdapters,
      `value`: com.cyberconnect.link3.fragment.EventBlock.Event,
    ): Unit {
      writer.name("id")
      StringAdapter.toJson(writer, customScalarAdapters, value.id)

      writer.name("status")
      EventStatus_ResponseAdapter.toJson(writer, customScalarAdapters, value.status)

      writer.name("timezone")
      StringAdapter.toJson(writer, customScalarAdapters, value.timezone)

      writer.name("lightInfo")
      LightInfo.obj().toJson(writer, customScalarAdapters, value.lightInfo)

      writer.name("title")
      StringAdapter.toJson(writer, customScalarAdapters, value.title)

      writer.name("startTimestamp")
      AnyAdapter.toJson(writer, customScalarAdapters, value.startTimestamp)
    }
  }

  public object LightInfo : Adapter<com.cyberconnect.link3.fragment.EventBlock.LightInfo> {
    public val RESPONSE_NAMES: List<String> = listOf("hasRaffle", "hasW3ST")

    public override fun fromJson(reader: JsonReader, customScalarAdapters: CustomScalarAdapters):
        com.cyberconnect.link3.fragment.EventBlock.LightInfo {
      var _hasRaffle: Boolean? = null
      var _hasW3ST: Boolean? = null

      while(true) {
        when (reader.selectName(RESPONSE_NAMES)) {
          0 -> _hasRaffle = BooleanAdapter.fromJson(reader, customScalarAdapters)
          1 -> _hasW3ST = BooleanAdapter.fromJson(reader, customScalarAdapters)
          else -> break
        }
      }

      return com.cyberconnect.link3.fragment.EventBlock.LightInfo(
        hasRaffle = _hasRaffle!!,
        hasW3ST = _hasW3ST!!
      )
    }

    public override fun toJson(
      writer: JsonWriter,
      customScalarAdapters: CustomScalarAdapters,
      `value`: com.cyberconnect.link3.fragment.EventBlock.LightInfo,
    ): Unit {
      writer.name("hasRaffle")
      BooleanAdapter.toJson(writer, customScalarAdapters, value.hasRaffle)

      writer.name("hasW3ST")
      BooleanAdapter.toJson(writer, customScalarAdapters, value.hasW3ST)
    }
  }
}
