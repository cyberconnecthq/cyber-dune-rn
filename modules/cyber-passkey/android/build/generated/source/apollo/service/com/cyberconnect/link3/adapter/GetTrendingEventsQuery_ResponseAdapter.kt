//
// AUTO-GENERATED FILE. DO NOT MODIFY.
//
// This class was automatically generated by Apollo GraphQL version '3.8.2'.
//
package com.cyberconnect.link3.adapter

import com.apollographql.apollo3.api.Adapter
import com.apollographql.apollo3.api.AnyAdapter
import com.apollographql.apollo3.api.BooleanAdapter
import com.apollographql.apollo3.api.CustomScalarAdapters
import com.apollographql.apollo3.api.IntAdapter
import com.apollographql.apollo3.api.StringAdapter
import com.apollographql.apollo3.api.json.JsonReader
import com.apollographql.apollo3.api.json.JsonWriter
import com.apollographql.apollo3.api.list
import com.apollographql.apollo3.api.obj
import com.cyberconnect.link3.GetTrendingEventsQuery
import com.cyberconnect.link3.type.EventRegisterStatus
import com.cyberconnect.link3.type.EventStatus
import com.cyberconnect.link3.type.adapter.EventRegisterStatus_ResponseAdapter
import com.cyberconnect.link3.type.adapter.EventStatus_ResponseAdapter
import kotlin.Any
import kotlin.Boolean
import kotlin.Int
import kotlin.String
import kotlin.Unit

public object GetTrendingEventsQuery_ResponseAdapter {
  public object Data : Adapter<GetTrendingEventsQuery.Data> {
    public val RESPONSE_NAMES: kotlin.collections.List<String> = listOf("trendingEvents")

    public override fun fromJson(reader: JsonReader, customScalarAdapters: CustomScalarAdapters):
        GetTrendingEventsQuery.Data {
      var _trendingEvents: GetTrendingEventsQuery.TrendingEvents? = null

      while(true) {
        when (reader.selectName(RESPONSE_NAMES)) {
          0 -> _trendingEvents = TrendingEvents.obj().fromJson(reader, customScalarAdapters)
          else -> break
        }
      }

      return GetTrendingEventsQuery.Data(
        trendingEvents = _trendingEvents!!
      )
    }

    public override fun toJson(
      writer: JsonWriter,
      customScalarAdapters: CustomScalarAdapters,
      `value`: GetTrendingEventsQuery.Data,
    ): Unit {
      writer.name("trendingEvents")
      TrendingEvents.obj().toJson(writer, customScalarAdapters, value.trendingEvents)
    }
  }

  public object TrendingEvents : Adapter<GetTrendingEventsQuery.TrendingEvents> {
    public val RESPONSE_NAMES: kotlin.collections.List<String> = listOf("pageInfo", "list")

    public override fun fromJson(reader: JsonReader, customScalarAdapters: CustomScalarAdapters):
        GetTrendingEventsQuery.TrendingEvents {
      var _pageInfo: GetTrendingEventsQuery.PageInfo? = null
      var _list: kotlin.collections.List<GetTrendingEventsQuery.List>? = null

      while(true) {
        when (reader.selectName(RESPONSE_NAMES)) {
          0 -> _pageInfo = PageInfo.obj(true).fromJson(reader, customScalarAdapters)
          1 -> _list = List.obj().list().fromJson(reader, customScalarAdapters)
          else -> break
        }
      }

      return GetTrendingEventsQuery.TrendingEvents(
        pageInfo = _pageInfo!!,
        list = _list!!
      )
    }

    public override fun toJson(
      writer: JsonWriter,
      customScalarAdapters: CustomScalarAdapters,
      `value`: GetTrendingEventsQuery.TrendingEvents,
    ): Unit {
      writer.name("pageInfo")
      PageInfo.obj(true).toJson(writer, customScalarAdapters, value.pageInfo)

      writer.name("list")
      List.obj().list().toJson(writer, customScalarAdapters, value.list)
    }
  }

  public object PageInfo : Adapter<GetTrendingEventsQuery.PageInfo> {
    public val RESPONSE_NAMES: kotlin.collections.List<String> = listOf("__typename")

    public override fun fromJson(reader: JsonReader, customScalarAdapters: CustomScalarAdapters):
        GetTrendingEventsQuery.PageInfo {
      var __typename: String? = null

      while(true) {
        when (reader.selectName(RESPONSE_NAMES)) {
          0 -> __typename = StringAdapter.fromJson(reader, customScalarAdapters)
          else -> break
        }
      }

      reader.rewind()
      val _pageInfo = com.cyberconnect.link3.fragment.PageInfoImpl_ResponseAdapter.PageInfo.fromJson(reader,
          customScalarAdapters)

      return GetTrendingEventsQuery.PageInfo(
        __typename = __typename!!,
        pageInfo = _pageInfo
      )
    }

    public override fun toJson(
      writer: JsonWriter,
      customScalarAdapters: CustomScalarAdapters,
      `value`: GetTrendingEventsQuery.PageInfo,
    ): Unit {
      writer.name("__typename")
      StringAdapter.toJson(writer, customScalarAdapters, value.__typename)

      com.cyberconnect.link3.fragment.PageInfoImpl_ResponseAdapter.PageInfo.toJson(writer,
          customScalarAdapters, value.pageInfo)
    }
  }

  public object List : Adapter<GetTrendingEventsQuery.List> {
    public val RESPONSE_NAMES: kotlin.collections.List<String> = listOf("id", "info", "title",
        "posterUrl", "startTimestamp", "endTimestamp", "registrantsCount", "registerStatus",
        "status", "organizer", "lightInfo")

    public override fun fromJson(reader: JsonReader, customScalarAdapters: CustomScalarAdapters):
        GetTrendingEventsQuery.List {
      var _id: String? = null
      var _info: String? = null
      var _title: String? = null
      var _posterUrl: Any? = null
      var _startTimestamp: Any? = null
      var _endTimestamp: Any? = null
      var _registrantsCount: Int? = null
      var _registerStatus: EventRegisterStatus? = null
      var _status: EventStatus? = null
      var _organizer: GetTrendingEventsQuery.Organizer? = null
      var _lightInfo: GetTrendingEventsQuery.LightInfo? = null

      while(true) {
        when (reader.selectName(RESPONSE_NAMES)) {
          0 -> _id = StringAdapter.fromJson(reader, customScalarAdapters)
          1 -> _info = StringAdapter.fromJson(reader, customScalarAdapters)
          2 -> _title = StringAdapter.fromJson(reader, customScalarAdapters)
          3 -> _posterUrl = AnyAdapter.fromJson(reader, customScalarAdapters)
          4 -> _startTimestamp = AnyAdapter.fromJson(reader, customScalarAdapters)
          5 -> _endTimestamp = AnyAdapter.fromJson(reader, customScalarAdapters)
          6 -> _registrantsCount = IntAdapter.fromJson(reader, customScalarAdapters)
          7 -> _registerStatus = EventRegisterStatus_ResponseAdapter.fromJson(reader,
              customScalarAdapters)
          8 -> _status = EventStatus_ResponseAdapter.fromJson(reader, customScalarAdapters)
          9 -> _organizer = Organizer.obj(true).fromJson(reader, customScalarAdapters)
          10 -> _lightInfo = LightInfo.obj().fromJson(reader, customScalarAdapters)
          else -> break
        }
      }

      return GetTrendingEventsQuery.List(
        id = _id!!,
        info = _info!!,
        title = _title!!,
        posterUrl = _posterUrl!!,
        startTimestamp = _startTimestamp!!,
        endTimestamp = _endTimestamp!!,
        registrantsCount = _registrantsCount!!,
        registerStatus = _registerStatus!!,
        status = _status!!,
        organizer = _organizer!!,
        lightInfo = _lightInfo!!
      )
    }

    public override fun toJson(
      writer: JsonWriter,
      customScalarAdapters: CustomScalarAdapters,
      `value`: GetTrendingEventsQuery.List,
    ): Unit {
      writer.name("id")
      StringAdapter.toJson(writer, customScalarAdapters, value.id)

      writer.name("info")
      StringAdapter.toJson(writer, customScalarAdapters, value.info)

      writer.name("title")
      StringAdapter.toJson(writer, customScalarAdapters, value.title)

      writer.name("posterUrl")
      AnyAdapter.toJson(writer, customScalarAdapters, value.posterUrl)

      writer.name("startTimestamp")
      AnyAdapter.toJson(writer, customScalarAdapters, value.startTimestamp)

      writer.name("endTimestamp")
      AnyAdapter.toJson(writer, customScalarAdapters, value.endTimestamp)

      writer.name("registrantsCount")
      IntAdapter.toJson(writer, customScalarAdapters, value.registrantsCount)

      writer.name("registerStatus")
      EventRegisterStatus_ResponseAdapter.toJson(writer, customScalarAdapters, value.registerStatus)

      writer.name("status")
      EventStatus_ResponseAdapter.toJson(writer, customScalarAdapters, value.status)

      writer.name("organizer")
      Organizer.obj(true).toJson(writer, customScalarAdapters, value.organizer)

      writer.name("lightInfo")
      LightInfo.obj().toJson(writer, customScalarAdapters, value.lightInfo)
    }
  }

  public object Organizer : Adapter<GetTrendingEventsQuery.Organizer> {
    public val RESPONSE_NAMES: kotlin.collections.List<String> = listOf("__typename")

    public override fun fromJson(reader: JsonReader, customScalarAdapters: CustomScalarAdapters):
        GetTrendingEventsQuery.Organizer {
      var __typename: String? = null

      while(true) {
        when (reader.selectName(RESPONSE_NAMES)) {
          0 -> __typename = StringAdapter.fromJson(reader, customScalarAdapters)
          else -> break
        }
      }

      reader.rewind()
      val _organizer = com.cyberconnect.link3.fragment.OrganizerImpl_ResponseAdapter.Organizer.fromJson(reader,
          customScalarAdapters)

      return GetTrendingEventsQuery.Organizer(
        __typename = __typename!!,
        organizer = _organizer
      )
    }

    public override fun toJson(
      writer: JsonWriter,
      customScalarAdapters: CustomScalarAdapters,
      `value`: GetTrendingEventsQuery.Organizer,
    ): Unit {
      writer.name("__typename")
      StringAdapter.toJson(writer, customScalarAdapters, value.__typename)

      com.cyberconnect.link3.fragment.OrganizerImpl_ResponseAdapter.Organizer.toJson(writer,
          customScalarAdapters, value.organizer)
    }
  }

  public object LightInfo : Adapter<GetTrendingEventsQuery.LightInfo> {
    public val RESPONSE_NAMES: kotlin.collections.List<String> = listOf("hasRaffle", "hasW3ST")

    public override fun fromJson(reader: JsonReader, customScalarAdapters: CustomScalarAdapters):
        GetTrendingEventsQuery.LightInfo {
      var _hasRaffle: Boolean? = null
      var _hasW3ST: Boolean? = null

      while(true) {
        when (reader.selectName(RESPONSE_NAMES)) {
          0 -> _hasRaffle = BooleanAdapter.fromJson(reader, customScalarAdapters)
          1 -> _hasW3ST = BooleanAdapter.fromJson(reader, customScalarAdapters)
          else -> break
        }
      }

      return GetTrendingEventsQuery.LightInfo(
        hasRaffle = _hasRaffle!!,
        hasW3ST = _hasW3ST!!
      )
    }

    public override fun toJson(
      writer: JsonWriter,
      customScalarAdapters: CustomScalarAdapters,
      `value`: GetTrendingEventsQuery.LightInfo,
    ): Unit {
      writer.name("hasRaffle")
      BooleanAdapter.toJson(writer, customScalarAdapters, value.hasRaffle)

      writer.name("hasW3ST")
      BooleanAdapter.toJson(writer, customScalarAdapters, value.hasW3ST)
    }
  }
}
