//
// AUTO-GENERATED FILE. DO NOT MODIFY.
//
// This class was automatically generated by Apollo GraphQL version '3.8.2'.
//
package com.cyberconnect.link3.selections

import com.apollographql.apollo3.api.CompiledArgument
import com.apollographql.apollo3.api.CompiledField
import com.apollographql.apollo3.api.CompiledFragment
import com.apollographql.apollo3.api.CompiledSelection
import com.apollographql.apollo3.api.CompiledVariable
import com.apollographql.apollo3.api.list
import com.apollographql.apollo3.api.notNull
import com.cyberconnect.link3.fragment.selections.OrganizerSelections
import com.cyberconnect.link3.fragment.selections.PageInfoSelections
import com.cyberconnect.link3.type.Event
import com.cyberconnect.link3.type.EventLightInfo
import com.cyberconnect.link3.type.EventPage
import com.cyberconnect.link3.type.EventRegisterStatus
import com.cyberconnect.link3.type.EventStatus
import com.cyberconnect.link3.type.GraphQLBoolean
import com.cyberconnect.link3.type.GraphQLID
import com.cyberconnect.link3.type.GraphQLInt
import com.cyberconnect.link3.type.GraphQLString
import com.cyberconnect.link3.type.Organization
import com.cyberconnect.link3.type.PageInfo
import com.cyberconnect.link3.type.Timestamp
import com.cyberconnect.link3.type.Url
import kotlin.collections.List

public object GetTrendingEventsQuerySelections {
  private val __pageInfo: List<CompiledSelection> = listOf(
        CompiledField.Builder(
          name = "__typename",
          type = GraphQLString.type.notNull()
        ).build(),
        CompiledFragment.Builder(
          typeCondition = "PageInfo",
          possibleTypes = listOf("PageInfo")
        ).selections(PageInfoSelections.__root)
        .build()
      )

  private val __organizer: List<CompiledSelection> = listOf(
        CompiledField.Builder(
          name = "__typename",
          type = GraphQLString.type.notNull()
        ).build(),
        CompiledFragment.Builder(
          typeCondition = "Organization",
          possibleTypes = listOf("Organization")
        ).selections(OrganizerSelections.__root)
        .build()
      )

  private val __lightInfo: List<CompiledSelection> = listOf(
        CompiledField.Builder(
          name = "hasRaffle",
          type = GraphQLBoolean.type.notNull()
        ).build(),
        CompiledField.Builder(
          name = "hasW3ST",
          type = GraphQLBoolean.type.notNull()
        ).build()
      )

  private val __list: List<CompiledSelection> = listOf(
        CompiledField.Builder(
          name = "id",
          type = GraphQLID.type.notNull()
        ).build(),
        CompiledField.Builder(
          name = "info",
          type = GraphQLString.type.notNull()
        ).build(),
        CompiledField.Builder(
          name = "title",
          type = GraphQLString.type.notNull()
        ).build(),
        CompiledField.Builder(
          name = "posterUrl",
          type = Url.type.notNull()
        ).build(),
        CompiledField.Builder(
          name = "startTimestamp",
          type = Timestamp.type.notNull()
        ).build(),
        CompiledField.Builder(
          name = "endTimestamp",
          type = Timestamp.type.notNull()
        ).build(),
        CompiledField.Builder(
          name = "registrantsCount",
          type = GraphQLInt.type.notNull()
        ).build(),
        CompiledField.Builder(
          name = "registerStatus",
          type = EventRegisterStatus.type.notNull()
        ).build(),
        CompiledField.Builder(
          name = "status",
          type = EventStatus.type.notNull()
        ).build(),
        CompiledField.Builder(
          name = "organizer",
          type = Organization.type.notNull()
        ).selections(__organizer)
        .build(),
        CompiledField.Builder(
          name = "lightInfo",
          type = EventLightInfo.type.notNull()
        ).selections(__lightInfo)
        .build()
      )

  private val __trendingEvents: List<CompiledSelection> = listOf(
        CompiledField.Builder(
          name = "pageInfo",
          type = PageInfo.type.notNull()
        ).selections(__pageInfo)
        .build(),
        CompiledField.Builder(
          name = "list",
          type = Event.type.notNull().list().notNull()
        ).selections(__list)
        .build()
      )

  public val __root: List<CompiledSelection> = listOf(
        CompiledField.Builder(
          name = "trendingEvents",
          type = EventPage.type.notNull()
        ).arguments(listOf(
          CompiledArgument.Builder("after", CompiledVariable("after")).build(),
          CompiledArgument.Builder("filter", CompiledVariable("filter")).build(),
          CompiledArgument.Builder("first", CompiledVariable("first")).build(),
          CompiledArgument.Builder("order", CompiledVariable("order")).build()
        ))
        .selections(__trendingEvents)
        .build()
      )
}
