//
// AUTO-GENERATED FILE. DO NOT MODIFY.
//
// This class was automatically generated by Apollo GraphQL version '3.8.2'.
//
package com.cyberconnect.link3.adapter

import com.apollographql.apollo3.api.Adapter
import com.apollographql.apollo3.api.CustomScalarAdapters
import com.apollographql.apollo3.api.StringAdapter
import com.apollographql.apollo3.api.evaluate
import com.apollographql.apollo3.api.json.JsonReader
import com.apollographql.apollo3.api.json.JsonWriter
import com.apollographql.apollo3.api.list
import com.apollographql.apollo3.api.nullable
import com.apollographql.apollo3.api.obj
import com.apollographql.apollo3.api.possibleTypes
import com.cyberconnect.link3.FollowersQuery
import com.cyberconnect.link3.type.MeResponse_Status
import com.cyberconnect.link3.type.adapter.MeResponse_Status_ResponseAdapter
import kotlin.String
import kotlin.Unit

public object FollowersQuery_ResponseAdapter {
  public object Data : Adapter<FollowersQuery.Data> {
    public val RESPONSE_NAMES: kotlin.collections.List<String> = listOf("me")

    public override fun fromJson(reader: JsonReader, customScalarAdapters: CustomScalarAdapters):
        FollowersQuery.Data {
      var _me: FollowersQuery.Me? = null

      while(true) {
        when (reader.selectName(RESPONSE_NAMES)) {
          0 -> _me = Me.obj().fromJson(reader, customScalarAdapters)
          else -> break
        }
      }

      return FollowersQuery.Data(
        me = _me!!
      )
    }

    public override fun toJson(
      writer: JsonWriter,
      customScalarAdapters: CustomScalarAdapters,
      `value`: FollowersQuery.Data,
    ): Unit {
      writer.name("me")
      Me.obj().toJson(writer, customScalarAdapters, value.me)
    }
  }

  public object Me : Adapter<FollowersQuery.Me> {
    public val RESPONSE_NAMES: kotlin.collections.List<String> = listOf("status", "message", "data")

    public override fun fromJson(reader: JsonReader, customScalarAdapters: CustomScalarAdapters):
        FollowersQuery.Me {
      var _status: MeResponse_Status? = null
      var _message: String? = null
      var _data: FollowersQuery.Data1? = null

      while(true) {
        when (reader.selectName(RESPONSE_NAMES)) {
          0 -> _status = MeResponse_Status_ResponseAdapter.fromJson(reader, customScalarAdapters)
          1 -> _message = StringAdapter.fromJson(reader, customScalarAdapters)
          2 -> _data = Data1.obj().nullable().fromJson(reader, customScalarAdapters)
          else -> break
        }
      }

      return FollowersQuery.Me(
        status = _status!!,
        message = _message!!,
        `data` = _data
      )
    }

    public override fun toJson(
      writer: JsonWriter,
      customScalarAdapters: CustomScalarAdapters,
      `value`: FollowersQuery.Me,
    ): Unit {
      writer.name("status")
      MeResponse_Status_ResponseAdapter.toJson(writer, customScalarAdapters, value.status)

      writer.name("message")
      StringAdapter.toJson(writer, customScalarAdapters, value.message)

      writer.name("data")
      Data1.obj().nullable().toJson(writer, customScalarAdapters, value.`data`)
    }
  }

  public object Data1 : Adapter<FollowersQuery.Data1> {
    public val RESPONSE_NAMES: kotlin.collections.List<String> = listOf("profile")

    public override fun fromJson(reader: JsonReader, customScalarAdapters: CustomScalarAdapters):
        FollowersQuery.Data1 {
      var _profile: FollowersQuery.Profile? = null

      while(true) {
        when (reader.selectName(RESPONSE_NAMES)) {
          0 -> _profile = Profile.obj(true).nullable().fromJson(reader, customScalarAdapters)
          else -> break
        }
      }

      return FollowersQuery.Data1(
        profile = _profile
      )
    }

    public override fun toJson(
      writer: JsonWriter,
      customScalarAdapters: CustomScalarAdapters,
      `value`: FollowersQuery.Data1,
    ): Unit {
      writer.name("profile")
      Profile.obj(true).nullable().toJson(writer, customScalarAdapters, value.profile)
    }
  }

  public object Profile : Adapter<FollowersQuery.Profile> {
    public val RESPONSE_NAMES: kotlin.collections.List<String> = listOf("__typename")

    public override fun fromJson(reader: JsonReader, customScalarAdapters: CustomScalarAdapters):
        FollowersQuery.Profile {
      var __typename: String? = null

      while(true) {
        when (reader.selectName(RESPONSE_NAMES)) {
          0 -> __typename = StringAdapter.fromJson(reader, customScalarAdapters)
          else -> break
        }
      }

      check(__typename != null) {
        "__typename was not found"
      }

      var _onPerProfile: FollowersQuery.OnPerProfile? = null
      if (possibleTypes("PerProfile").evaluate(customScalarAdapters.adapterContext.variables(), __typename, customScalarAdapters.adapterContext, null)) {
        reader.rewind()
        _onPerProfile = com.cyberconnect.link3.adapter.FollowersQuery_ResponseAdapter.OnPerProfile.fromJson(reader,
            customScalarAdapters)
      }

      return FollowersQuery.Profile(
        __typename = __typename,
        onPerProfile = _onPerProfile
      )
    }

    public override fun toJson(
      writer: JsonWriter,
      customScalarAdapters: CustomScalarAdapters,
      `value`: FollowersQuery.Profile,
    ): Unit {
      writer.name("__typename")
      StringAdapter.toJson(writer, customScalarAdapters, value.__typename)

      if (value.onPerProfile != null) {
        com.cyberconnect.link3.adapter.FollowersQuery_ResponseAdapter.OnPerProfile.toJson(writer,
            customScalarAdapters, value.onPerProfile)
      }
    }
  }

  public object OnPerProfile : Adapter<FollowersQuery.OnPerProfile> {
    public val RESPONSE_NAMES: kotlin.collections.List<String> = listOf("pendingConnection")

    public override fun fromJson(reader: JsonReader, customScalarAdapters: CustomScalarAdapters):
        FollowersQuery.OnPerProfile {
      var _pendingConnection: FollowersQuery.PendingConnection? = null

      while(true) {
        when (reader.selectName(RESPONSE_NAMES)) {
          0 -> _pendingConnection = PendingConnection.obj().fromJson(reader, customScalarAdapters)
          else -> break
        }
      }

      return FollowersQuery.OnPerProfile(
        pendingConnection = _pendingConnection!!
      )
    }

    public override fun toJson(
      writer: JsonWriter,
      customScalarAdapters: CustomScalarAdapters,
      `value`: FollowersQuery.OnPerProfile,
    ): Unit {
      writer.name("pendingConnection")
      PendingConnection.obj().toJson(writer, customScalarAdapters, value.pendingConnection)
    }
  }

  public object PendingConnection : Adapter<FollowersQuery.PendingConnection> {
    public val RESPONSE_NAMES: kotlin.collections.List<String> = listOf("pageInfo", "list")

    public override fun fromJson(reader: JsonReader, customScalarAdapters: CustomScalarAdapters):
        FollowersQuery.PendingConnection {
      var _pageInfo: FollowersQuery.PageInfo? = null
      var _list: kotlin.collections.List<FollowersQuery.List>? = null

      while(true) {
        when (reader.selectName(RESPONSE_NAMES)) {
          0 -> _pageInfo = PageInfo.obj(true).fromJson(reader, customScalarAdapters)
          1 -> _list = List.obj(true).list().fromJson(reader, customScalarAdapters)
          else -> break
        }
      }

      return FollowersQuery.PendingConnection(
        pageInfo = _pageInfo!!,
        list = _list!!
      )
    }

    public override fun toJson(
      writer: JsonWriter,
      customScalarAdapters: CustomScalarAdapters,
      `value`: FollowersQuery.PendingConnection,
    ): Unit {
      writer.name("pageInfo")
      PageInfo.obj(true).toJson(writer, customScalarAdapters, value.pageInfo)

      writer.name("list")
      List.obj(true).list().toJson(writer, customScalarAdapters, value.list)
    }
  }

  public object PageInfo : Adapter<FollowersQuery.PageInfo> {
    public val RESPONSE_NAMES: kotlin.collections.List<String> = listOf("__typename")

    public override fun fromJson(reader: JsonReader, customScalarAdapters: CustomScalarAdapters):
        FollowersQuery.PageInfo {
      var __typename: String? = null

      while(true) {
        when (reader.selectName(RESPONSE_NAMES)) {
          0 -> __typename = StringAdapter.fromJson(reader, customScalarAdapters)
          else -> break
        }
      }

      reader.rewind()
      val _pageInfo = com.cyberconnect.link3.fragment.PageInfoImpl_ResponseAdapter.PageInfo.fromJson(reader,
          customScalarAdapters)

      return FollowersQuery.PageInfo(
        __typename = __typename!!,
        pageInfo = _pageInfo
      )
    }

    public override fun toJson(
      writer: JsonWriter,
      customScalarAdapters: CustomScalarAdapters,
      `value`: FollowersQuery.PageInfo,
    ): Unit {
      writer.name("__typename")
      StringAdapter.toJson(writer, customScalarAdapters, value.__typename)

      com.cyberconnect.link3.fragment.PageInfoImpl_ResponseAdapter.PageInfo.toJson(writer,
          customScalarAdapters, value.pageInfo)
    }
  }

  public object List : Adapter<FollowersQuery.List> {
    public val RESPONSE_NAMES: kotlin.collections.List<String> = listOf("__typename")

    public override fun fromJson(reader: JsonReader, customScalarAdapters: CustomScalarAdapters):
        FollowersQuery.List {
      var __typename: String? = null

      while(true) {
        when (reader.selectName(RESPONSE_NAMES)) {
          0 -> __typename = StringAdapter.fromJson(reader, customScalarAdapters)
          else -> break
        }
      }

      reader.rewind()
      val _myConnectionItem = com.cyberconnect.link3.fragment.MyConnectionItemImpl_ResponseAdapter.MyConnectionItem.fromJson(reader,
          customScalarAdapters)

      return FollowersQuery.List(
        __typename = __typename!!,
        myConnectionItem = _myConnectionItem
      )
    }

    public override fun toJson(
      writer: JsonWriter,
      customScalarAdapters: CustomScalarAdapters,
      `value`: FollowersQuery.List,
    ): Unit {
      writer.name("__typename")
      StringAdapter.toJson(writer, customScalarAdapters, value.__typename)

      com.cyberconnect.link3.fragment.MyConnectionItemImpl_ResponseAdapter.MyConnectionItem.toJson(writer,
          customScalarAdapters, value.myConnectionItem)
    }
  }
}
