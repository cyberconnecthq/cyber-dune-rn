//
// AUTO-GENERATED FILE. DO NOT MODIFY.
//
// This class was automatically generated by Apollo GraphQL version '3.8.2'.
//
package com.cyberconnect.link3

import com.apollographql.apollo3.annotations.ApolloAdaptableWith
import com.apollographql.apollo3.api.Adapter
import com.apollographql.apollo3.api.CompiledField
import com.apollographql.apollo3.api.CustomScalarAdapters
import com.apollographql.apollo3.api.Query
import com.apollographql.apollo3.api.json.JsonWriter
import com.apollographql.apollo3.api.obj
import com.cyberconnect.link3.adapter.GetPostQuery_ResponseAdapter
import com.cyberconnect.link3.adapter.GetPostQuery_VariablesAdapter
import com.cyberconnect.link3.selections.GetPostQuerySelections
import com.cyberconnect.link3.type.EssenceMwType
import kotlin.Any
import kotlin.Boolean
import kotlin.Int
import kotlin.String
import kotlin.Unit
import kotlin.collections.List

public data class GetPostQuery(
  public val id: String,
) : Query<GetPostQuery.Data> {
  public override fun id(): String = OPERATION_ID

  public override fun document(): String = OPERATION_DOCUMENT

  public override fun name(): String = OPERATION_NAME

  public override fun serializeVariables(writer: JsonWriter,
      customScalarAdapters: CustomScalarAdapters): Unit {
    GetPostQuery_VariablesAdapter.toJson(writer, customScalarAdapters, this)
  }

  public override fun adapter(): Adapter<Data> = GetPostQuery_ResponseAdapter.Data.obj()

  public override fun rootField(): CompiledField = CompiledField.Builder(
    name = "data",
    type = com.cyberconnect.link3.type.Query.type
  )
  .selections(selections = GetPostQuerySelections.__root)
  .build()

  @ApolloAdaptableWith(GetPostQuery_ResponseAdapter.Data::class)
  public data class Data(
    public val post: Post?,
  ) : Query.Data

  public data class Post(
    public val id: String,
    public val author: Author,
    public val profile: Profile,
    public val title: String,
    public val description: String,
    public val body: String,
    public val cover: Any,
    public val arweaveTxHash: String,
    public val publishedAt: Any,
    public val commentVisible: Boolean,
    public val viewCount: Int,
    public val essence: Essence?,
  )

  public data class Author(
    public val __typename: String,
    /**
     * Synthetic field for inline fragment on Organization
     */
    public val onOrganization: OnOrganization?,
    /**
     * Synthetic field for inline fragment on User
     */
    public val onUser: OnUser?,
  )

  public data class OnOrganization(
    public val __typename: String,
    public val lightInfo: LightInfo,
  )

  public data class LightInfo(
    public val displayName: String,
    public val profileHandle: String,
    public val profilePicture: String,
  )

  public data class OnUser(
    public val privateInfo: PrivateInfo?,
  )

  public data class PrivateInfo(
    public val address: Any,
  )

  public data class Profile(
    public val __typename: String,
    public val id: String,
    public val handle: String,
    /**
     * Synthetic field for inline fragment on PerProfile
     */
    public val onPerProfile: OnPerProfile?,
    /**
     * Synthetic field for inline fragment on OrgProfile
     */
    public val onOrgProfile: OnOrgProfile?,
  )

  public data class OnPerProfile(
    public val bio: String,
    /**
     * Display name of the personal profile, standard displayname or ENS, standard: 1-20 characters;
     * letters, numbers, and blanks only.
     */
    public val personalDisplayName: PersonalDisplayName,
    public val isFollowing: Boolean,
    /**
     * Profile avatar picture, hash of IPFS address or owned NFT.
     */
    public val personalprofilePicture: PersonalprofilePicture,
  )

  public data class PersonalDisplayName(
    public val displayName: String,
  )

  public data class PersonalprofilePicture(
    public val picture: String?,
  )

  public data class OnOrgProfile(
    public val bio: String,
    public val displayName: String,
    public val isFollowing: Boolean,
    public val profilePicture: String,
    public val organization: Organization,
  )

  public data class Organization(
    public val id: String,
  )

  public data class Essence(
    public val contract: String?,
    public val tokenUri: String?,
    public val tokenId: Int,
    public val cyberAccount: Any,
    public val imageUrl: Any,
    public val chainId: Int,
    public val profileId: Int?,
    public val essenceId: Int?,
    public val mwType: EssenceMwType,
    public val mwInfo: MwInfo,
    public val postQuestion: PostQuestion?,
  )

  public data class MwInfo(
    public val currencyAddress: String?,
    public val endTime: Any?,
    public val startTime: Any?,
    public val mwAddress: String?,
    public val price: String?,
    public val profileRequired: Boolean?,
    public val totalSupply: Int,
  )

  public data class PostQuestion(
    public val questions: List<String>,
    public val options: List<String>,
  )

  public companion object {
    public const val OPERATION_ID: String =
        "167aa02e1ca30c15c7545fe25baad862fe1ee61c383a4a87689948a715e85903"

    /**
     * The minimized GraphQL document being sent to the server to save a few bytes.
     * The un-minimized version is:
     *
     * query getPost($id: String!) {
     *   post(id: $id) {
     *     id
     *     author {
     *       __typename
     *       ... on Organization {
     *         __typename
     *         lightInfo {
     *           displayName
     *           profileHandle
     *           profilePicture
     *         }
     *       }
     *       ... on User {
     *         privateInfo {
     *           address
     *         }
     *       }
     *     }
     *     profile {
     *       __typename
     *       id
     *       handle
     *       ... on PerProfile {
     *         bio
     *         personalDisplayName: displayName {
     *           displayName
     *         }
     *         isFollowing
     *         personalprofilePicture: profilePicture {
     *           picture
     *         }
     *       }
     *       ... on OrgProfile {
     *         bio
     *         displayName
     *         isFollowing
     *         profilePicture
     *         organization {
     *           id
     *         }
     *       }
     *     }
     *     title
     *     description
     *     body
     *     cover
     *     arweaveTxHash
     *     publishedAt
     *     commentVisible
     *     viewCount
     *     essence {
     *       contract
     *       tokenUri
     *       tokenId
     *       cyberAccount
     *       imageUrl
     *       chainId
     *       profileId
     *       essenceId
     *       mwType
     *       mwInfo {
     *         currencyAddress
     *         endTime
     *         startTime
     *         mwAddress
     *         price
     *         profileRequired
     *         totalSupply
     *       }
     *       postQuestion {
     *         questions
     *         options
     *       }
     *     }
     *   }
     * }
     */
    public val OPERATION_DOCUMENT: String
      get() =
          "query getPost(${'$'}id: String!) { post(id: ${'$'}id) { id author { __typename ... on Organization { __typename lightInfo { displayName profileHandle profilePicture } } ... on User { privateInfo { address } } } profile { __typename id handle ... on PerProfile { bio personalDisplayName: displayName { displayName } isFollowing personalprofilePicture: profilePicture { picture } } ... on OrgProfile { bio displayName isFollowing profilePicture organization { id } } } title description body cover arweaveTxHash publishedAt commentVisible viewCount essence { contract tokenUri tokenId cyberAccount imageUrl chainId profileId essenceId mwType mwInfo { currencyAddress endTime startTime mwAddress price profileRequired totalSupply } postQuestion { questions options } } } }"

    public const val OPERATION_NAME: String = "getPost"
  }
}
