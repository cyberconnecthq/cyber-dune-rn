//
// AUTO-GENERATED FILE. DO NOT MODIFY.
//
// This class was automatically generated by Apollo GraphQL version '3.8.2'.
//
package com.cyberconnect.link3

import com.apollographql.apollo3.annotations.ApolloAdaptableWith
import com.apollographql.apollo3.api.Adapter
import com.apollographql.apollo3.api.CompiledField
import com.apollographql.apollo3.api.CustomScalarAdapters
import com.apollographql.apollo3.api.Mutation
import com.apollographql.apollo3.api.Optional
import com.apollographql.apollo3.api.json.JsonWriter
import com.apollographql.apollo3.api.obj
import com.cyberconnect.link3.adapter.LinkWeb2Mutation_ResponseAdapter
import com.cyberconnect.link3.adapter.LinkWeb2Mutation_VariablesAdapter
import com.cyberconnect.link3.selections.LinkWeb2MutationSelections
import com.cyberconnect.link3.type.LinkWeb2Response_Status
import com.cyberconnect.link3.type.LinkedInOAuth
import com.cyberconnect.link3.type.LoginType
import com.cyberconnect.link3.type.TwitterOAuth
import kotlin.String
import kotlin.Unit

public data class LinkWeb2Mutation(
  public val type: LoginType,
  public val email: Optional<String?> = Optional.Absent,
  public val token: String,
  public val twitterOAuthCode: TwitterOAuth,
  public val linkedInOAuth: Optional<LinkedInOAuth?> = Optional.Absent,
) : Mutation<LinkWeb2Mutation.Data> {
  public override fun id(): String = OPERATION_ID

  public override fun document(): String = OPERATION_DOCUMENT

  public override fun name(): String = OPERATION_NAME

  public override fun serializeVariables(writer: JsonWriter,
      customScalarAdapters: CustomScalarAdapters): Unit {
    LinkWeb2Mutation_VariablesAdapter.toJson(writer, customScalarAdapters, this)
  }

  public override fun adapter(): Adapter<Data> = LinkWeb2Mutation_ResponseAdapter.Data.obj()

  public override fun rootField(): CompiledField = CompiledField.Builder(
    name = "data",
    type = com.cyberconnect.link3.type.Mutation.type
  )
  .selections(selections = LinkWeb2MutationSelections.__root)
  .build()

  @ApolloAdaptableWith(LinkWeb2Mutation_ResponseAdapter.Data::class)
  public data class Data(
    /**
     * Link email, twitter or discord to current user.
     */
    public val linkWeb2: LinkWeb2,
  ) : Mutation.Data

  public data class LinkWeb2(
    public val status: LinkWeb2Response_Status,
    public val message: String,
    public val twitter: Twitter?,
  )

  public data class Twitter(
    public val twitterHandle: String,
    public val twitterId: String,
  )

  public companion object {
    public const val OPERATION_ID: String =
        "d36296094140bfb1f780860de75ac56d4d4dad36f4a04c635798034a1f0c5bba"

    /**
     * The minimized GraphQL document being sent to the server to save a few bytes.
     * The un-minimized version is:
     *
     * mutation linkWeb2($type: LoginType!, $email: String, $token: String!, $twitterOAuthCode:
     * TwitterOAuth!, $linkedInOAuth: LinkedInOAuth) {
     *   linkWeb2(request: {
     *     type: $type
     *     email: $email
     *     token: $token
     *     twitterOAuth: $twitterOAuthCode
     *     linkedInOAuth: $linkedInOAuth
     *   }
     *   ) {
     *     status
     *     message
     *     twitter {
     *       twitterHandle
     *       twitterId
     *     }
     *   }
     * }
     */
    public val OPERATION_DOCUMENT: String
      get() =
          "mutation linkWeb2(${'$'}type: LoginType!, ${'$'}email: String, ${'$'}token: String!, ${'$'}twitterOAuthCode: TwitterOAuth!, ${'$'}linkedInOAuth: LinkedInOAuth) { linkWeb2(request: { type: ${'$'}type email: ${'$'}email token: ${'$'}token twitterOAuth: ${'$'}twitterOAuthCode linkedInOAuth: ${'$'}linkedInOAuth } ) { status message twitter { twitterHandle twitterId } } }"

    public const val OPERATION_NAME: String = "linkWeb2"
  }
}
