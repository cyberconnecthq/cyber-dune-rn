//
// AUTO-GENERATED FILE. DO NOT MODIFY.
//
// This class was automatically generated by Apollo GraphQL version '3.8.2'.
//
package com.cyberconnect.link3.selections

import com.apollographql.apollo3.api.CompiledArgument
import com.apollographql.apollo3.api.CompiledField
import com.apollographql.apollo3.api.CompiledFragment
import com.apollographql.apollo3.api.CompiledSelection
import com.apollographql.apollo3.api.CompiledVariable
import com.apollographql.apollo3.api.list
import com.apollographql.apollo3.api.notNull
import com.cyberconnect.link3.fragment.selections.OrganizerSelections
import com.cyberconnect.link3.type.Event
import com.cyberconnect.link3.type.GraphQLBoolean
import com.cyberconnect.link3.type.GraphQLInt
import com.cyberconnect.link3.type.GraphQLString
import com.cyberconnect.link3.type.Organization
import com.cyberconnect.link3.type.W3ST
import com.cyberconnect.link3.type.W3STEligibility
import com.cyberconnect.link3.type.W3STRequirement
import com.cyberconnect.link3.type.W3STRequirementEligibility
import com.cyberconnect.link3.type.W3STRequirementType
import kotlin.collections.List

public object GetClaimW3stStatusQuerySelections {
  private val __organizer: List<CompiledSelection> = listOf(
        CompiledField.Builder(
          name = "__typename",
          type = GraphQLString.type.notNull()
        ).build(),
        CompiledFragment.Builder(
          typeCondition = "Organization",
          possibleTypes = listOf("Organization")
        ).selections(OrganizerSelections.__root)
        .build()
      )

  private val __requirement: List<CompiledSelection> = listOf(
        CompiledField.Builder(
          name = "type",
          type = W3STRequirementType.type.notNull()
        ).build(),
        CompiledField.Builder(
          name = "value",
          type = GraphQLInt.type
        ).build()
      )

  private val __requirements: List<CompiledSelection> = listOf(
        CompiledField.Builder(
          name = "eligible",
          type = GraphQLBoolean.type.notNull()
        ).build(),
        CompiledField.Builder(
          name = "requirement",
          type = W3STRequirement.type.notNull()
        ).selections(__requirement)
        .build()
      )

  private val __eligible: List<CompiledSelection> = listOf(
        CompiledField.Builder(
          name = "unclaimed",
          type = GraphQLInt.type.notNull()
        ).build(),
        CompiledField.Builder(
          name = "claiming",
          type = GraphQLInt.type.notNull()
        ).build(),
        CompiledField.Builder(
          name = "claimed",
          type = GraphQLInt.type.notNull()
        ).build(),
        CompiledField.Builder(
          name = "stayTime",
          type = GraphQLInt.type.notNull()
        ).build(),
        CompiledField.Builder(
          name = "readyToClaim",
          type = GraphQLBoolean.type.notNull()
        ).build(),
        CompiledField.Builder(
          name = "claimedByOther",
          type = GraphQLBoolean.type.notNull()
        ).build(),
        CompiledField.Builder(
          name = "firstClaim",
          type = GraphQLBoolean.type.notNull()
        ).build(),
        CompiledField.Builder(
          name = "requirements",
          type = W3STRequirementEligibility.type.notNull().list().notNull()
        ).selections(__requirements)
        .build()
      )

  private val __w3st: List<CompiledSelection> = listOf(
        CompiledField.Builder(
          name = "eligible",
          type = W3STEligibility.type
        ).selections(__eligible)
        .build()
      )

  private val __event: List<CompiledSelection> = listOf(
        CompiledField.Builder(
          name = "organizer",
          type = Organization.type.notNull()
        ).selections(__organizer)
        .build(),
        CompiledField.Builder(
          name = "w3st",
          type = W3ST.type
        ).selections(__w3st)
        .build()
      )

  public val __root: List<CompiledSelection> = listOf(
        CompiledField.Builder(
          name = "event",
          type = Event.type
        ).arguments(listOf(
          CompiledArgument.Builder("id", CompiledVariable("id")).build()
        ))
        .selections(__event)
        .build()
      )
}
