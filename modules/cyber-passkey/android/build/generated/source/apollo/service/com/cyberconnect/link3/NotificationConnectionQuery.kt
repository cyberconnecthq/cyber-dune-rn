//
// AUTO-GENERATED FILE. DO NOT MODIFY.
//
// This class was automatically generated by Apollo GraphQL version '3.8.2'.
//
package com.cyberconnect.link3

import com.apollographql.apollo3.annotations.ApolloAdaptableWith
import com.apollographql.apollo3.api.Adapter
import com.apollographql.apollo3.api.CompiledField
import com.apollographql.apollo3.api.CustomScalarAdapters
import com.apollographql.apollo3.api.Optional
import com.apollographql.apollo3.api.Query
import com.apollographql.apollo3.api.json.JsonWriter
import com.apollographql.apollo3.api.obj
import com.cyberconnect.link3.adapter.NotificationConnectionQuery_ResponseAdapter
import com.cyberconnect.link3.adapter.NotificationConnectionQuery_VariablesAdapter
import com.cyberconnect.link3.fragment.ConnectionNotification
import com.cyberconnect.link3.selections.NotificationConnectionQuerySelections
import kotlin.String
import kotlin.Unit

public data class NotificationConnectionQuery(
  public val after: Optional<String?> = Optional.Absent,
) : Query<NotificationConnectionQuery.Data> {
  public override fun id(): String = OPERATION_ID

  public override fun document(): String = OPERATION_DOCUMENT

  public override fun name(): String = OPERATION_NAME

  public override fun serializeVariables(writer: JsonWriter,
      customScalarAdapters: CustomScalarAdapters): Unit {
    NotificationConnectionQuery_VariablesAdapter.toJson(writer, customScalarAdapters, this)
  }

  public override fun adapter(): Adapter<Data> =
      NotificationConnectionQuery_ResponseAdapter.Data.obj()

  public override fun rootField(): CompiledField = CompiledField.Builder(
    name = "data",
    type = com.cyberconnect.link3.type.Query.type
  )
  .selections(selections = NotificationConnectionQuerySelections.__root)
  .build()

  @ApolloAdaptableWith(NotificationConnectionQuery_ResponseAdapter.Data::class)
  public data class Data(
    public val me: Me,
  ) : Query.Data

  public data class Me(
    public val `data`: Data1?,
  )

  public data class Data1(
    public val notifications: Notifications?,
  )

  public data class Notifications(
    public val list: kotlin.collections.List<List>,
    public val pageInfo: PageInfo,
  )

  public data class List(
    public val __typename: String,
    /**
     * Synthetic field for 'ConnectionNotification'
     */
    public val connectionNotification: ConnectionNotification?,
  )

  public data class PageInfo(
    public val __typename: String,
    /**
     * Synthetic field for 'PageInfo'
     */
    public val pageInfo: com.cyberconnect.link3.fragment.PageInfo,
  )

  public companion object {
    public const val OPERATION_ID: String =
        "cd96fe9e23699c757d935cd9655eb95096ac4748457aa5ab5c1b54830ecb476a"

    /**
     * The minimized GraphQL document being sent to the server to save a few bytes.
     * The un-minimized version is:
     *
     * query notificationConnection($after: String) {
     *   me {
     *     data {
     *       notifications(first: 50, after: $after) {
     *         list {
     *           __typename
     *           ...ConnectionNotification
     *         }
     *         pageInfo {
     *           __typename
     *           ...PageInfo
     *         }
     *       }
     *     }
     *   }
     * }
     *
     * fragment ConnectionNotification on ConnectionNotification {
     *   __typename
     *   hasRead
     *   id
     *   timestamp
     *   type
     *   status
     *   from {
     *     lightInfo {
     *       avatar
     *       displayName
     *       handle
     *       profileId
     *     }
     *   }
     * }
     *
     * fragment PageInfo on PageInfo {
     *   startCursor
     *   endCursor
     *   hasNextPage
     *   hasPreviousPage
     * }
     */
    public val OPERATION_DOCUMENT: String
      get() =
          "query notificationConnection(${'$'}after: String) { me { data { notifications(first: 50, after: ${'$'}after) { list { __typename ...ConnectionNotification } pageInfo { __typename ...PageInfo } } } } }  fragment ConnectionNotification on ConnectionNotification { __typename hasRead id timestamp type status from { lightInfo { avatar displayName handle profileId } } }  fragment PageInfo on PageInfo { startCursor endCursor hasNextPage hasPreviousPage }"

    public const val OPERATION_NAME: String = "notificationConnection"
  }
}
