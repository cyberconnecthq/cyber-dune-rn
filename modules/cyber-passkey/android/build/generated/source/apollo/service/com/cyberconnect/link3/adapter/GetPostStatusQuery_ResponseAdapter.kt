//
// AUTO-GENERATED FILE. DO NOT MODIFY.
//
// This class was automatically generated by Apollo GraphQL version '3.8.2'.
//
package com.cyberconnect.link3.adapter

import com.apollographql.apollo3.api.Adapter
import com.apollographql.apollo3.api.BooleanAdapter
import com.apollographql.apollo3.api.CustomScalarAdapters
import com.apollographql.apollo3.api.IntAdapter
import com.apollographql.apollo3.api.json.JsonReader
import com.apollographql.apollo3.api.json.JsonWriter
import com.apollographql.apollo3.api.nullable
import com.apollographql.apollo3.api.obj
import com.cyberconnect.link3.GetPostStatusQuery
import kotlin.Boolean
import kotlin.Int
import kotlin.String
import kotlin.Unit
import kotlin.collections.List

public object GetPostStatusQuery_ResponseAdapter {
  public object Data : Adapter<GetPostStatusQuery.Data> {
    public val RESPONSE_NAMES: List<String> = listOf("post")

    public override fun fromJson(reader: JsonReader, customScalarAdapters: CustomScalarAdapters):
        GetPostStatusQuery.Data {
      var _post: GetPostStatusQuery.Post? = null

      while(true) {
        when (reader.selectName(RESPONSE_NAMES)) {
          0 -> _post = Post.obj().nullable().fromJson(reader, customScalarAdapters)
          else -> break
        }
      }

      return GetPostStatusQuery.Data(
        post = _post
      )
    }

    public override fun toJson(
      writer: JsonWriter,
      customScalarAdapters: CustomScalarAdapters,
      `value`: GetPostStatusQuery.Data,
    ): Unit {
      writer.name("post")
      Post.obj().nullable().toJson(writer, customScalarAdapters, value.post)
    }
  }

  public object Post : Adapter<GetPostStatusQuery.Post> {
    public val RESPONSE_NAMES: List<String> = listOf("commentVisible", "commentCount", "likeCount",
        "dislikeCount", "essence", "likedStatus")

    public override fun fromJson(reader: JsonReader, customScalarAdapters: CustomScalarAdapters):
        GetPostStatusQuery.Post {
      var _commentVisible: Boolean? = null
      var _commentCount: Int? = null
      var _likeCount: Int? = null
      var _dislikeCount: Int? = null
      var _essence: GetPostStatusQuery.Essence? = null
      var _likedStatus: GetPostStatusQuery.LikedStatus? = null

      while(true) {
        when (reader.selectName(RESPONSE_NAMES)) {
          0 -> _commentVisible = BooleanAdapter.fromJson(reader, customScalarAdapters)
          1 -> _commentCount = IntAdapter.fromJson(reader, customScalarAdapters)
          2 -> _likeCount = IntAdapter.fromJson(reader, customScalarAdapters)
          3 -> _dislikeCount = IntAdapter.fromJson(reader, customScalarAdapters)
          4 -> _essence = Essence.obj().nullable().fromJson(reader, customScalarAdapters)
          5 -> _likedStatus = LikedStatus.obj().fromJson(reader, customScalarAdapters)
          else -> break
        }
      }

      return GetPostStatusQuery.Post(
        commentVisible = _commentVisible!!,
        commentCount = _commentCount!!,
        likeCount = _likeCount!!,
        dislikeCount = _dislikeCount!!,
        essence = _essence,
        likedStatus = _likedStatus!!
      )
    }

    public override fun toJson(
      writer: JsonWriter,
      customScalarAdapters: CustomScalarAdapters,
      `value`: GetPostStatusQuery.Post,
    ): Unit {
      writer.name("commentVisible")
      BooleanAdapter.toJson(writer, customScalarAdapters, value.commentVisible)

      writer.name("commentCount")
      IntAdapter.toJson(writer, customScalarAdapters, value.commentCount)

      writer.name("likeCount")
      IntAdapter.toJson(writer, customScalarAdapters, value.likeCount)

      writer.name("dislikeCount")
      IntAdapter.toJson(writer, customScalarAdapters, value.dislikeCount)

      writer.name("essence")
      Essence.obj().nullable().toJson(writer, customScalarAdapters, value.essence)

      writer.name("likedStatus")
      LikedStatus.obj().toJson(writer, customScalarAdapters, value.likedStatus)
    }
  }

  public object Essence : Adapter<GetPostStatusQuery.Essence> {
    public val RESPONSE_NAMES: List<String> = listOf("totalSupply", "totalCollected", "userBalance")

    public override fun fromJson(reader: JsonReader, customScalarAdapters: CustomScalarAdapters):
        GetPostStatusQuery.Essence {
      var _totalSupply: Int? = null
      var _totalCollected: Int? = null
      var _userBalance: Int? = null

      while(true) {
        when (reader.selectName(RESPONSE_NAMES)) {
          0 -> _totalSupply = IntAdapter.fromJson(reader, customScalarAdapters)
          1 -> _totalCollected = IntAdapter.fromJson(reader, customScalarAdapters)
          2 -> _userBalance = IntAdapter.fromJson(reader, customScalarAdapters)
          else -> break
        }
      }

      return GetPostStatusQuery.Essence(
        totalSupply = _totalSupply!!,
        totalCollected = _totalCollected!!,
        userBalance = _userBalance!!
      )
    }

    public override fun toJson(
      writer: JsonWriter,
      customScalarAdapters: CustomScalarAdapters,
      `value`: GetPostStatusQuery.Essence,
    ): Unit {
      writer.name("totalSupply")
      IntAdapter.toJson(writer, customScalarAdapters, value.totalSupply)

      writer.name("totalCollected")
      IntAdapter.toJson(writer, customScalarAdapters, value.totalCollected)

      writer.name("userBalance")
      IntAdapter.toJson(writer, customScalarAdapters, value.userBalance)
    }
  }

  public object LikedStatus : Adapter<GetPostStatusQuery.LikedStatus> {
    public val RESPONSE_NAMES: List<String> = listOf("liked", "disliked")

    public override fun fromJson(reader: JsonReader, customScalarAdapters: CustomScalarAdapters):
        GetPostStatusQuery.LikedStatus {
      var _liked: Boolean? = null
      var _disliked: Boolean? = null

      while(true) {
        when (reader.selectName(RESPONSE_NAMES)) {
          0 -> _liked = BooleanAdapter.fromJson(reader, customScalarAdapters)
          1 -> _disliked = BooleanAdapter.fromJson(reader, customScalarAdapters)
          else -> break
        }
      }

      return GetPostStatusQuery.LikedStatus(
        liked = _liked!!,
        disliked = _disliked!!
      )
    }

    public override fun toJson(
      writer: JsonWriter,
      customScalarAdapters: CustomScalarAdapters,
      `value`: GetPostStatusQuery.LikedStatus,
    ): Unit {
      writer.name("liked")
      BooleanAdapter.toJson(writer, customScalarAdapters, value.liked)

      writer.name("disliked")
      BooleanAdapter.toJson(writer, customScalarAdapters, value.disliked)
    }
  }
}
