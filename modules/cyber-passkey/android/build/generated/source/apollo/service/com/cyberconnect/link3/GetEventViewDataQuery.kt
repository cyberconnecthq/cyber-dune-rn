//
// AUTO-GENERATED FILE. DO NOT MODIFY.
//
// This class was automatically generated by Apollo GraphQL version '3.8.2'.
//
package com.cyberconnect.link3

import com.apollographql.apollo3.annotations.ApolloAdaptableWith
import com.apollographql.apollo3.api.Adapter
import com.apollographql.apollo3.api.CompiledField
import com.apollographql.apollo3.api.CustomScalarAdapters
import com.apollographql.apollo3.api.Query
import com.apollographql.apollo3.api.json.JsonWriter
import com.apollographql.apollo3.api.obj
import com.cyberconnect.link3.adapter.GetEventViewDataQuery_ResponseAdapter
import com.cyberconnect.link3.adapter.GetEventViewDataQuery_VariablesAdapter
import com.cyberconnect.link3.fragment.DiscordEvent
import com.cyberconnect.link3.fragment.OtherEvent
import com.cyberconnect.link3.fragment.TwitterSpaceEvent
import com.cyberconnect.link3.fragment.W3stOnEventViewPage
import com.cyberconnect.link3.selections.GetEventViewDataQuerySelections
import com.cyberconnect.link3.type.EventRegisterStatus
import com.cyberconnect.link3.type.EventStatus
import com.cyberconnect.link3.type.Role
import com.cyberconnect.link3.type.VerificationStatus
import kotlin.Any
import kotlin.Boolean
import kotlin.Int
import kotlin.String
import kotlin.Unit

public data class GetEventViewDataQuery(
  public val id: String,
) : Query<GetEventViewDataQuery.Data> {
  public override fun id(): String = OPERATION_ID

  public override fun document(): String = OPERATION_DOCUMENT

  public override fun name(): String = OPERATION_NAME

  public override fun serializeVariables(writer: JsonWriter,
      customScalarAdapters: CustomScalarAdapters): Unit {
    GetEventViewDataQuery_VariablesAdapter.toJson(writer, customScalarAdapters, this)
  }

  public override fun adapter(): Adapter<Data> = GetEventViewDataQuery_ResponseAdapter.Data.obj()

  public override fun rootField(): CompiledField = CompiledField.Builder(
    name = "data",
    type = com.cyberconnect.link3.type.Query.type
  )
  .selections(selections = GetEventViewDataQuerySelections.__root)
  .build()

  @ApolloAdaptableWith(GetEventViewDataQuery_ResponseAdapter.Data::class)
  public data class Data(
    public val event: Event?,
  ) : Query.Data

  public data class Event(
    public val __typename: String,
    public val id: String,
    public val title: String,
    public val info: String,
    public val recap: String,
    public val posterUrl: Any,
    public val startTimestamp: Any,
    public val endTimestamp: Any,
    public val timezone: String,
    /**
     * current user status
     */
    public val registerStatus: EventRegisterStatus,
    public val status: EventStatus,
    public val speakers: kotlin.collections.List<Speaker>?,
    public val organizer: Organizer,
    public val w3st: W3st?,
    public val registrantsCount: Int,
    public val registrants: Registrants,
    public val raffle: Raffle?,
    public val location: Location,
    public val tags: kotlin.collections.List<String>,
    public val language: Int,
    public val recapLikeInfo: RecapLikeInfo,
    public val registrantsTokenHoldings: kotlin.collections.List<RegistrantsTokenHolding>?,
  )

  public data class Speaker(
    public val __typename: String,
    /**
     * Synthetic field for 'Speaker'
     */
    public val speaker: com.cyberconnect.link3.fragment.Speaker,
  )

  public data class Organizer(
    public val twitterId: String,
    public val id: String,
    public val followersCount: Int,
    public val verification: VerificationStatus,
    public val currentAccess: Role,
    public val lightInfo: LightInfo,
    public val profile: Profile,
  )

  public data class LightInfo(
    public val profileHandle: String,
    public val isFollowing: Boolean,
    public val displayName: String,
    public val profilePicture: String,
  )

  public data class Profile(
    public val id: String,
  )

  public data class W3st(
    public val __typename: String,
    /**
     * Synthetic field for 'W3stOnEventViewPage'
     */
    public val w3stOnEventViewPage: W3stOnEventViewPage,
  )

  public data class Registrants(
    public val pageInfo: PageInfo,
    public val list: kotlin.collections.List<List>,
  )

  public data class PageInfo(
    public val __typename: String,
    /**
     * Synthetic field for 'PageInfo'
     */
    public val pageInfo: com.cyberconnect.link3.fragment.PageInfo,
  )

  public data class List(
    public val lightInfo: LightInfo1,
  )

  public data class LightInfo1(
    public val handle: String,
    public val avatar: String,
    public val avatarFrameTokenId: String?,
    public val displayName: String,
    public val formattedAddress: String,
  )

  public data class Raffle(
    public val __typename: String,
    /**
     * Synthetic field for 'Raffle'
     */
    public val raffle: com.cyberconnect.link3.fragment.Raffle,
  )

  public data class Location(
    public val __typename: String,
    /**
     * Synthetic field for inline fragment on DiscordEvent
     */
    public val onDiscordEvent: OnDiscordEvent?,
    /**
     * Synthetic field for 'TwitterSpaceEvent'
     */
    public val twitterSpaceEvent: TwitterSpaceEvent?,
    /**
     * Synthetic field for 'DiscordEvent'
     */
    public val discordEvent: DiscordEvent?,
    /**
     * Synthetic field for 'OtherEvent'
     */
    public val otherEvent: OtherEvent?,
  )

  public data class OnDiscordEvent(
    public val inviteLink: String,
  )

  public data class RecapLikeInfo(
    public val likedCount: Int,
    public val isLiked: Boolean,
  )

  public data class RegistrantsTokenHolding(
    public val collection: String,
    public val logo: Any,
    public val ownedCount: Int,
    public val ownersCount: Int,
  )

  public companion object {
    public const val OPERATION_ID: String =
        "213943a5ead6fa1d209d5c2fd7c7da15a6e4313c20e5747d68a7bfb72206ba7d"

    /**
     * The minimized GraphQL document being sent to the server to save a few bytes.
     * The un-minimized version is:
     *
     * query getEventViewData($id: ID!) {
     *   event(id: $id) {
     *     __typename
     *     id
     *     title
     *     info
     *     recap
     *     posterUrl
     *     startTimestamp
     *     endTimestamp
     *     timezone
     *     registerStatus
     *     status
     *     speakers {
     *       __typename
     *       ...Speaker
     *     }
     *     organizer {
     *       twitterId
     *       id
     *       followersCount
     *       verification
     *       currentAccess
     *       lightInfo {
     *         profileHandle
     *         isFollowing
     *         displayName
     *         profilePicture
     *       }
     *       profile {
     *         id
     *       }
     *     }
     *     w3st {
     *       __typename
     *       ...W3stOnEventViewPage
     *     }
     *     registrantsCount
     *     registrants(first: 7) {
     *       pageInfo {
     *         __typename
     *         ...PageInfo
     *       }
     *       list {
     *         lightInfo {
     *           handle
     *           avatar
     *           avatarFrameTokenId
     *           displayName
     *           formattedAddress
     *         }
     *       }
     *     }
     *     raffle {
     *       __typename
     *       ...Raffle
     *     }
     *     location {
     *       __typename
     *       ...TwitterSpaceEvent
     *       ...DiscordEvent
     *       ... on DiscordEvent {
     *         inviteLink
     *       }
     *       ...OtherEvent
     *     }
     *     tags
     *     language
     *     recapLikeInfo {
     *       likedCount
     *       isLiked
     *     }
     *     registrantsTokenHoldings {
     *       collection
     *       logo
     *       ownedCount
     *       ownersCount
     *     }
     *   }
     * }
     *
     * fragment Speaker on EventSpeaker {
     *   twitterId
     *   twitterHandle
     *   displayName
     *   avatar
     *   title
     *   profileId
     *   twitterFollowers
     *   avatarFrameTokenId
     * }
     *
     * fragment W3stOnEventViewPage on W3ST {
     *   version
     *   gasless
     *   imageUrl
     *   contractInfo {
     *     deployStatus
     *     chainId
     *     essenceAddress
     *     tokenHoldersCount
     *   }
     *   v3contractInfo {
     *     deployStatus
     *     chainId
     *     w3stAddress
     *     tokenHoldersCount
     *     cyberAccount
     *     tokenId
     *   }
     *   requirements {
     *     type
     *     value
     *   }
     * }
     *
     * fragment PageInfo on PageInfo {
     *   startCursor
     *   endCursor
     *   hasNextPage
     *   hasPreviousPage
     * }
     *
     * fragment TokenAward on TokenAward {
     *   chainId
     *   tokenIcon
     *   symbol
     *   contractAddress
     *   amount
     * }
     *
     * fragment CodeAward on CodeAward {
     *   code
     *   description
     * }
     *
     * fragment Raffle on Raffle {
     *   awards {
     *     __typename
     *     ...TokenAward
     *     ...CodeAward
     *   }
     *   tweetUrl
     *   joinStatus {
     *     status
     *     myAward
     *   }
     *   winnersCount
     *   joinedCount
     *   claimDeadline
     *   participateDeadline
     *   requirement {
     *     retweet
     *     follow
     *     comment
     *     likeAndRetweet
     *     tag
     *     multiFollow
     *     whitelist
     *     attend
     *     twittersToFollow {
     *       twitterId
     *       twitterHandle
     *     }
     *   }
     * }
     *
     * fragment TwitterSpaceEvent on TwitterSpaceEvent {
     *   link
     * }
     *
     * fragment DiscordEvent on DiscordEvent {
     *   server
     *   serverName
     *   channel
     *   channelName
     *   autoSync
     * }
     *
     * fragment OtherEvent on OtherEvent {
     *   link
     * }
     */
    public val OPERATION_DOCUMENT: String
      get() =
          "query getEventViewData(${'$'}id: ID!) { event(id: ${'$'}id) { __typename id title info recap posterUrl startTimestamp endTimestamp timezone registerStatus status speakers { __typename ...Speaker } organizer { twitterId id followersCount verification currentAccess lightInfo { profileHandle isFollowing displayName profilePicture } profile { id } } w3st { __typename ...W3stOnEventViewPage } registrantsCount registrants(first: 7) { pageInfo { __typename ...PageInfo } list { lightInfo { handle avatar avatarFrameTokenId displayName formattedAddress } } } raffle { __typename ...Raffle } location { __typename ...TwitterSpaceEvent ...DiscordEvent ... on DiscordEvent { inviteLink } ...OtherEvent } tags language recapLikeInfo { likedCount isLiked } registrantsTokenHoldings { collection logo ownedCount ownersCount } } }  fragment Speaker on EventSpeaker { twitterId twitterHandle displayName avatar title profileId twitterFollowers avatarFrameTokenId }  fragment W3stOnEventViewPage on W3ST { version gasless imageUrl contractInfo { deployStatus chainId essenceAddress tokenHoldersCount } v3contractInfo { deployStatus chainId w3stAddress tokenHoldersCount cyberAccount tokenId } requirements { type value } }  fragment PageInfo on PageInfo { startCursor endCursor hasNextPage hasPreviousPage }  fragment TokenAward on TokenAward { chainId tokenIcon symbol contractAddress amount }  fragment CodeAward on CodeAward { code description }  fragment Raffle on Raffle { awards { __typename ...TokenAward ...CodeAward } tweetUrl joinStatus { status myAward } winnersCount joinedCount claimDeadline participateDeadline requirement { retweet follow comment likeAndRetweet tag multiFollow whitelist attend twittersToFollow { twitterId twitterHandle } } }  fragment TwitterSpaceEvent on TwitterSpaceEvent { link }  fragment DiscordEvent on DiscordEvent { server serverName channel channelName autoSync }  fragment OtherEvent on OtherEvent { link }"

    public const val OPERATION_NAME: String = "getEventViewData"
  }
}
