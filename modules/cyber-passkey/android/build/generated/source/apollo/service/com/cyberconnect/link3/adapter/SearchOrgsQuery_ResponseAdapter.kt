//
// AUTO-GENERATED FILE. DO NOT MODIFY.
//
// This class was automatically generated by Apollo GraphQL version '3.8.2'.
//
package com.cyberconnect.link3.adapter

import com.apollographql.apollo3.api.Adapter
import com.apollographql.apollo3.api.BooleanAdapter
import com.apollographql.apollo3.api.CustomScalarAdapters
import com.apollographql.apollo3.api.IntAdapter
import com.apollographql.apollo3.api.StringAdapter
import com.apollographql.apollo3.api.json.JsonReader
import com.apollographql.apollo3.api.json.JsonWriter
import com.apollographql.apollo3.api.list
import com.apollographql.apollo3.api.obj
import com.cyberconnect.link3.SearchOrgsQuery
import kotlin.Boolean
import kotlin.Int
import kotlin.String
import kotlin.Unit

public object SearchOrgsQuery_ResponseAdapter {
  public object Data : Adapter<SearchOrgsQuery.Data> {
    public val RESPONSE_NAMES: kotlin.collections.List<String> = listOf("organizations")

    public override fun fromJson(reader: JsonReader, customScalarAdapters: CustomScalarAdapters):
        SearchOrgsQuery.Data {
      var _organizations: SearchOrgsQuery.Organizations? = null

      while(true) {
        when (reader.selectName(RESPONSE_NAMES)) {
          0 -> _organizations = Organizations.obj().fromJson(reader, customScalarAdapters)
          else -> break
        }
      }

      return SearchOrgsQuery.Data(
        organizations = _organizations!!
      )
    }

    public override fun toJson(
      writer: JsonWriter,
      customScalarAdapters: CustomScalarAdapters,
      `value`: SearchOrgsQuery.Data,
    ): Unit {
      writer.name("organizations")
      Organizations.obj().toJson(writer, customScalarAdapters, value.organizations)
    }
  }

  public object Organizations : Adapter<SearchOrgsQuery.Organizations> {
    public val RESPONSE_NAMES: kotlin.collections.List<String> = listOf("pageInfo", "list",
        "totalCount")

    public override fun fromJson(reader: JsonReader, customScalarAdapters: CustomScalarAdapters):
        SearchOrgsQuery.Organizations {
      var _pageInfo: SearchOrgsQuery.PageInfo? = null
      var _list: kotlin.collections.List<SearchOrgsQuery.List>? = null
      var _totalCount: Int? = null

      while(true) {
        when (reader.selectName(RESPONSE_NAMES)) {
          0 -> _pageInfo = PageInfo.obj().fromJson(reader, customScalarAdapters)
          1 -> _list = List.obj().list().fromJson(reader, customScalarAdapters)
          2 -> _totalCount = IntAdapter.fromJson(reader, customScalarAdapters)
          else -> break
        }
      }

      return SearchOrgsQuery.Organizations(
        pageInfo = _pageInfo!!,
        list = _list!!,
        totalCount = _totalCount!!
      )
    }

    public override fun toJson(
      writer: JsonWriter,
      customScalarAdapters: CustomScalarAdapters,
      `value`: SearchOrgsQuery.Organizations,
    ): Unit {
      writer.name("pageInfo")
      PageInfo.obj().toJson(writer, customScalarAdapters, value.pageInfo)

      writer.name("list")
      List.obj().list().toJson(writer, customScalarAdapters, value.list)

      writer.name("totalCount")
      IntAdapter.toJson(writer, customScalarAdapters, value.totalCount)
    }
  }

  public object PageInfo : Adapter<SearchOrgsQuery.PageInfo> {
    public val RESPONSE_NAMES: kotlin.collections.List<String> = listOf("startCursor", "endCursor",
        "hasNextPage", "hasPreviousPage")

    public override fun fromJson(reader: JsonReader, customScalarAdapters: CustomScalarAdapters):
        SearchOrgsQuery.PageInfo {
      var _startCursor: String? = null
      var _endCursor: String? = null
      var _hasNextPage: Boolean? = null
      var _hasPreviousPage: Boolean? = null

      while(true) {
        when (reader.selectName(RESPONSE_NAMES)) {
          0 -> _startCursor = StringAdapter.fromJson(reader, customScalarAdapters)
          1 -> _endCursor = StringAdapter.fromJson(reader, customScalarAdapters)
          2 -> _hasNextPage = BooleanAdapter.fromJson(reader, customScalarAdapters)
          3 -> _hasPreviousPage = BooleanAdapter.fromJson(reader, customScalarAdapters)
          else -> break
        }
      }

      return SearchOrgsQuery.PageInfo(
        startCursor = _startCursor!!,
        endCursor = _endCursor!!,
        hasNextPage = _hasNextPage!!,
        hasPreviousPage = _hasPreviousPage!!
      )
    }

    public override fun toJson(
      writer: JsonWriter,
      customScalarAdapters: CustomScalarAdapters,
      `value`: SearchOrgsQuery.PageInfo,
    ): Unit {
      writer.name("startCursor")
      StringAdapter.toJson(writer, customScalarAdapters, value.startCursor)

      writer.name("endCursor")
      StringAdapter.toJson(writer, customScalarAdapters, value.endCursor)

      writer.name("hasNextPage")
      BooleanAdapter.toJson(writer, customScalarAdapters, value.hasNextPage)

      writer.name("hasPreviousPage")
      BooleanAdapter.toJson(writer, customScalarAdapters, value.hasPreviousPage)
    }
  }

  public object List : Adapter<SearchOrgsQuery.List> {
    public val RESPONSE_NAMES: kotlin.collections.List<String> = listOf("profile", "followersCount",
        "lightInfo")

    public override fun fromJson(reader: JsonReader, customScalarAdapters: CustomScalarAdapters):
        SearchOrgsQuery.List {
      var _profile: SearchOrgsQuery.Profile? = null
      var _followersCount: Int? = null
      var _lightInfo: SearchOrgsQuery.LightInfo? = null

      while(true) {
        when (reader.selectName(RESPONSE_NAMES)) {
          0 -> _profile = Profile.obj().fromJson(reader, customScalarAdapters)
          1 -> _followersCount = IntAdapter.fromJson(reader, customScalarAdapters)
          2 -> _lightInfo = LightInfo.obj().fromJson(reader, customScalarAdapters)
          else -> break
        }
      }

      return SearchOrgsQuery.List(
        profile = _profile!!,
        followersCount = _followersCount!!,
        lightInfo = _lightInfo!!
      )
    }

    public override fun toJson(
      writer: JsonWriter,
      customScalarAdapters: CustomScalarAdapters,
      `value`: SearchOrgsQuery.List,
    ): Unit {
      writer.name("profile")
      Profile.obj().toJson(writer, customScalarAdapters, value.profile)

      writer.name("followersCount")
      IntAdapter.toJson(writer, customScalarAdapters, value.followersCount)

      writer.name("lightInfo")
      LightInfo.obj().toJson(writer, customScalarAdapters, value.lightInfo)
    }
  }

  public object Profile : Adapter<SearchOrgsQuery.Profile> {
    public val RESPONSE_NAMES: kotlin.collections.List<String> = listOf("id")

    public override fun fromJson(reader: JsonReader, customScalarAdapters: CustomScalarAdapters):
        SearchOrgsQuery.Profile {
      var _id: String? = null

      while(true) {
        when (reader.selectName(RESPONSE_NAMES)) {
          0 -> _id = StringAdapter.fromJson(reader, customScalarAdapters)
          else -> break
        }
      }

      return SearchOrgsQuery.Profile(
        id = _id!!
      )
    }

    public override fun toJson(
      writer: JsonWriter,
      customScalarAdapters: CustomScalarAdapters,
      `value`: SearchOrgsQuery.Profile,
    ): Unit {
      writer.name("id")
      StringAdapter.toJson(writer, customScalarAdapters, value.id)
    }
  }

  public object LightInfo : Adapter<SearchOrgsQuery.LightInfo> {
    public val RESPONSE_NAMES: kotlin.collections.List<String> = listOf("profilePicture",
        "displayName", "isFollowing", "profileHandle")

    public override fun fromJson(reader: JsonReader, customScalarAdapters: CustomScalarAdapters):
        SearchOrgsQuery.LightInfo {
      var _profilePicture: String? = null
      var _displayName: String? = null
      var _isFollowing: Boolean? = null
      var _profileHandle: String? = null

      while(true) {
        when (reader.selectName(RESPONSE_NAMES)) {
          0 -> _profilePicture = StringAdapter.fromJson(reader, customScalarAdapters)
          1 -> _displayName = StringAdapter.fromJson(reader, customScalarAdapters)
          2 -> _isFollowing = BooleanAdapter.fromJson(reader, customScalarAdapters)
          3 -> _profileHandle = StringAdapter.fromJson(reader, customScalarAdapters)
          else -> break
        }
      }

      return SearchOrgsQuery.LightInfo(
        profilePicture = _profilePicture!!,
        displayName = _displayName!!,
        isFollowing = _isFollowing!!,
        profileHandle = _profileHandle!!
      )
    }

    public override fun toJson(
      writer: JsonWriter,
      customScalarAdapters: CustomScalarAdapters,
      `value`: SearchOrgsQuery.LightInfo,
    ): Unit {
      writer.name("profilePicture")
      StringAdapter.toJson(writer, customScalarAdapters, value.profilePicture)

      writer.name("displayName")
      StringAdapter.toJson(writer, customScalarAdapters, value.displayName)

      writer.name("isFollowing")
      BooleanAdapter.toJson(writer, customScalarAdapters, value.isFollowing)

      writer.name("profileHandle")
      StringAdapter.toJson(writer, customScalarAdapters, value.profileHandle)
    }
  }
}
