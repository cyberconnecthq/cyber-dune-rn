//
// AUTO-GENERATED FILE. DO NOT MODIFY.
//
// This class was automatically generated by Apollo GraphQL version '3.8.2'.
//
package com.cyberconnect.link3.adapter

import com.apollographql.apollo3.api.Adapter
import com.apollographql.apollo3.api.CustomScalarAdapters
import com.apollographql.apollo3.api.IntAdapter
import com.apollographql.apollo3.api.NullableStringAdapter
import com.apollographql.apollo3.api.StringAdapter
import com.apollographql.apollo3.api.json.JsonReader
import com.apollographql.apollo3.api.json.JsonWriter
import com.apollographql.apollo3.api.list
import com.apollographql.apollo3.api.nullable
import com.apollographql.apollo3.api.obj
import com.cyberconnect.link3.GetRegistrantsQuery
import kotlin.Int
import kotlin.String
import kotlin.Unit

public object GetRegistrantsQuery_ResponseAdapter {
  public object Data : Adapter<GetRegistrantsQuery.Data> {
    public val RESPONSE_NAMES: kotlin.collections.List<String> = listOf("event")

    public override fun fromJson(reader: JsonReader, customScalarAdapters: CustomScalarAdapters):
        GetRegistrantsQuery.Data {
      var _event: GetRegistrantsQuery.Event? = null

      while(true) {
        when (reader.selectName(RESPONSE_NAMES)) {
          0 -> _event = Event.obj().nullable().fromJson(reader, customScalarAdapters)
          else -> break
        }
      }

      return GetRegistrantsQuery.Data(
        event = _event
      )
    }

    public override fun toJson(
      writer: JsonWriter,
      customScalarAdapters: CustomScalarAdapters,
      `value`: GetRegistrantsQuery.Data,
    ): Unit {
      writer.name("event")
      Event.obj().nullable().toJson(writer, customScalarAdapters, value.event)
    }
  }

  public object Event : Adapter<GetRegistrantsQuery.Event> {
    public val RESPONSE_NAMES: kotlin.collections.List<String> = listOf("registrantsCount",
        "registrants")

    public override fun fromJson(reader: JsonReader, customScalarAdapters: CustomScalarAdapters):
        GetRegistrantsQuery.Event {
      var _registrantsCount: Int? = null
      var _registrants: GetRegistrantsQuery.Registrants? = null

      while(true) {
        when (reader.selectName(RESPONSE_NAMES)) {
          0 -> _registrantsCount = IntAdapter.fromJson(reader, customScalarAdapters)
          1 -> _registrants = Registrants.obj().fromJson(reader, customScalarAdapters)
          else -> break
        }
      }

      return GetRegistrantsQuery.Event(
        registrantsCount = _registrantsCount!!,
        registrants = _registrants!!
      )
    }

    public override fun toJson(
      writer: JsonWriter,
      customScalarAdapters: CustomScalarAdapters,
      `value`: GetRegistrantsQuery.Event,
    ): Unit {
      writer.name("registrantsCount")
      IntAdapter.toJson(writer, customScalarAdapters, value.registrantsCount)

      writer.name("registrants")
      Registrants.obj().toJson(writer, customScalarAdapters, value.registrants)
    }
  }

  public object Registrants : Adapter<GetRegistrantsQuery.Registrants> {
    public val RESPONSE_NAMES: kotlin.collections.List<String> = listOf("pageInfo", "list")

    public override fun fromJson(reader: JsonReader, customScalarAdapters: CustomScalarAdapters):
        GetRegistrantsQuery.Registrants {
      var _pageInfo: GetRegistrantsQuery.PageInfo? = null
      var _list: kotlin.collections.List<GetRegistrantsQuery.List>? = null

      while(true) {
        when (reader.selectName(RESPONSE_NAMES)) {
          0 -> _pageInfo = PageInfo.obj(true).fromJson(reader, customScalarAdapters)
          1 -> _list = List.obj().list().fromJson(reader, customScalarAdapters)
          else -> break
        }
      }

      return GetRegistrantsQuery.Registrants(
        pageInfo = _pageInfo!!,
        list = _list!!
      )
    }

    public override fun toJson(
      writer: JsonWriter,
      customScalarAdapters: CustomScalarAdapters,
      `value`: GetRegistrantsQuery.Registrants,
    ): Unit {
      writer.name("pageInfo")
      PageInfo.obj(true).toJson(writer, customScalarAdapters, value.pageInfo)

      writer.name("list")
      List.obj().list().toJson(writer, customScalarAdapters, value.list)
    }
  }

  public object PageInfo : Adapter<GetRegistrantsQuery.PageInfo> {
    public val RESPONSE_NAMES: kotlin.collections.List<String> = listOf("__typename")

    public override fun fromJson(reader: JsonReader, customScalarAdapters: CustomScalarAdapters):
        GetRegistrantsQuery.PageInfo {
      var __typename: String? = null

      while(true) {
        when (reader.selectName(RESPONSE_NAMES)) {
          0 -> __typename = StringAdapter.fromJson(reader, customScalarAdapters)
          else -> break
        }
      }

      reader.rewind()
      val _pageInfo = com.cyberconnect.link3.fragment.PageInfoImpl_ResponseAdapter.PageInfo.fromJson(reader,
          customScalarAdapters)

      return GetRegistrantsQuery.PageInfo(
        __typename = __typename!!,
        pageInfo = _pageInfo
      )
    }

    public override fun toJson(
      writer: JsonWriter,
      customScalarAdapters: CustomScalarAdapters,
      `value`: GetRegistrantsQuery.PageInfo,
    ): Unit {
      writer.name("__typename")
      StringAdapter.toJson(writer, customScalarAdapters, value.__typename)

      com.cyberconnect.link3.fragment.PageInfoImpl_ResponseAdapter.PageInfo.toJson(writer,
          customScalarAdapters, value.pageInfo)
    }
  }

  public object List : Adapter<GetRegistrantsQuery.List> {
    public val RESPONSE_NAMES: kotlin.collections.List<String> = listOf("lightInfo")

    public override fun fromJson(reader: JsonReader, customScalarAdapters: CustomScalarAdapters):
        GetRegistrantsQuery.List {
      var _lightInfo: GetRegistrantsQuery.LightInfo? = null

      while(true) {
        when (reader.selectName(RESPONSE_NAMES)) {
          0 -> _lightInfo = LightInfo.obj().fromJson(reader, customScalarAdapters)
          else -> break
        }
      }

      return GetRegistrantsQuery.List(
        lightInfo = _lightInfo!!
      )
    }

    public override fun toJson(
      writer: JsonWriter,
      customScalarAdapters: CustomScalarAdapters,
      `value`: GetRegistrantsQuery.List,
    ): Unit {
      writer.name("lightInfo")
      LightInfo.obj().toJson(writer, customScalarAdapters, value.lightInfo)
    }
  }

  public object LightInfo : Adapter<GetRegistrantsQuery.LightInfo> {
    public val RESPONSE_NAMES: kotlin.collections.List<String> = listOf("avatar", "displayName",
        "formattedAddress", "avatarFrameTokenId", "handle")

    public override fun fromJson(reader: JsonReader, customScalarAdapters: CustomScalarAdapters):
        GetRegistrantsQuery.LightInfo {
      var _avatar: String? = null
      var _displayName: String? = null
      var _formattedAddress: String? = null
      var _avatarFrameTokenId: String? = null
      var _handle: String? = null

      while(true) {
        when (reader.selectName(RESPONSE_NAMES)) {
          0 -> _avatar = StringAdapter.fromJson(reader, customScalarAdapters)
          1 -> _displayName = StringAdapter.fromJson(reader, customScalarAdapters)
          2 -> _formattedAddress = StringAdapter.fromJson(reader, customScalarAdapters)
          3 -> _avatarFrameTokenId = NullableStringAdapter.fromJson(reader, customScalarAdapters)
          4 -> _handle = StringAdapter.fromJson(reader, customScalarAdapters)
          else -> break
        }
      }

      return GetRegistrantsQuery.LightInfo(
        avatar = _avatar!!,
        displayName = _displayName!!,
        formattedAddress = _formattedAddress!!,
        avatarFrameTokenId = _avatarFrameTokenId,
        handle = _handle!!
      )
    }

    public override fun toJson(
      writer: JsonWriter,
      customScalarAdapters: CustomScalarAdapters,
      `value`: GetRegistrantsQuery.LightInfo,
    ): Unit {
      writer.name("avatar")
      StringAdapter.toJson(writer, customScalarAdapters, value.avatar)

      writer.name("displayName")
      StringAdapter.toJson(writer, customScalarAdapters, value.displayName)

      writer.name("formattedAddress")
      StringAdapter.toJson(writer, customScalarAdapters, value.formattedAddress)

      writer.name("avatarFrameTokenId")
      NullableStringAdapter.toJson(writer, customScalarAdapters, value.avatarFrameTokenId)

      writer.name("handle")
      StringAdapter.toJson(writer, customScalarAdapters, value.handle)
    }
  }
}
