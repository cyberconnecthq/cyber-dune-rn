//
// AUTO-GENERATED FILE. DO NOT MODIFY.
//
// This class was automatically generated by Apollo GraphQL version '3.8.2'.
//
package com.cyberconnect.link3.adapter

import com.apollographql.apollo3.api.Adapter
import com.apollographql.apollo3.api.CustomScalarAdapters
import com.apollographql.apollo3.api.IntAdapter
import com.apollographql.apollo3.api.json.JsonReader
import com.apollographql.apollo3.api.json.JsonWriter
import com.apollographql.apollo3.api.nullable
import com.apollographql.apollo3.api.obj
import com.cyberconnect.link3.GetPostCommentCountQuery
import kotlin.Int
import kotlin.String
import kotlin.Unit
import kotlin.collections.List

public object GetPostCommentCountQuery_ResponseAdapter {
  public object Data : Adapter<GetPostCommentCountQuery.Data> {
    public val RESPONSE_NAMES: List<String> = listOf("post")

    public override fun fromJson(reader: JsonReader, customScalarAdapters: CustomScalarAdapters):
        GetPostCommentCountQuery.Data {
      var _post: GetPostCommentCountQuery.Post? = null

      while(true) {
        when (reader.selectName(RESPONSE_NAMES)) {
          0 -> _post = Post.obj().nullable().fromJson(reader, customScalarAdapters)
          else -> break
        }
      }

      return GetPostCommentCountQuery.Data(
        post = _post
      )
    }

    public override fun toJson(
      writer: JsonWriter,
      customScalarAdapters: CustomScalarAdapters,
      `value`: GetPostCommentCountQuery.Data,
    ): Unit {
      writer.name("post")
      Post.obj().nullable().toJson(writer, customScalarAdapters, value.post)
    }
  }

  public object Post : Adapter<GetPostCommentCountQuery.Post> {
    public val RESPONSE_NAMES: List<String> = listOf("commentCount")

    public override fun fromJson(reader: JsonReader, customScalarAdapters: CustomScalarAdapters):
        GetPostCommentCountQuery.Post {
      var _commentCount: Int? = null

      while(true) {
        when (reader.selectName(RESPONSE_NAMES)) {
          0 -> _commentCount = IntAdapter.fromJson(reader, customScalarAdapters)
          else -> break
        }
      }

      return GetPostCommentCountQuery.Post(
        commentCount = _commentCount!!
      )
    }

    public override fun toJson(
      writer: JsonWriter,
      customScalarAdapters: CustomScalarAdapters,
      `value`: GetPostCommentCountQuery.Post,
    ): Unit {
      writer.name("commentCount")
      IntAdapter.toJson(writer, customScalarAdapters, value.commentCount)
    }
  }
}
