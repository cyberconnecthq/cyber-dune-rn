//
// AUTO-GENERATED FILE. DO NOT MODIFY.
//
// This class was automatically generated by Apollo GraphQL version '3.8.2'.
//
package com.cyberconnect.link3

import com.apollographql.apollo3.annotations.ApolloAdaptableWith
import com.apollographql.apollo3.api.Adapter
import com.apollographql.apollo3.api.CompiledField
import com.apollographql.apollo3.api.CustomScalarAdapters
import com.apollographql.apollo3.api.Mutation
import com.apollographql.apollo3.api.json.JsonWriter
import com.apollographql.apollo3.api.obj
import com.cyberconnect.link3.adapter.JoinEventRaffleMutation_ResponseAdapter
import com.cyberconnect.link3.adapter.JoinEventRaffleMutation_VariablesAdapter
import com.cyberconnect.link3.selections.JoinEventRaffleMutationSelections
import com.cyberconnect.link3.type.JoinRaffleResponse_Status
import kotlin.Boolean
import kotlin.String
import kotlin.Unit
import kotlin.collections.List

public data class JoinEventRaffleMutation(
  public val eventId: String,
  public val token: String,
  public val nonce: String,
  public val verifier: String,
) : Mutation<JoinEventRaffleMutation.Data> {
  public override fun id(): String = OPERATION_ID

  public override fun document(): String = OPERATION_DOCUMENT

  public override fun name(): String = OPERATION_NAME

  public override fun serializeVariables(writer: JsonWriter,
      customScalarAdapters: CustomScalarAdapters): Unit {
    JoinEventRaffleMutation_VariablesAdapter.toJson(writer, customScalarAdapters, this)
  }

  public override fun adapter(): Adapter<Data> = JoinEventRaffleMutation_ResponseAdapter.Data.obj()

  public override fun rootField(): CompiledField = CompiledField.Builder(
    name = "data",
    type = com.cyberconnect.link3.type.Mutation.type
  )
  .selections(selections = JoinEventRaffleMutationSelections.__root)
  .build()

  @ApolloAdaptableWith(JoinEventRaffleMutation_ResponseAdapter.Data::class)
  public data class Data(
    public val joinRaffle: JoinRaffle,
  ) : Mutation.Data

  public data class JoinRaffle(
    public val status: JoinRaffleResponse_Status,
    public val requirement: Requirement,
  )

  public data class Requirement(
    public val retweet: Boolean,
    public val follow: Boolean,
    public val likeAndRetweet: Boolean,
    public val tag: Boolean,
    public val comment: Boolean,
    public val whitelist: Boolean,
    public val attend: Boolean,
    public val twittersToFollow: List<TwittersToFollow>,
  )

  public data class TwittersToFollow(
    public val twitterId: String,
    public val twitterHandle: String,
  )

  public companion object {
    public const val OPERATION_ID: String =
        "c7e89d107823e1e3685c605c3932887ba8eb0864e562bce5bacb327fc4ca172c"

    /**
     * The minimized GraphQL document being sent to the server to save a few bytes.
     * The un-minimized version is:
     *
     * mutation joinEventRaffle($eventId: ID!, $token: String!, $nonce: String!, $verifier: String!)
     * {
     *   joinRaffle(eventId: $eventId, token: $token, nonce: $nonce, verifier: $verifier) {
     *     status
     *     requirement {
     *       retweet
     *       follow
     *       likeAndRetweet
     *       tag
     *       comment
     *       whitelist
     *       attend
     *       twittersToFollow {
     *         twitterId
     *         twitterHandle
     *       }
     *     }
     *   }
     * }
     */
    public val OPERATION_DOCUMENT: String
      get() =
          "mutation joinEventRaffle(${'$'}eventId: ID!, ${'$'}token: String!, ${'$'}nonce: String!, ${'$'}verifier: String!) { joinRaffle(eventId: ${'$'}eventId, token: ${'$'}token, nonce: ${'$'}nonce, verifier: ${'$'}verifier) { status requirement { retweet follow likeAndRetweet tag comment whitelist attend twittersToFollow { twitterId twitterHandle } } } }"

    public const val OPERATION_NAME: String = "joinEventRaffle"
  }
}
