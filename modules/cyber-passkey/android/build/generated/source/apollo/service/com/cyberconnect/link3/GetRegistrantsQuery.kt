//
// AUTO-GENERATED FILE. DO NOT MODIFY.
//
// This class was automatically generated by Apollo GraphQL version '3.8.2'.
//
package com.cyberconnect.link3

import com.apollographql.apollo3.annotations.ApolloAdaptableWith
import com.apollographql.apollo3.api.Adapter
import com.apollographql.apollo3.api.CompiledField
import com.apollographql.apollo3.api.CustomScalarAdapters
import com.apollographql.apollo3.api.Optional
import com.apollographql.apollo3.api.Query
import com.apollographql.apollo3.api.json.JsonWriter
import com.apollographql.apollo3.api.obj
import com.cyberconnect.link3.adapter.GetRegistrantsQuery_ResponseAdapter
import com.cyberconnect.link3.adapter.GetRegistrantsQuery_VariablesAdapter
import com.cyberconnect.link3.selections.GetRegistrantsQuerySelections
import kotlin.Int
import kotlin.String
import kotlin.Unit

public data class GetRegistrantsQuery(
  public val id: String,
  public val first: Optional<Int?> = Optional.Absent,
  public val after: Optional<String?> = Optional.Absent,
) : Query<GetRegistrantsQuery.Data> {
  public override fun id(): String = OPERATION_ID

  public override fun document(): String = OPERATION_DOCUMENT

  public override fun name(): String = OPERATION_NAME

  public override fun serializeVariables(writer: JsonWriter,
      customScalarAdapters: CustomScalarAdapters): Unit {
    GetRegistrantsQuery_VariablesAdapter.toJson(writer, customScalarAdapters, this)
  }

  public override fun adapter(): Adapter<Data> = GetRegistrantsQuery_ResponseAdapter.Data.obj()

  public override fun rootField(): CompiledField = CompiledField.Builder(
    name = "data",
    type = com.cyberconnect.link3.type.Query.type
  )
  .selections(selections = GetRegistrantsQuerySelections.__root)
  .build()

  @ApolloAdaptableWith(GetRegistrantsQuery_ResponseAdapter.Data::class)
  public data class Data(
    public val event: Event?,
  ) : Query.Data

  public data class Event(
    public val registrantsCount: Int,
    public val registrants: Registrants,
  )

  public data class Registrants(
    public val pageInfo: PageInfo,
    public val list: kotlin.collections.List<List>,
  )

  public data class PageInfo(
    public val __typename: String,
    /**
     * Synthetic field for 'PageInfo'
     */
    public val pageInfo: com.cyberconnect.link3.fragment.PageInfo,
  )

  public data class List(
    public val lightInfo: LightInfo,
  )

  public data class LightInfo(
    public val avatar: String,
    public val displayName: String,
    public val formattedAddress: String,
    public val avatarFrameTokenId: String?,
    public val handle: String,
  )

  public companion object {
    public const val OPERATION_ID: String =
        "73dde5d22c9eeb970fc9bf7bbcc590483df61014bbc5dac2f2568b0041335030"

    /**
     * The minimized GraphQL document being sent to the server to save a few bytes.
     * The un-minimized version is:
     *
     * query getRegistrants($id: ID!, $first: Int, $after: String) {
     *   event(id: $id) {
     *     registrantsCount
     *     registrants(first: $first, after: $after) {
     *       pageInfo {
     *         __typename
     *         ...PageInfo
     *       }
     *       list {
     *         lightInfo {
     *           avatar
     *           displayName
     *           formattedAddress
     *           avatarFrameTokenId
     *           handle
     *         }
     *       }
     *     }
     *   }
     * }
     *
     * fragment PageInfo on PageInfo {
     *   startCursor
     *   endCursor
     *   hasNextPage
     *   hasPreviousPage
     * }
     */
    public val OPERATION_DOCUMENT: String
      get() =
          "query getRegistrants(${'$'}id: ID!, ${'$'}first: Int, ${'$'}after: String) { event(id: ${'$'}id) { registrantsCount registrants(first: ${'$'}first, after: ${'$'}after) { pageInfo { __typename ...PageInfo } list { lightInfo { avatar displayName formattedAddress avatarFrameTokenId handle } } } } }  fragment PageInfo on PageInfo { startCursor endCursor hasNextPage hasPreviousPage }"

    public const val OPERATION_NAME: String = "getRegistrants"
  }
}
