//
// AUTO-GENERATED FILE. DO NOT MODIFY.
//
// This class was automatically generated by Apollo GraphQL version '3.8.2'.
//
package com.cyberconnect.link3.adapter

import com.apollographql.apollo3.api.Adapter
import com.apollographql.apollo3.api.CustomScalarAdapters
import com.apollographql.apollo3.api.IntAdapter
import com.apollographql.apollo3.api.StringAdapter
import com.apollographql.apollo3.api.json.JsonReader
import com.apollographql.apollo3.api.json.JsonWriter
import com.apollographql.apollo3.api.list
import com.apollographql.apollo3.api.nullable
import com.apollographql.apollo3.api.obj
import com.cyberconnect.link3.PointsQuery
import com.cyberconnect.link3.type.MeResponse_Status
import com.cyberconnect.link3.type.adapter.MeResponse_Status_ResponseAdapter
import kotlin.Int
import kotlin.String
import kotlin.Unit
import kotlin.collections.List

public object PointsQuery_ResponseAdapter {
  public object Data : Adapter<PointsQuery.Data> {
    public val RESPONSE_NAMES: List<String> = listOf("me")

    public override fun fromJson(reader: JsonReader, customScalarAdapters: CustomScalarAdapters):
        PointsQuery.Data {
      var _me: PointsQuery.Me? = null

      while(true) {
        when (reader.selectName(RESPONSE_NAMES)) {
          0 -> _me = Me.obj().fromJson(reader, customScalarAdapters)
          else -> break
        }
      }

      return PointsQuery.Data(
        me = _me!!
      )
    }

    public override fun toJson(
      writer: JsonWriter,
      customScalarAdapters: CustomScalarAdapters,
      `value`: PointsQuery.Data,
    ): Unit {
      writer.name("me")
      Me.obj().toJson(writer, customScalarAdapters, value.me)
    }
  }

  public object Me : Adapter<PointsQuery.Me> {
    public val RESPONSE_NAMES: List<String> = listOf("status", "message", "data")

    public override fun fromJson(reader: JsonReader, customScalarAdapters: CustomScalarAdapters):
        PointsQuery.Me {
      var _status: MeResponse_Status? = null
      var _message: String? = null
      var _data: PointsQuery.Data1? = null

      while(true) {
        when (reader.selectName(RESPONSE_NAMES)) {
          0 -> _status = MeResponse_Status_ResponseAdapter.fromJson(reader, customScalarAdapters)
          1 -> _message = StringAdapter.fromJson(reader, customScalarAdapters)
          2 -> _data = Data1.obj().nullable().fromJson(reader, customScalarAdapters)
          else -> break
        }
      }

      return PointsQuery.Me(
        status = _status!!,
        message = _message!!,
        `data` = _data
      )
    }

    public override fun toJson(
      writer: JsonWriter,
      customScalarAdapters: CustomScalarAdapters,
      `value`: PointsQuery.Me,
    ): Unit {
      writer.name("status")
      MeResponse_Status_ResponseAdapter.toJson(writer, customScalarAdapters, value.status)

      writer.name("message")
      StringAdapter.toJson(writer, customScalarAdapters, value.message)

      writer.name("data")
      Data1.obj().nullable().toJson(writer, customScalarAdapters, value.`data`)
    }
  }

  public object Data1 : Adapter<PointsQuery.Data1> {
    public val RESPONSE_NAMES: List<String> = listOf("pointAccount", "pointTasks")

    public override fun fromJson(reader: JsonReader, customScalarAdapters: CustomScalarAdapters):
        PointsQuery.Data1 {
      var _pointAccount: PointsQuery.PointAccount? = null
      var _pointTasks: List<PointsQuery.PointTask>? = null

      while(true) {
        when (reader.selectName(RESPONSE_NAMES)) {
          0 -> _pointAccount = PointAccount.obj().fromJson(reader, customScalarAdapters)
          1 -> _pointTasks = PointTask.obj(true).list().fromJson(reader, customScalarAdapters)
          else -> break
        }
      }

      return PointsQuery.Data1(
        pointAccount = _pointAccount!!,
        pointTasks = _pointTasks!!
      )
    }

    public override fun toJson(
      writer: JsonWriter,
      customScalarAdapters: CustomScalarAdapters,
      `value`: PointsQuery.Data1,
    ): Unit {
      writer.name("pointAccount")
      PointAccount.obj().toJson(writer, customScalarAdapters, value.pointAccount)

      writer.name("pointTasks")
      PointTask.obj(true).list().toJson(writer, customScalarAdapters, value.pointTasks)
    }
  }

  public object PointAccount : Adapter<PointsQuery.PointAccount> {
    public val RESPONSE_NAMES: List<String> = listOf("completedTasksCount", "totalPoints")

    public override fun fromJson(reader: JsonReader, customScalarAdapters: CustomScalarAdapters):
        PointsQuery.PointAccount {
      var _completedTasksCount: Int? = null
      var _totalPoints: Int? = null

      while(true) {
        when (reader.selectName(RESPONSE_NAMES)) {
          0 -> _completedTasksCount = IntAdapter.fromJson(reader, customScalarAdapters)
          1 -> _totalPoints = IntAdapter.fromJson(reader, customScalarAdapters)
          else -> break
        }
      }

      return PointsQuery.PointAccount(
        completedTasksCount = _completedTasksCount!!,
        totalPoints = _totalPoints!!
      )
    }

    public override fun toJson(
      writer: JsonWriter,
      customScalarAdapters: CustomScalarAdapters,
      `value`: PointsQuery.PointAccount,
    ): Unit {
      writer.name("completedTasksCount")
      IntAdapter.toJson(writer, customScalarAdapters, value.completedTasksCount)

      writer.name("totalPoints")
      IntAdapter.toJson(writer, customScalarAdapters, value.totalPoints)
    }
  }

  public object PointTask : Adapter<PointsQuery.PointTask> {
    public val RESPONSE_NAMES: List<String> = listOf("__typename")

    public override fun fromJson(reader: JsonReader, customScalarAdapters: CustomScalarAdapters):
        PointsQuery.PointTask {
      var __typename: String? = null

      while(true) {
        when (reader.selectName(RESPONSE_NAMES)) {
          0 -> __typename = StringAdapter.fromJson(reader, customScalarAdapters)
          else -> break
        }
      }

      reader.rewind()
      val _pointTask = com.cyberconnect.link3.fragment.PointTaskImpl_ResponseAdapter.PointTask.fromJson(reader,
          customScalarAdapters)

      return PointsQuery.PointTask(
        __typename = __typename!!,
        pointTask = _pointTask
      )
    }

    public override fun toJson(
      writer: JsonWriter,
      customScalarAdapters: CustomScalarAdapters,
      `value`: PointsQuery.PointTask,
    ): Unit {
      writer.name("__typename")
      StringAdapter.toJson(writer, customScalarAdapters, value.__typename)

      com.cyberconnect.link3.fragment.PointTaskImpl_ResponseAdapter.PointTask.toJson(writer,
          customScalarAdapters, value.pointTask)
    }
  }
}
