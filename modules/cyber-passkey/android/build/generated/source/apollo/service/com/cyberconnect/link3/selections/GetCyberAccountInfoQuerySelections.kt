//
// AUTO-GENERATED FILE. DO NOT MODIFY.
//
// This class was automatically generated by Apollo GraphQL version '3.8.2'.
//
package com.cyberconnect.link3.selections

import com.apollographql.apollo3.api.CompiledField
import com.apollographql.apollo3.api.CompiledFragment
import com.apollographql.apollo3.api.CompiledSelection
import com.apollographql.apollo3.api.list
import com.apollographql.apollo3.api.notNull
import com.cyberconnect.link3.fragment.selections.PriceSelections
import com.cyberconnect.link3.type.DmCreditAccount
import com.cyberconnect.link3.type.GraphQLInt
import com.cyberconnect.link3.type.GraphQLString
import com.cyberconnect.link3.type.MeResponse
import com.cyberconnect.link3.type.PointAccount
import com.cyberconnect.link3.type.TokenValue
import com.cyberconnect.link3.type.User
import com.cyberconnect.link3.type.V3Credit
import com.cyberconnect.link3.type.V3UserInfo
import kotlin.collections.List

public object GetCyberAccountInfoQuerySelections {
  private val __credits: List<CompiledSelection> = listOf(
        CompiledField.Builder(
          name = "decimals",
          type = GraphQLInt.type.notNull()
        ).build(),
        CompiledField.Builder(
          name = "balance",
          type = GraphQLString.type.notNull()
        ).build(),
        CompiledField.Builder(
          name = "pending",
          type = GraphQLString.type.notNull()
        ).build(),
        CompiledField.Builder(
          name = "locked",
          type = GraphQLString.type.notNull()
        ).build()
      )

  private val __v3Info: List<CompiledSelection> = listOf(
        CompiledField.Builder(
          name = "cyberAccount",
          type = GraphQLString.type.notNull()
        ).build(),
        CompiledField.Builder(
          name = "credits",
          type = V3Credit.type.notNull().list().notNull()
        ).selections(__credits)
        .build()
      )

  private val __totalEarned: List<CompiledSelection> = listOf(
        CompiledField.Builder(
          name = "__typename",
          type = GraphQLString.type.notNull()
        ).build(),
        CompiledFragment.Builder(
          typeCondition = "TokenValue",
          possibleTypes = listOf("TokenValue")
        ).selections(PriceSelections.__root)
        .build()
      )

  private val __balance1: List<CompiledSelection> = listOf(
        CompiledField.Builder(
          name = "__typename",
          type = GraphQLString.type.notNull()
        ).build(),
        CompiledFragment.Builder(
          typeCondition = "TokenValue",
          possibleTypes = listOf("TokenValue")
        ).selections(PriceSelections.__root)
        .build()
      )

  private val __nonWithdrawableBalance: List<CompiledSelection> = listOf(
        CompiledField.Builder(
          name = "__typename",
          type = GraphQLString.type.notNull()
        ).build(),
        CompiledFragment.Builder(
          typeCondition = "TokenValue",
          possibleTypes = listOf("TokenValue")
        ).selections(PriceSelections.__root)
        .build()
      )

  private val __withdrawableBalance: List<CompiledSelection> = listOf(
        CompiledField.Builder(
          name = "__typename",
          type = GraphQLString.type.notNull()
        ).build(),
        CompiledFragment.Builder(
          typeCondition = "TokenValue",
          possibleTypes = listOf("TokenValue")
        ).selections(PriceSelections.__root)
        .build()
      )

  private val __dmCreditAccount: List<CompiledSelection> = listOf(
        CompiledField.Builder(
          name = "balance",
          type = TokenValue.type.notNull()
        ).selections(__balance1)
        .build(),
        CompiledField.Builder(
          name = "nonWithdrawableBalance",
          type = TokenValue.type.notNull()
        ).selections(__nonWithdrawableBalance)
        .build(),
        CompiledField.Builder(
          name = "withdrawableBalance",
          type = TokenValue.type.notNull()
        ).selections(__withdrawableBalance)
        .build()
      )

  private val __pointAccount: List<CompiledSelection> = listOf(
        CompiledField.Builder(
          name = "totalPoints",
          type = GraphQLInt.type.notNull()
        ).build()
      )

  private val __data: List<CompiledSelection> = listOf(
        CompiledField.Builder(
          name = "v3Info",
          type = V3UserInfo.type
        ).selections(__v3Info)
        .build(),
        CompiledField.Builder(
          name = "totalEarned",
          type = TokenValue.type.notNull()
        ).selections(__totalEarned)
        .build(),
        CompiledField.Builder(
          name = "dmCreditAccount",
          type = DmCreditAccount.type.notNull()
        ).selections(__dmCreditAccount)
        .build(),
        CompiledField.Builder(
          name = "pointAccount",
          type = PointAccount.type.notNull()
        ).selections(__pointAccount)
        .build()
      )

  private val __me: List<CompiledSelection> = listOf(
        CompiledField.Builder(
          name = "data",
          type = User.type
        ).selections(__data)
        .build()
      )

  public val __root: List<CompiledSelection> = listOf(
        CompiledField.Builder(
          name = "me",
          type = MeResponse.type.notNull()
        ).selections(__me)
        .build()
      )
}
