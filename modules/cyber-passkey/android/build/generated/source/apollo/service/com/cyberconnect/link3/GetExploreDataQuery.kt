//
// AUTO-GENERATED FILE. DO NOT MODIFY.
//
// This class was automatically generated by Apollo GraphQL version '3.8.2'.
//
package com.cyberconnect.link3

import com.apollographql.apollo3.annotations.ApolloAdaptableWith
import com.apollographql.apollo3.api.Adapter
import com.apollographql.apollo3.api.CompiledField
import com.apollographql.apollo3.api.CustomScalarAdapters
import com.apollographql.apollo3.api.Query
import com.apollographql.apollo3.api.json.JsonWriter
import com.apollographql.apollo3.api.obj
import com.cyberconnect.link3.adapter.GetExploreDataQuery_ResponseAdapter
import com.cyberconnect.link3.fragment.PosterEventCard
import com.cyberconnect.link3.selections.GetExploreDataQuerySelections
import kotlin.Any
import kotlin.Boolean
import kotlin.Int
import kotlin.String
import kotlin.Unit
import kotlin.collections.List

public class GetExploreDataQuery() : Query<GetExploreDataQuery.Data> {
  public override fun equals(other: Any?): Boolean = other != null && other::class == this::class

  public override fun hashCode(): Int = this::class.hashCode()

  public override fun id(): String = OPERATION_ID

  public override fun document(): String = OPERATION_DOCUMENT

  public override fun name(): String = OPERATION_NAME

  public override fun serializeVariables(writer: JsonWriter,
      customScalarAdapters: CustomScalarAdapters): Unit {
    // This operation doesn't have any variable
  }

  public override fun adapter(): Adapter<Data> = GetExploreDataQuery_ResponseAdapter.Data.obj()

  public override fun rootField(): CompiledField = CompiledField.Builder(
    name = "data",
    type = com.cyberconnect.link3.type.Query.type
  )
  .selections(selections = GetExploreDataQuerySelections.__root)
  .build()

  @ApolloAdaptableWith(GetExploreDataQuery_ResponseAdapter.Data::class)
  public data class Data(
    public val featuredEvents: List<FeaturedEvent>,
  ) : Query.Data

  public data class FeaturedEvent(
    public val __typename: String,
    /**
     * Synthetic field for 'PosterEventCard'
     */
    public val posterEventCard: PosterEventCard,
  )

  public companion object {
    public const val OPERATION_ID: String =
        "f26373e5dbdf07987b675be1a121c8859fb79c8ae451383cc087acbcea5c0d53"

    /**
     * The minimized GraphQL document being sent to the server to save a few bytes.
     * The un-minimized version is:
     *
     * query getExploreData {
     *   featuredEvents: exploreEvents(request: {
     *     type: FEATURED
     *   }
     *   ) {
     *     __typename
     *     ...PosterEventCard
     *   }
     * }
     *
     * fragment OrganizerForV3EventCard on Organization {
     *   verification
     *   lightInfo {
     *     displayName
     *     profilePicture
     *     profileHandle
     *   }
     * }
     *
     * fragment PosterEventCard on Event {
     *   id
     *   title
     *   posterUrl
     *   startTimestamp
     *   endTimestamp
     *   registerStatus
     *   registrantsCount
     *   status
     *   organizer {
     *     __typename
     *     ...OrganizerForV3EventCard
     *   }
     *   lightInfo {
     *     hasRaffle
     *     hasW3ST
     *   }
     * }
     */
    public val OPERATION_DOCUMENT: String
      get() =
          "query getExploreData { featuredEvents: exploreEvents(request: { type: FEATURED } ) { __typename ...PosterEventCard } }  fragment OrganizerForV3EventCard on Organization { verification lightInfo { displayName profilePicture profileHandle } }  fragment PosterEventCard on Event { id title posterUrl startTimestamp endTimestamp registerStatus registrantsCount status organizer { __typename ...OrganizerForV3EventCard } lightInfo { hasRaffle hasW3ST } }"

    public const val OPERATION_NAME: String = "getExploreData"
  }
}
