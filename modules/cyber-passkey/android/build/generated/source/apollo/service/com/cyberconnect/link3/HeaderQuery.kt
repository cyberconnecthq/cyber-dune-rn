//
// AUTO-GENERATED FILE. DO NOT MODIFY.
//
// This class was automatically generated by Apollo GraphQL version '3.8.2'.
//
package com.cyberconnect.link3

import com.apollographql.apollo3.annotations.ApolloAdaptableWith
import com.apollographql.apollo3.api.Adapter
import com.apollographql.apollo3.api.CompiledField
import com.apollographql.apollo3.api.CustomScalarAdapters
import com.apollographql.apollo3.api.Query
import com.apollographql.apollo3.api.json.JsonWriter
import com.apollographql.apollo3.api.obj
import com.cyberconnect.link3.adapter.HeaderQuery_ResponseAdapter
import com.cyberconnect.link3.fragment.Price
import com.cyberconnect.link3.selections.HeaderQuerySelections
import com.cyberconnect.link3.type.Attestation_Status
import com.cyberconnect.link3.type.Attestation_Type
import com.cyberconnect.link3.type.BlockType
import com.cyberconnect.link3.type.HeadlineType
import com.cyberconnect.link3.type.MeResponse_Status
import com.cyberconnect.link3.type.PersonalDisplayName_Type
import kotlin.Any
import kotlin.Boolean
import kotlin.Int
import kotlin.String
import kotlin.Unit
import kotlin.collections.List

public class HeaderQuery() : Query<HeaderQuery.Data> {
  public override fun equals(other: Any?): Boolean = other != null && other::class == this::class

  public override fun hashCode(): Int = this::class.hashCode()

  public override fun id(): String = OPERATION_ID

  public override fun document(): String = OPERATION_DOCUMENT

  public override fun name(): String = OPERATION_NAME

  public override fun serializeVariables(writer: JsonWriter,
      customScalarAdapters: CustomScalarAdapters): Unit {
    // This operation doesn't have any variable
  }

  public override fun adapter(): Adapter<Data> = HeaderQuery_ResponseAdapter.Data.obj()

  public override fun rootField(): CompiledField = CompiledField.Builder(
    name = "data",
    type = com.cyberconnect.link3.type.Query.type
  )
  .selections(selections = HeaderQuerySelections.__root)
  .build()

  @ApolloAdaptableWith(HeaderQuery_ResponseAdapter.Data::class)
  public data class Data(
    public val me: Me,
  ) : Query.Data

  public data class Me(
    public val status: MeResponse_Status,
    public val message: String,
    public val `data`: Data1?,
  )

  public data class Data1(
    public val id: String,
    public val totalEarned: TotalEarned,
    public val profile: Profile?,
    public val lightInfo: LightInfo,
    public val privateInfo: PrivateInfo?,
    public val v3Info: V3Info?,
    public val cyberIds: List<CyberId>,
    public val turnkeyUserInfo: TurnkeyUserInfo?,
    public val chatUser: ChatUser?,
    public val dmCreditAccount: DmCreditAccount,
    public val pointAccount: PointAccount,
  )

  public data class TotalEarned(
    public val `value`: String,
    public val decimal: Int,
    public val currency: String,
  )

  public data class Profile(
    public val __typename: String,
    /**
     * Synthetic field for inline fragment on PerProfile
     */
    public val onPerProfile: OnPerProfile?,
  )

  public data class OnPerProfile(
    public val id: String,
    public val handle: String,
    /**
     * Display name of the personal profile, standard displayname or ENS, standard: 1-20 characters;
     * letters, numbers, and blanks only.
     */
    public val displayName: DisplayName,
    /**
     * Personal headline, including Title and Organization.
     */
    public val headline: Headline,
    public val isVerified: Boolean,
    public val identities: List<Identity>?,
    public val blocks: List<Block>,
  )

  public data class DisplayName(
    public val type: PersonalDisplayName_Type,
  )

  public data class Headline(
    public val avatar: Any,
    public val title: String,
    public val displayName: String,
    public val twitterHandle: String,
    public val twitterId: String,
    public val headlineType: HeadlineType,
    public val followersCount: Int,
  )

  public data class Identity(
    public val headline: Headline1,
    public val attestation: Attestation?,
  )

  public data class Headline1(
    public val avatar: Any,
    public val title: String,
    public val displayName: String,
    public val twitterHandle: String,
    public val twitterId: String,
    public val headlineType: HeadlineType,
    public val followersCount: Int,
  )

  public data class Attestation(
    public val uid: String,
    public val status: Attestation_Status,
    public val type: Attestation_Type,
  )

  public data class Block(
    public val type: BlockType,
    public val isPlaceHolder: Boolean,
  )

  public data class LightInfo(
    public val avatar: String,
    public val formattedAddress: String,
    public val displayName: String,
    public val handle: String,
    public val avatarFrameTokenId: String?,
    public val attestation: Attestation1?,
  )

  public data class Attestation1(
    public val uid: String,
    public val status: Attestation_Status,
    public val type: Attestation_Type,
  )

  public data class PrivateInfo(
    public val address: Any,
    public val discordId: String,
    public val twitterId: String,
    public val twitterAuthorized: Boolean,
    /**
     * User access token, expired in 7 days.
     */
    public val accessToken: String,
    public val email: String,
    /**
     * V3 SDK JWT token, expired in 7 days.
     */
    public val v3SdkToken: String,
    public val linkedinId: String,
    public val githubId: String,
  )

  public data class V3Info(
    public val cyberAccount: String,
    public val credits: List<Credit>,
  )

  public data class Credit(
    public val balance: String,
    public val decimals: Int,
    public val pending: String,
    public val locked: String,
  )

  public data class CyberId(
    public val tokenId: String,
    public val handle: String,
    public val isPrimary: Boolean,
  )

  public data class TurnkeyUserInfo(
    public val subOrgId: String,
    public val turnkeyUserId: String,
    public val username: String,
  )

  public data class ChatUser(
    public val creditBalance: CreditBalance,
  )

  public data class CreditBalance(
    public val `value`: String,
    public val decimal: Int,
    public val currency: String,
  )

  public data class DmCreditAccount(
    public val balance: Balance,
    public val nonWithdrawableBalance: NonWithdrawableBalance,
    public val withdrawableBalance: WithdrawableBalance,
  )

  public data class Balance(
    public val __typename: String,
    /**
     * Synthetic field for 'Price'
     */
    public val price: Price,
  )

  public data class NonWithdrawableBalance(
    public val __typename: String,
    /**
     * Synthetic field for 'Price'
     */
    public val price: Price,
  )

  public data class WithdrawableBalance(
    public val __typename: String,
    /**
     * Synthetic field for 'Price'
     */
    public val price: Price,
  )

  public data class PointAccount(
    public val totalPoints: Int,
  )

  public companion object {
    public const val OPERATION_ID: String =
        "51a64e1cfd27ed5fa47a9db9b5686a35162b8bcc0e134b810194c2ea0f82732c"

    /**
     * The minimized GraphQL document being sent to the server to save a few bytes.
     * The un-minimized version is:
     *
     * query header {
     *   me {
     *     status
     *     message
     *     data {
     *       id
     *       totalEarned {
     *         value
     *         decimal
     *         currency
     *       }
     *       profile {
     *         __typename
     *         ... on PerProfile {
     *           id
     *           handle
     *           displayName {
     *             type
     *           }
     *           headline {
     *             avatar
     *             title
     *             displayName
     *             twitterHandle
     *             twitterId
     *             headlineType
     *             followersCount
     *           }
     *           isVerified
     *           identities {
     *             headline {
     *               avatar
     *               title
     *               displayName
     *               twitterHandle
     *               twitterId
     *               headlineType
     *               followersCount
     *             }
     *             attestation {
     *               uid
     *               status
     *               type
     *             }
     *           }
     *           blocks {
     *             type
     *             isPlaceHolder
     *           }
     *         }
     *       }
     *       lightInfo {
     *         avatar
     *         formattedAddress
     *         displayName
     *         handle
     *         avatarFrameTokenId
     *         attestation {
     *           uid
     *           status
     *           type
     *         }
     *       }
     *       privateInfo {
     *         address
     *         discordId
     *         twitterId
     *         twitterAuthorized
     *         accessToken
     *         email
     *         v3SdkToken
     *         linkedinId
     *         githubId
     *       }
     *       v3Info {
     *         cyberAccount
     *         credits {
     *           balance
     *           decimals
     *           pending
     *           locked
     *         }
     *       }
     *       cyberIds {
     *         tokenId
     *         handle
     *         isPrimary
     *       }
     *       turnkeyUserInfo {
     *         subOrgId
     *         turnkeyUserId
     *         username
     *       }
     *       chatUser {
     *         creditBalance {
     *           value
     *           decimal
     *           currency
     *         }
     *       }
     *       dmCreditAccount {
     *         balance {
     *           __typename
     *           ...Price
     *         }
     *         nonWithdrawableBalance {
     *           __typename
     *           ...Price
     *         }
     *         withdrawableBalance {
     *           __typename
     *           ...Price
     *         }
     *       }
     *       pointAccount {
     *         totalPoints
     *       }
     *     }
     *   }
     * }
     *
     * fragment Price on TokenValue {
     *   currency
     *   decimal
     *   value
     * }
     */
    public val OPERATION_DOCUMENT: String
      get() =
          "query header { me { status message data { id totalEarned { value decimal currency } profile { __typename ... on PerProfile { id handle displayName { type } headline { avatar title displayName twitterHandle twitterId headlineType followersCount } isVerified identities { headline { avatar title displayName twitterHandle twitterId headlineType followersCount } attestation { uid status type } } blocks { type isPlaceHolder } } } lightInfo { avatar formattedAddress displayName handle avatarFrameTokenId attestation { uid status type } } privateInfo { address discordId twitterId twitterAuthorized accessToken email v3SdkToken linkedinId githubId } v3Info { cyberAccount credits { balance decimals pending locked } } cyberIds { tokenId handle isPrimary } turnkeyUserInfo { subOrgId turnkeyUserId username } chatUser { creditBalance { value decimal currency } } dmCreditAccount { balance { __typename ...Price } nonWithdrawableBalance { __typename ...Price } withdrawableBalance { __typename ...Price } } pointAccount { totalPoints } } } }  fragment Price on TokenValue { currency decimal value }"

    public const val OPERATION_NAME: String = "header"
  }
}
