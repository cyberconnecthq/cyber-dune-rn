//
// AUTO-GENERATED FILE. DO NOT MODIFY.
//
// This class was automatically generated by Apollo GraphQL version '3.8.2'.
//
package com.cyberconnect.link3.adapter

import com.apollographql.apollo3.api.Adapter
import com.apollographql.apollo3.api.AnyAdapter
import com.apollographql.apollo3.api.BooleanAdapter
import com.apollographql.apollo3.api.CustomScalarAdapters
import com.apollographql.apollo3.api.IntAdapter
import com.apollographql.apollo3.api.NullableStringAdapter
import com.apollographql.apollo3.api.StringAdapter
import com.apollographql.apollo3.api.evaluate
import com.apollographql.apollo3.api.json.JsonReader
import com.apollographql.apollo3.api.json.JsonWriter
import com.apollographql.apollo3.api.list
import com.apollographql.apollo3.api.nullable
import com.apollographql.apollo3.api.obj
import com.apollographql.apollo3.api.possibleTypes
import com.cyberconnect.link3.GetEventViewDataQuery
import com.cyberconnect.link3.fragment.DiscordEvent
import com.cyberconnect.link3.fragment.OtherEvent
import com.cyberconnect.link3.fragment.TwitterSpaceEvent
import com.cyberconnect.link3.type.EventRegisterStatus
import com.cyberconnect.link3.type.EventStatus
import com.cyberconnect.link3.type.Role
import com.cyberconnect.link3.type.VerificationStatus
import com.cyberconnect.link3.type.adapter.EventRegisterStatus_ResponseAdapter
import com.cyberconnect.link3.type.adapter.EventStatus_ResponseAdapter
import com.cyberconnect.link3.type.adapter.Role_ResponseAdapter
import com.cyberconnect.link3.type.adapter.VerificationStatus_ResponseAdapter
import kotlin.Any
import kotlin.Boolean
import kotlin.Int
import kotlin.String
import kotlin.Unit

public object GetEventViewDataQuery_ResponseAdapter {
  public object Data : Adapter<GetEventViewDataQuery.Data> {
    public val RESPONSE_NAMES: kotlin.collections.List<String> = listOf("event")

    public override fun fromJson(reader: JsonReader, customScalarAdapters: CustomScalarAdapters):
        GetEventViewDataQuery.Data {
      var _event: GetEventViewDataQuery.Event? = null

      while(true) {
        when (reader.selectName(RESPONSE_NAMES)) {
          0 -> _event = Event.obj().nullable().fromJson(reader, customScalarAdapters)
          else -> break
        }
      }

      return GetEventViewDataQuery.Data(
        event = _event
      )
    }

    public override fun toJson(
      writer: JsonWriter,
      customScalarAdapters: CustomScalarAdapters,
      `value`: GetEventViewDataQuery.Data,
    ): Unit {
      writer.name("event")
      Event.obj().nullable().toJson(writer, customScalarAdapters, value.event)
    }
  }

  public object Event : Adapter<GetEventViewDataQuery.Event> {
    public val RESPONSE_NAMES: kotlin.collections.List<String> = listOf("__typename", "id", "title",
        "info", "recap", "posterUrl", "startTimestamp", "endTimestamp", "timezone",
        "registerStatus", "status", "speakers", "organizer", "w3st", "registrantsCount",
        "registrants", "raffle", "location", "tags", "language", "recapLikeInfo",
        "registrantsTokenHoldings")

    public override fun fromJson(reader: JsonReader, customScalarAdapters: CustomScalarAdapters):
        GetEventViewDataQuery.Event {
      var __typename: String? = null
      var _id: String? = null
      var _title: String? = null
      var _info: String? = null
      var _recap: String? = null
      var _posterUrl: Any? = null
      var _startTimestamp: Any? = null
      var _endTimestamp: Any? = null
      var _timezone: String? = null
      var _registerStatus: EventRegisterStatus? = null
      var _status: EventStatus? = null
      var _speakers: kotlin.collections.List<GetEventViewDataQuery.Speaker>? = null
      var _organizer: GetEventViewDataQuery.Organizer? = null
      var _w3st: GetEventViewDataQuery.W3st? = null
      var _registrantsCount: Int? = null
      var _registrants: GetEventViewDataQuery.Registrants? = null
      var _raffle: GetEventViewDataQuery.Raffle? = null
      var _location: GetEventViewDataQuery.Location? = null
      var _tags: kotlin.collections.List<String>? = null
      var _language: Int? = null
      var _recapLikeInfo: GetEventViewDataQuery.RecapLikeInfo? = null
      var _registrantsTokenHoldings: kotlin.collections.List<GetEventViewDataQuery.RegistrantsTokenHolding>? = null

      while(true) {
        when (reader.selectName(RESPONSE_NAMES)) {
          0 -> __typename = StringAdapter.fromJson(reader, customScalarAdapters)
          1 -> _id = StringAdapter.fromJson(reader, customScalarAdapters)
          2 -> _title = StringAdapter.fromJson(reader, customScalarAdapters)
          3 -> _info = StringAdapter.fromJson(reader, customScalarAdapters)
          4 -> _recap = StringAdapter.fromJson(reader, customScalarAdapters)
          5 -> _posterUrl = AnyAdapter.fromJson(reader, customScalarAdapters)
          6 -> _startTimestamp = AnyAdapter.fromJson(reader, customScalarAdapters)
          7 -> _endTimestamp = AnyAdapter.fromJson(reader, customScalarAdapters)
          8 -> _timezone = StringAdapter.fromJson(reader, customScalarAdapters)
          9 -> _registerStatus = EventRegisterStatus_ResponseAdapter.fromJson(reader,
              customScalarAdapters)
          10 -> _status = EventStatus_ResponseAdapter.fromJson(reader, customScalarAdapters)
          11 -> _speakers = Speaker.obj(true).list().nullable().fromJson(reader,
              customScalarAdapters)
          12 -> _organizer = Organizer.obj().fromJson(reader, customScalarAdapters)
          13 -> _w3st = W3st.obj(true).nullable().fromJson(reader, customScalarAdapters)
          14 -> _registrantsCount = IntAdapter.fromJson(reader, customScalarAdapters)
          15 -> _registrants = Registrants.obj().fromJson(reader, customScalarAdapters)
          16 -> _raffle = Raffle.obj(true).nullable().fromJson(reader, customScalarAdapters)
          17 -> _location = Location.obj(true).fromJson(reader, customScalarAdapters)
          18 -> _tags = StringAdapter.list().fromJson(reader, customScalarAdapters)
          19 -> _language = IntAdapter.fromJson(reader, customScalarAdapters)
          20 -> _recapLikeInfo = RecapLikeInfo.obj().fromJson(reader, customScalarAdapters)
          21 -> _registrantsTokenHoldings = RegistrantsTokenHolding.obj().list().nullable().fromJson(reader,
              customScalarAdapters)
          else -> break
        }
      }

      return GetEventViewDataQuery.Event(
        __typename = __typename!!,
        id = _id!!,
        title = _title!!,
        info = _info!!,
        recap = _recap!!,
        posterUrl = _posterUrl!!,
        startTimestamp = _startTimestamp!!,
        endTimestamp = _endTimestamp!!,
        timezone = _timezone!!,
        registerStatus = _registerStatus!!,
        status = _status!!,
        speakers = _speakers,
        organizer = _organizer!!,
        w3st = _w3st,
        registrantsCount = _registrantsCount!!,
        registrants = _registrants!!,
        raffle = _raffle,
        location = _location!!,
        tags = _tags!!,
        language = _language!!,
        recapLikeInfo = _recapLikeInfo!!,
        registrantsTokenHoldings = _registrantsTokenHoldings
      )
    }

    public override fun toJson(
      writer: JsonWriter,
      customScalarAdapters: CustomScalarAdapters,
      `value`: GetEventViewDataQuery.Event,
    ): Unit {
      writer.name("__typename")
      StringAdapter.toJson(writer, customScalarAdapters, value.__typename)

      writer.name("id")
      StringAdapter.toJson(writer, customScalarAdapters, value.id)

      writer.name("title")
      StringAdapter.toJson(writer, customScalarAdapters, value.title)

      writer.name("info")
      StringAdapter.toJson(writer, customScalarAdapters, value.info)

      writer.name("recap")
      StringAdapter.toJson(writer, customScalarAdapters, value.recap)

      writer.name("posterUrl")
      AnyAdapter.toJson(writer, customScalarAdapters, value.posterUrl)

      writer.name("startTimestamp")
      AnyAdapter.toJson(writer, customScalarAdapters, value.startTimestamp)

      writer.name("endTimestamp")
      AnyAdapter.toJson(writer, customScalarAdapters, value.endTimestamp)

      writer.name("timezone")
      StringAdapter.toJson(writer, customScalarAdapters, value.timezone)

      writer.name("registerStatus")
      EventRegisterStatus_ResponseAdapter.toJson(writer, customScalarAdapters, value.registerStatus)

      writer.name("status")
      EventStatus_ResponseAdapter.toJson(writer, customScalarAdapters, value.status)

      writer.name("speakers")
      Speaker.obj(true).list().nullable().toJson(writer, customScalarAdapters, value.speakers)

      writer.name("organizer")
      Organizer.obj().toJson(writer, customScalarAdapters, value.organizer)

      writer.name("w3st")
      W3st.obj(true).nullable().toJson(writer, customScalarAdapters, value.w3st)

      writer.name("registrantsCount")
      IntAdapter.toJson(writer, customScalarAdapters, value.registrantsCount)

      writer.name("registrants")
      Registrants.obj().toJson(writer, customScalarAdapters, value.registrants)

      writer.name("raffle")
      Raffle.obj(true).nullable().toJson(writer, customScalarAdapters, value.raffle)

      writer.name("location")
      Location.obj(true).toJson(writer, customScalarAdapters, value.location)

      writer.name("tags")
      StringAdapter.list().toJson(writer, customScalarAdapters, value.tags)

      writer.name("language")
      IntAdapter.toJson(writer, customScalarAdapters, value.language)

      writer.name("recapLikeInfo")
      RecapLikeInfo.obj().toJson(writer, customScalarAdapters, value.recapLikeInfo)

      writer.name("registrantsTokenHoldings")
      RegistrantsTokenHolding.obj().list().nullable().toJson(writer, customScalarAdapters,
          value.registrantsTokenHoldings)
    }
  }

  public object Speaker : Adapter<GetEventViewDataQuery.Speaker> {
    public val RESPONSE_NAMES: kotlin.collections.List<String> = listOf("__typename")

    public override fun fromJson(reader: JsonReader, customScalarAdapters: CustomScalarAdapters):
        GetEventViewDataQuery.Speaker {
      var __typename: String? = null

      while(true) {
        when (reader.selectName(RESPONSE_NAMES)) {
          0 -> __typename = StringAdapter.fromJson(reader, customScalarAdapters)
          else -> break
        }
      }

      reader.rewind()
      val _speaker = com.cyberconnect.link3.fragment.SpeakerImpl_ResponseAdapter.Speaker.fromJson(reader,
          customScalarAdapters)

      return GetEventViewDataQuery.Speaker(
        __typename = __typename!!,
        speaker = _speaker
      )
    }

    public override fun toJson(
      writer: JsonWriter,
      customScalarAdapters: CustomScalarAdapters,
      `value`: GetEventViewDataQuery.Speaker,
    ): Unit {
      writer.name("__typename")
      StringAdapter.toJson(writer, customScalarAdapters, value.__typename)

      com.cyberconnect.link3.fragment.SpeakerImpl_ResponseAdapter.Speaker.toJson(writer,
          customScalarAdapters, value.speaker)
    }
  }

  public object Organizer : Adapter<GetEventViewDataQuery.Organizer> {
    public val RESPONSE_NAMES: kotlin.collections.List<String> = listOf("twitterId", "id",
        "followersCount", "verification", "currentAccess", "lightInfo", "profile")

    public override fun fromJson(reader: JsonReader, customScalarAdapters: CustomScalarAdapters):
        GetEventViewDataQuery.Organizer {
      var _twitterId: String? = null
      var _id: String? = null
      var _followersCount: Int? = null
      var _verification: VerificationStatus? = null
      var _currentAccess: Role? = null
      var _lightInfo: GetEventViewDataQuery.LightInfo? = null
      var _profile: GetEventViewDataQuery.Profile? = null

      while(true) {
        when (reader.selectName(RESPONSE_NAMES)) {
          0 -> _twitterId = StringAdapter.fromJson(reader, customScalarAdapters)
          1 -> _id = StringAdapter.fromJson(reader, customScalarAdapters)
          2 -> _followersCount = IntAdapter.fromJson(reader, customScalarAdapters)
          3 -> _verification = VerificationStatus_ResponseAdapter.fromJson(reader,
              customScalarAdapters)
          4 -> _currentAccess = Role_ResponseAdapter.fromJson(reader, customScalarAdapters)
          5 -> _lightInfo = LightInfo.obj().fromJson(reader, customScalarAdapters)
          6 -> _profile = Profile.obj().fromJson(reader, customScalarAdapters)
          else -> break
        }
      }

      return GetEventViewDataQuery.Organizer(
        twitterId = _twitterId!!,
        id = _id!!,
        followersCount = _followersCount!!,
        verification = _verification!!,
        currentAccess = _currentAccess!!,
        lightInfo = _lightInfo!!,
        profile = _profile!!
      )
    }

    public override fun toJson(
      writer: JsonWriter,
      customScalarAdapters: CustomScalarAdapters,
      `value`: GetEventViewDataQuery.Organizer,
    ): Unit {
      writer.name("twitterId")
      StringAdapter.toJson(writer, customScalarAdapters, value.twitterId)

      writer.name("id")
      StringAdapter.toJson(writer, customScalarAdapters, value.id)

      writer.name("followersCount")
      IntAdapter.toJson(writer, customScalarAdapters, value.followersCount)

      writer.name("verification")
      VerificationStatus_ResponseAdapter.toJson(writer, customScalarAdapters, value.verification)

      writer.name("currentAccess")
      Role_ResponseAdapter.toJson(writer, customScalarAdapters, value.currentAccess)

      writer.name("lightInfo")
      LightInfo.obj().toJson(writer, customScalarAdapters, value.lightInfo)

      writer.name("profile")
      Profile.obj().toJson(writer, customScalarAdapters, value.profile)
    }
  }

  public object LightInfo : Adapter<GetEventViewDataQuery.LightInfo> {
    public val RESPONSE_NAMES: kotlin.collections.List<String> = listOf("profileHandle",
        "isFollowing", "displayName", "profilePicture")

    public override fun fromJson(reader: JsonReader, customScalarAdapters: CustomScalarAdapters):
        GetEventViewDataQuery.LightInfo {
      var _profileHandle: String? = null
      var _isFollowing: Boolean? = null
      var _displayName: String? = null
      var _profilePicture: String? = null

      while(true) {
        when (reader.selectName(RESPONSE_NAMES)) {
          0 -> _profileHandle = StringAdapter.fromJson(reader, customScalarAdapters)
          1 -> _isFollowing = BooleanAdapter.fromJson(reader, customScalarAdapters)
          2 -> _displayName = StringAdapter.fromJson(reader, customScalarAdapters)
          3 -> _profilePicture = StringAdapter.fromJson(reader, customScalarAdapters)
          else -> break
        }
      }

      return GetEventViewDataQuery.LightInfo(
        profileHandle = _profileHandle!!,
        isFollowing = _isFollowing!!,
        displayName = _displayName!!,
        profilePicture = _profilePicture!!
      )
    }

    public override fun toJson(
      writer: JsonWriter,
      customScalarAdapters: CustomScalarAdapters,
      `value`: GetEventViewDataQuery.LightInfo,
    ): Unit {
      writer.name("profileHandle")
      StringAdapter.toJson(writer, customScalarAdapters, value.profileHandle)

      writer.name("isFollowing")
      BooleanAdapter.toJson(writer, customScalarAdapters, value.isFollowing)

      writer.name("displayName")
      StringAdapter.toJson(writer, customScalarAdapters, value.displayName)

      writer.name("profilePicture")
      StringAdapter.toJson(writer, customScalarAdapters, value.profilePicture)
    }
  }

  public object Profile : Adapter<GetEventViewDataQuery.Profile> {
    public val RESPONSE_NAMES: kotlin.collections.List<String> = listOf("id")

    public override fun fromJson(reader: JsonReader, customScalarAdapters: CustomScalarAdapters):
        GetEventViewDataQuery.Profile {
      var _id: String? = null

      while(true) {
        when (reader.selectName(RESPONSE_NAMES)) {
          0 -> _id = StringAdapter.fromJson(reader, customScalarAdapters)
          else -> break
        }
      }

      return GetEventViewDataQuery.Profile(
        id = _id!!
      )
    }

    public override fun toJson(
      writer: JsonWriter,
      customScalarAdapters: CustomScalarAdapters,
      `value`: GetEventViewDataQuery.Profile,
    ): Unit {
      writer.name("id")
      StringAdapter.toJson(writer, customScalarAdapters, value.id)
    }
  }

  public object W3st : Adapter<GetEventViewDataQuery.W3st> {
    public val RESPONSE_NAMES: kotlin.collections.List<String> = listOf("__typename")

    public override fun fromJson(reader: JsonReader, customScalarAdapters: CustomScalarAdapters):
        GetEventViewDataQuery.W3st {
      var __typename: String? = null

      while(true) {
        when (reader.selectName(RESPONSE_NAMES)) {
          0 -> __typename = StringAdapter.fromJson(reader, customScalarAdapters)
          else -> break
        }
      }

      reader.rewind()
      val _w3stOnEventViewPage = com.cyberconnect.link3.fragment.W3stOnEventViewPageImpl_ResponseAdapter.W3stOnEventViewPage.fromJson(reader,
          customScalarAdapters)

      return GetEventViewDataQuery.W3st(
        __typename = __typename!!,
        w3stOnEventViewPage = _w3stOnEventViewPage
      )
    }

    public override fun toJson(
      writer: JsonWriter,
      customScalarAdapters: CustomScalarAdapters,
      `value`: GetEventViewDataQuery.W3st,
    ): Unit {
      writer.name("__typename")
      StringAdapter.toJson(writer, customScalarAdapters, value.__typename)

      com.cyberconnect.link3.fragment.W3stOnEventViewPageImpl_ResponseAdapter.W3stOnEventViewPage.toJson(writer,
          customScalarAdapters, value.w3stOnEventViewPage)
    }
  }

  public object Registrants : Adapter<GetEventViewDataQuery.Registrants> {
    public val RESPONSE_NAMES: kotlin.collections.List<String> = listOf("pageInfo", "list")

    public override fun fromJson(reader: JsonReader, customScalarAdapters: CustomScalarAdapters):
        GetEventViewDataQuery.Registrants {
      var _pageInfo: GetEventViewDataQuery.PageInfo? = null
      var _list: kotlin.collections.List<GetEventViewDataQuery.List>? = null

      while(true) {
        when (reader.selectName(RESPONSE_NAMES)) {
          0 -> _pageInfo = PageInfo.obj(true).fromJson(reader, customScalarAdapters)
          1 -> _list = List.obj().list().fromJson(reader, customScalarAdapters)
          else -> break
        }
      }

      return GetEventViewDataQuery.Registrants(
        pageInfo = _pageInfo!!,
        list = _list!!
      )
    }

    public override fun toJson(
      writer: JsonWriter,
      customScalarAdapters: CustomScalarAdapters,
      `value`: GetEventViewDataQuery.Registrants,
    ): Unit {
      writer.name("pageInfo")
      PageInfo.obj(true).toJson(writer, customScalarAdapters, value.pageInfo)

      writer.name("list")
      List.obj().list().toJson(writer, customScalarAdapters, value.list)
    }
  }

  public object PageInfo : Adapter<GetEventViewDataQuery.PageInfo> {
    public val RESPONSE_NAMES: kotlin.collections.List<String> = listOf("__typename")

    public override fun fromJson(reader: JsonReader, customScalarAdapters: CustomScalarAdapters):
        GetEventViewDataQuery.PageInfo {
      var __typename: String? = null

      while(true) {
        when (reader.selectName(RESPONSE_NAMES)) {
          0 -> __typename = StringAdapter.fromJson(reader, customScalarAdapters)
          else -> break
        }
      }

      reader.rewind()
      val _pageInfo = com.cyberconnect.link3.fragment.PageInfoImpl_ResponseAdapter.PageInfo.fromJson(reader,
          customScalarAdapters)

      return GetEventViewDataQuery.PageInfo(
        __typename = __typename!!,
        pageInfo = _pageInfo
      )
    }

    public override fun toJson(
      writer: JsonWriter,
      customScalarAdapters: CustomScalarAdapters,
      `value`: GetEventViewDataQuery.PageInfo,
    ): Unit {
      writer.name("__typename")
      StringAdapter.toJson(writer, customScalarAdapters, value.__typename)

      com.cyberconnect.link3.fragment.PageInfoImpl_ResponseAdapter.PageInfo.toJson(writer,
          customScalarAdapters, value.pageInfo)
    }
  }

  public object List : Adapter<GetEventViewDataQuery.List> {
    public val RESPONSE_NAMES: kotlin.collections.List<String> = listOf("lightInfo")

    public override fun fromJson(reader: JsonReader, customScalarAdapters: CustomScalarAdapters):
        GetEventViewDataQuery.List {
      var _lightInfo: GetEventViewDataQuery.LightInfo1? = null

      while(true) {
        when (reader.selectName(RESPONSE_NAMES)) {
          0 -> _lightInfo = LightInfo1.obj().fromJson(reader, customScalarAdapters)
          else -> break
        }
      }

      return GetEventViewDataQuery.List(
        lightInfo = _lightInfo!!
      )
    }

    public override fun toJson(
      writer: JsonWriter,
      customScalarAdapters: CustomScalarAdapters,
      `value`: GetEventViewDataQuery.List,
    ): Unit {
      writer.name("lightInfo")
      LightInfo1.obj().toJson(writer, customScalarAdapters, value.lightInfo)
    }
  }

  public object LightInfo1 : Adapter<GetEventViewDataQuery.LightInfo1> {
    public val RESPONSE_NAMES: kotlin.collections.List<String> = listOf("handle", "avatar",
        "avatarFrameTokenId", "displayName", "formattedAddress")

    public override fun fromJson(reader: JsonReader, customScalarAdapters: CustomScalarAdapters):
        GetEventViewDataQuery.LightInfo1 {
      var _handle: String? = null
      var _avatar: String? = null
      var _avatarFrameTokenId: String? = null
      var _displayName: String? = null
      var _formattedAddress: String? = null

      while(true) {
        when (reader.selectName(RESPONSE_NAMES)) {
          0 -> _handle = StringAdapter.fromJson(reader, customScalarAdapters)
          1 -> _avatar = StringAdapter.fromJson(reader, customScalarAdapters)
          2 -> _avatarFrameTokenId = NullableStringAdapter.fromJson(reader, customScalarAdapters)
          3 -> _displayName = StringAdapter.fromJson(reader, customScalarAdapters)
          4 -> _formattedAddress = StringAdapter.fromJson(reader, customScalarAdapters)
          else -> break
        }
      }

      return GetEventViewDataQuery.LightInfo1(
        handle = _handle!!,
        avatar = _avatar!!,
        avatarFrameTokenId = _avatarFrameTokenId,
        displayName = _displayName!!,
        formattedAddress = _formattedAddress!!
      )
    }

    public override fun toJson(
      writer: JsonWriter,
      customScalarAdapters: CustomScalarAdapters,
      `value`: GetEventViewDataQuery.LightInfo1,
    ): Unit {
      writer.name("handle")
      StringAdapter.toJson(writer, customScalarAdapters, value.handle)

      writer.name("avatar")
      StringAdapter.toJson(writer, customScalarAdapters, value.avatar)

      writer.name("avatarFrameTokenId")
      NullableStringAdapter.toJson(writer, customScalarAdapters, value.avatarFrameTokenId)

      writer.name("displayName")
      StringAdapter.toJson(writer, customScalarAdapters, value.displayName)

      writer.name("formattedAddress")
      StringAdapter.toJson(writer, customScalarAdapters, value.formattedAddress)
    }
  }

  public object Raffle : Adapter<GetEventViewDataQuery.Raffle> {
    public val RESPONSE_NAMES: kotlin.collections.List<String> = listOf("__typename")

    public override fun fromJson(reader: JsonReader, customScalarAdapters: CustomScalarAdapters):
        GetEventViewDataQuery.Raffle {
      var __typename: String? = null

      while(true) {
        when (reader.selectName(RESPONSE_NAMES)) {
          0 -> __typename = StringAdapter.fromJson(reader, customScalarAdapters)
          else -> break
        }
      }

      reader.rewind()
      val _raffle = com.cyberconnect.link3.fragment.RaffleImpl_ResponseAdapter.Raffle.fromJson(reader,
          customScalarAdapters)

      return GetEventViewDataQuery.Raffle(
        __typename = __typename!!,
        raffle = _raffle
      )
    }

    public override fun toJson(
      writer: JsonWriter,
      customScalarAdapters: CustomScalarAdapters,
      `value`: GetEventViewDataQuery.Raffle,
    ): Unit {
      writer.name("__typename")
      StringAdapter.toJson(writer, customScalarAdapters, value.__typename)

      com.cyberconnect.link3.fragment.RaffleImpl_ResponseAdapter.Raffle.toJson(writer,
          customScalarAdapters, value.raffle)
    }
  }

  public object Location : Adapter<GetEventViewDataQuery.Location> {
    public val RESPONSE_NAMES: kotlin.collections.List<String> = listOf("__typename")

    public override fun fromJson(reader: JsonReader, customScalarAdapters: CustomScalarAdapters):
        GetEventViewDataQuery.Location {
      var __typename: String? = null

      while(true) {
        when (reader.selectName(RESPONSE_NAMES)) {
          0 -> __typename = StringAdapter.fromJson(reader, customScalarAdapters)
          else -> break
        }
      }

      check(__typename != null) {
        "__typename was not found"
      }

      var _onDiscordEvent: GetEventViewDataQuery.OnDiscordEvent? = null
      if (possibleTypes("DiscordEvent").evaluate(customScalarAdapters.adapterContext.variables(), __typename, customScalarAdapters.adapterContext, null)) {
        reader.rewind()
        _onDiscordEvent = com.cyberconnect.link3.adapter.GetEventViewDataQuery_ResponseAdapter.OnDiscordEvent.fromJson(reader,
            customScalarAdapters)
      }

      var _twitterSpaceEvent: TwitterSpaceEvent? = null
      if (possibleTypes("TwitterSpaceEvent").evaluate(customScalarAdapters.adapterContext.variables(), __typename, customScalarAdapters.adapterContext, null)) {
        reader.rewind()
        _twitterSpaceEvent = com.cyberconnect.link3.fragment.TwitterSpaceEventImpl_ResponseAdapter.TwitterSpaceEvent.fromJson(reader,
            customScalarAdapters)
      }

      var _discordEvent: DiscordEvent? = null
      if (possibleTypes("DiscordEvent").evaluate(customScalarAdapters.adapterContext.variables(), __typename, customScalarAdapters.adapterContext, null)) {
        reader.rewind()
        _discordEvent = com.cyberconnect.link3.fragment.DiscordEventImpl_ResponseAdapter.DiscordEvent.fromJson(reader,
            customScalarAdapters)
      }

      var _otherEvent: OtherEvent? = null
      if (possibleTypes("OtherEvent").evaluate(customScalarAdapters.adapterContext.variables(), __typename, customScalarAdapters.adapterContext, null)) {
        reader.rewind()
        _otherEvent = com.cyberconnect.link3.fragment.OtherEventImpl_ResponseAdapter.OtherEvent.fromJson(reader,
            customScalarAdapters)
      }

      return GetEventViewDataQuery.Location(
        __typename = __typename,
        onDiscordEvent = _onDiscordEvent,
        twitterSpaceEvent = _twitterSpaceEvent,
        discordEvent = _discordEvent,
        otherEvent = _otherEvent
      )
    }

    public override fun toJson(
      writer: JsonWriter,
      customScalarAdapters: CustomScalarAdapters,
      `value`: GetEventViewDataQuery.Location,
    ): Unit {
      writer.name("__typename")
      StringAdapter.toJson(writer, customScalarAdapters, value.__typename)

      if (value.onDiscordEvent != null) {
        com.cyberconnect.link3.adapter.GetEventViewDataQuery_ResponseAdapter.OnDiscordEvent.toJson(writer,
            customScalarAdapters, value.onDiscordEvent)
      }

      if (value.twitterSpaceEvent != null) {
        com.cyberconnect.link3.fragment.TwitterSpaceEventImpl_ResponseAdapter.TwitterSpaceEvent.toJson(writer,
            customScalarAdapters, value.twitterSpaceEvent)
      }

      if (value.discordEvent != null) {
        com.cyberconnect.link3.fragment.DiscordEventImpl_ResponseAdapter.DiscordEvent.toJson(writer,
            customScalarAdapters, value.discordEvent)
      }

      if (value.otherEvent != null) {
        com.cyberconnect.link3.fragment.OtherEventImpl_ResponseAdapter.OtherEvent.toJson(writer,
            customScalarAdapters, value.otherEvent)
      }
    }
  }

  public object OnDiscordEvent : Adapter<GetEventViewDataQuery.OnDiscordEvent> {
    public val RESPONSE_NAMES: kotlin.collections.List<String> = listOf("inviteLink")

    public override fun fromJson(reader: JsonReader, customScalarAdapters: CustomScalarAdapters):
        GetEventViewDataQuery.OnDiscordEvent {
      var _inviteLink: String? = null

      while(true) {
        when (reader.selectName(RESPONSE_NAMES)) {
          0 -> _inviteLink = StringAdapter.fromJson(reader, customScalarAdapters)
          else -> break
        }
      }

      return GetEventViewDataQuery.OnDiscordEvent(
        inviteLink = _inviteLink!!
      )
    }

    public override fun toJson(
      writer: JsonWriter,
      customScalarAdapters: CustomScalarAdapters,
      `value`: GetEventViewDataQuery.OnDiscordEvent,
    ): Unit {
      writer.name("inviteLink")
      StringAdapter.toJson(writer, customScalarAdapters, value.inviteLink)
    }
  }

  public object RecapLikeInfo : Adapter<GetEventViewDataQuery.RecapLikeInfo> {
    public val RESPONSE_NAMES: kotlin.collections.List<String> = listOf("likedCount", "isLiked")

    public override fun fromJson(reader: JsonReader, customScalarAdapters: CustomScalarAdapters):
        GetEventViewDataQuery.RecapLikeInfo {
      var _likedCount: Int? = null
      var _isLiked: Boolean? = null

      while(true) {
        when (reader.selectName(RESPONSE_NAMES)) {
          0 -> _likedCount = IntAdapter.fromJson(reader, customScalarAdapters)
          1 -> _isLiked = BooleanAdapter.fromJson(reader, customScalarAdapters)
          else -> break
        }
      }

      return GetEventViewDataQuery.RecapLikeInfo(
        likedCount = _likedCount!!,
        isLiked = _isLiked!!
      )
    }

    public override fun toJson(
      writer: JsonWriter,
      customScalarAdapters: CustomScalarAdapters,
      `value`: GetEventViewDataQuery.RecapLikeInfo,
    ): Unit {
      writer.name("likedCount")
      IntAdapter.toJson(writer, customScalarAdapters, value.likedCount)

      writer.name("isLiked")
      BooleanAdapter.toJson(writer, customScalarAdapters, value.isLiked)
    }
  }

  public object RegistrantsTokenHolding : Adapter<GetEventViewDataQuery.RegistrantsTokenHolding> {
    public val RESPONSE_NAMES: kotlin.collections.List<String> = listOf("collection", "logo",
        "ownedCount", "ownersCount")

    public override fun fromJson(reader: JsonReader, customScalarAdapters: CustomScalarAdapters):
        GetEventViewDataQuery.RegistrantsTokenHolding {
      var _collection: String? = null
      var _logo: Any? = null
      var _ownedCount: Int? = null
      var _ownersCount: Int? = null

      while(true) {
        when (reader.selectName(RESPONSE_NAMES)) {
          0 -> _collection = StringAdapter.fromJson(reader, customScalarAdapters)
          1 -> _logo = AnyAdapter.fromJson(reader, customScalarAdapters)
          2 -> _ownedCount = IntAdapter.fromJson(reader, customScalarAdapters)
          3 -> _ownersCount = IntAdapter.fromJson(reader, customScalarAdapters)
          else -> break
        }
      }

      return GetEventViewDataQuery.RegistrantsTokenHolding(
        collection = _collection!!,
        logo = _logo!!,
        ownedCount = _ownedCount!!,
        ownersCount = _ownersCount!!
      )
    }

    public override fun toJson(
      writer: JsonWriter,
      customScalarAdapters: CustomScalarAdapters,
      `value`: GetEventViewDataQuery.RegistrantsTokenHolding,
    ): Unit {
      writer.name("collection")
      StringAdapter.toJson(writer, customScalarAdapters, value.collection)

      writer.name("logo")
      AnyAdapter.toJson(writer, customScalarAdapters, value.logo)

      writer.name("ownedCount")
      IntAdapter.toJson(writer, customScalarAdapters, value.ownedCount)

      writer.name("ownersCount")
      IntAdapter.toJson(writer, customScalarAdapters, value.ownersCount)
    }
  }
}
