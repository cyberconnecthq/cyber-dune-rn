//
// AUTO-GENERATED FILE. DO NOT MODIFY.
//
// This class was automatically generated by Apollo GraphQL version '3.8.2'.
//
package com.cyberconnect.link3.adapter

import com.apollographql.apollo3.api.Adapter
import com.apollographql.apollo3.api.AnyAdapter
import com.apollographql.apollo3.api.BooleanAdapter
import com.apollographql.apollo3.api.CustomScalarAdapters
import com.apollographql.apollo3.api.IntAdapter
import com.apollographql.apollo3.api.NullableAnyAdapter
import com.apollographql.apollo3.api.NullableBooleanAdapter
import com.apollographql.apollo3.api.NullableIntAdapter
import com.apollographql.apollo3.api.NullableStringAdapter
import com.apollographql.apollo3.api.StringAdapter
import com.apollographql.apollo3.api.evaluate
import com.apollographql.apollo3.api.json.JsonReader
import com.apollographql.apollo3.api.json.JsonWriter
import com.apollographql.apollo3.api.list
import com.apollographql.apollo3.api.nullable
import com.apollographql.apollo3.api.obj
import com.apollographql.apollo3.api.possibleTypes
import com.cyberconnect.link3.GetPostQuery
import com.cyberconnect.link3.type.EssenceMwType
import com.cyberconnect.link3.type.adapter.EssenceMwType_ResponseAdapter
import kotlin.Any
import kotlin.Boolean
import kotlin.Int
import kotlin.String
import kotlin.Unit
import kotlin.collections.List

public object GetPostQuery_ResponseAdapter {
  public object Data : Adapter<GetPostQuery.Data> {
    public val RESPONSE_NAMES: List<String> = listOf("post")

    public override fun fromJson(reader: JsonReader, customScalarAdapters: CustomScalarAdapters):
        GetPostQuery.Data {
      var _post: GetPostQuery.Post? = null

      while(true) {
        when (reader.selectName(RESPONSE_NAMES)) {
          0 -> _post = Post.obj().nullable().fromJson(reader, customScalarAdapters)
          else -> break
        }
      }

      return GetPostQuery.Data(
        post = _post
      )
    }

    public override fun toJson(
      writer: JsonWriter,
      customScalarAdapters: CustomScalarAdapters,
      `value`: GetPostQuery.Data,
    ): Unit {
      writer.name("post")
      Post.obj().nullable().toJson(writer, customScalarAdapters, value.post)
    }
  }

  public object Post : Adapter<GetPostQuery.Post> {
    public val RESPONSE_NAMES: List<String> = listOf("id", "author", "profile", "title",
        "description", "body", "cover", "arweaveTxHash", "publishedAt", "commentVisible",
        "viewCount", "essence")

    public override fun fromJson(reader: JsonReader, customScalarAdapters: CustomScalarAdapters):
        GetPostQuery.Post {
      var _id: String? = null
      var _author: GetPostQuery.Author? = null
      var _profile: GetPostQuery.Profile? = null
      var _title: String? = null
      var _description: String? = null
      var _body: String? = null
      var _cover: Any? = null
      var _arweaveTxHash: String? = null
      var _publishedAt: Any? = null
      var _commentVisible: Boolean? = null
      var _viewCount: Int? = null
      var _essence: GetPostQuery.Essence? = null

      while(true) {
        when (reader.selectName(RESPONSE_NAMES)) {
          0 -> _id = StringAdapter.fromJson(reader, customScalarAdapters)
          1 -> _author = Author.obj(true).fromJson(reader, customScalarAdapters)
          2 -> _profile = Profile.obj(true).fromJson(reader, customScalarAdapters)
          3 -> _title = StringAdapter.fromJson(reader, customScalarAdapters)
          4 -> _description = StringAdapter.fromJson(reader, customScalarAdapters)
          5 -> _body = StringAdapter.fromJson(reader, customScalarAdapters)
          6 -> _cover = AnyAdapter.fromJson(reader, customScalarAdapters)
          7 -> _arweaveTxHash = StringAdapter.fromJson(reader, customScalarAdapters)
          8 -> _publishedAt = AnyAdapter.fromJson(reader, customScalarAdapters)
          9 -> _commentVisible = BooleanAdapter.fromJson(reader, customScalarAdapters)
          10 -> _viewCount = IntAdapter.fromJson(reader, customScalarAdapters)
          11 -> _essence = Essence.obj().nullable().fromJson(reader, customScalarAdapters)
          else -> break
        }
      }

      return GetPostQuery.Post(
        id = _id!!,
        author = _author!!,
        profile = _profile!!,
        title = _title!!,
        description = _description!!,
        body = _body!!,
        cover = _cover!!,
        arweaveTxHash = _arweaveTxHash!!,
        publishedAt = _publishedAt!!,
        commentVisible = _commentVisible!!,
        viewCount = _viewCount!!,
        essence = _essence
      )
    }

    public override fun toJson(
      writer: JsonWriter,
      customScalarAdapters: CustomScalarAdapters,
      `value`: GetPostQuery.Post,
    ): Unit {
      writer.name("id")
      StringAdapter.toJson(writer, customScalarAdapters, value.id)

      writer.name("author")
      Author.obj(true).toJson(writer, customScalarAdapters, value.author)

      writer.name("profile")
      Profile.obj(true).toJson(writer, customScalarAdapters, value.profile)

      writer.name("title")
      StringAdapter.toJson(writer, customScalarAdapters, value.title)

      writer.name("description")
      StringAdapter.toJson(writer, customScalarAdapters, value.description)

      writer.name("body")
      StringAdapter.toJson(writer, customScalarAdapters, value.body)

      writer.name("cover")
      AnyAdapter.toJson(writer, customScalarAdapters, value.cover)

      writer.name("arweaveTxHash")
      StringAdapter.toJson(writer, customScalarAdapters, value.arweaveTxHash)

      writer.name("publishedAt")
      AnyAdapter.toJson(writer, customScalarAdapters, value.publishedAt)

      writer.name("commentVisible")
      BooleanAdapter.toJson(writer, customScalarAdapters, value.commentVisible)

      writer.name("viewCount")
      IntAdapter.toJson(writer, customScalarAdapters, value.viewCount)

      writer.name("essence")
      Essence.obj().nullable().toJson(writer, customScalarAdapters, value.essence)
    }
  }

  public object Author : Adapter<GetPostQuery.Author> {
    public val RESPONSE_NAMES: List<String> = listOf("__typename")

    public override fun fromJson(reader: JsonReader, customScalarAdapters: CustomScalarAdapters):
        GetPostQuery.Author {
      var __typename: String? = null

      while(true) {
        when (reader.selectName(RESPONSE_NAMES)) {
          0 -> __typename = StringAdapter.fromJson(reader, customScalarAdapters)
          else -> break
        }
      }

      check(__typename != null) {
        "__typename was not found"
      }

      var _onOrganization: GetPostQuery.OnOrganization? = null
      if (possibleTypes("Organization").evaluate(customScalarAdapters.adapterContext.variables(), __typename, customScalarAdapters.adapterContext, null)) {
        reader.rewind()
        _onOrganization = com.cyberconnect.link3.adapter.GetPostQuery_ResponseAdapter.OnOrganization.fromJson(reader,
            customScalarAdapters)
      }

      var _onUser: GetPostQuery.OnUser? = null
      if (possibleTypes("User").evaluate(customScalarAdapters.adapterContext.variables(), __typename, customScalarAdapters.adapterContext, null)) {
        reader.rewind()
        _onUser = com.cyberconnect.link3.adapter.GetPostQuery_ResponseAdapter.OnUser.fromJson(reader,
            customScalarAdapters)
      }

      return GetPostQuery.Author(
        __typename = __typename,
        onOrganization = _onOrganization,
        onUser = _onUser
      )
    }

    public override fun toJson(
      writer: JsonWriter,
      customScalarAdapters: CustomScalarAdapters,
      `value`: GetPostQuery.Author,
    ): Unit {
      writer.name("__typename")
      StringAdapter.toJson(writer, customScalarAdapters, value.__typename)

      if (value.onOrganization != null) {
        com.cyberconnect.link3.adapter.GetPostQuery_ResponseAdapter.OnOrganization.toJson(writer,
            customScalarAdapters, value.onOrganization)
      }

      if (value.onUser != null) {
        com.cyberconnect.link3.adapter.GetPostQuery_ResponseAdapter.OnUser.toJson(writer,
            customScalarAdapters, value.onUser)
      }
    }
  }

  public object OnOrganization : Adapter<GetPostQuery.OnOrganization> {
    public val RESPONSE_NAMES: List<String> = listOf("__typename", "lightInfo")

    public override fun fromJson(reader: JsonReader, customScalarAdapters: CustomScalarAdapters):
        GetPostQuery.OnOrganization {
      var __typename: String? = null
      var _lightInfo: GetPostQuery.LightInfo? = null

      while(true) {
        when (reader.selectName(RESPONSE_NAMES)) {
          0 -> __typename = StringAdapter.fromJson(reader, customScalarAdapters)
          1 -> _lightInfo = LightInfo.obj().fromJson(reader, customScalarAdapters)
          else -> break
        }
      }

      return GetPostQuery.OnOrganization(
        __typename = __typename!!,
        lightInfo = _lightInfo!!
      )
    }

    public override fun toJson(
      writer: JsonWriter,
      customScalarAdapters: CustomScalarAdapters,
      `value`: GetPostQuery.OnOrganization,
    ): Unit {
      writer.name("__typename")
      StringAdapter.toJson(writer, customScalarAdapters, value.__typename)

      writer.name("lightInfo")
      LightInfo.obj().toJson(writer, customScalarAdapters, value.lightInfo)
    }
  }

  public object LightInfo : Adapter<GetPostQuery.LightInfo> {
    public val RESPONSE_NAMES: List<String> = listOf("displayName", "profileHandle",
        "profilePicture")

    public override fun fromJson(reader: JsonReader, customScalarAdapters: CustomScalarAdapters):
        GetPostQuery.LightInfo {
      var _displayName: String? = null
      var _profileHandle: String? = null
      var _profilePicture: String? = null

      while(true) {
        when (reader.selectName(RESPONSE_NAMES)) {
          0 -> _displayName = StringAdapter.fromJson(reader, customScalarAdapters)
          1 -> _profileHandle = StringAdapter.fromJson(reader, customScalarAdapters)
          2 -> _profilePicture = StringAdapter.fromJson(reader, customScalarAdapters)
          else -> break
        }
      }

      return GetPostQuery.LightInfo(
        displayName = _displayName!!,
        profileHandle = _profileHandle!!,
        profilePicture = _profilePicture!!
      )
    }

    public override fun toJson(
      writer: JsonWriter,
      customScalarAdapters: CustomScalarAdapters,
      `value`: GetPostQuery.LightInfo,
    ): Unit {
      writer.name("displayName")
      StringAdapter.toJson(writer, customScalarAdapters, value.displayName)

      writer.name("profileHandle")
      StringAdapter.toJson(writer, customScalarAdapters, value.profileHandle)

      writer.name("profilePicture")
      StringAdapter.toJson(writer, customScalarAdapters, value.profilePicture)
    }
  }

  public object OnUser : Adapter<GetPostQuery.OnUser> {
    public val RESPONSE_NAMES: List<String> = listOf("privateInfo")

    public override fun fromJson(reader: JsonReader, customScalarAdapters: CustomScalarAdapters):
        GetPostQuery.OnUser {
      var _privateInfo: GetPostQuery.PrivateInfo? = null

      while(true) {
        when (reader.selectName(RESPONSE_NAMES)) {
          0 -> _privateInfo = PrivateInfo.obj().nullable().fromJson(reader, customScalarAdapters)
          else -> break
        }
      }

      return GetPostQuery.OnUser(
        privateInfo = _privateInfo
      )
    }

    public override fun toJson(
      writer: JsonWriter,
      customScalarAdapters: CustomScalarAdapters,
      `value`: GetPostQuery.OnUser,
    ): Unit {
      writer.name("privateInfo")
      PrivateInfo.obj().nullable().toJson(writer, customScalarAdapters, value.privateInfo)
    }
  }

  public object PrivateInfo : Adapter<GetPostQuery.PrivateInfo> {
    public val RESPONSE_NAMES: List<String> = listOf("address")

    public override fun fromJson(reader: JsonReader, customScalarAdapters: CustomScalarAdapters):
        GetPostQuery.PrivateInfo {
      var _address: Any? = null

      while(true) {
        when (reader.selectName(RESPONSE_NAMES)) {
          0 -> _address = AnyAdapter.fromJson(reader, customScalarAdapters)
          else -> break
        }
      }

      return GetPostQuery.PrivateInfo(
        address = _address!!
      )
    }

    public override fun toJson(
      writer: JsonWriter,
      customScalarAdapters: CustomScalarAdapters,
      `value`: GetPostQuery.PrivateInfo,
    ): Unit {
      writer.name("address")
      AnyAdapter.toJson(writer, customScalarAdapters, value.address)
    }
  }

  public object Profile : Adapter<GetPostQuery.Profile> {
    public val RESPONSE_NAMES: List<String> = listOf("__typename", "id", "handle")

    public override fun fromJson(reader: JsonReader, customScalarAdapters: CustomScalarAdapters):
        GetPostQuery.Profile {
      var __typename: String? = null
      var _id: String? = null
      var _handle: String? = null

      while(true) {
        when (reader.selectName(RESPONSE_NAMES)) {
          0 -> __typename = StringAdapter.fromJson(reader, customScalarAdapters)
          1 -> _id = StringAdapter.fromJson(reader, customScalarAdapters)
          2 -> _handle = StringAdapter.fromJson(reader, customScalarAdapters)
          else -> break
        }
      }

      check(__typename != null) {
        "__typename was not found"
      }

      var _onPerProfile: GetPostQuery.OnPerProfile? = null
      if (possibleTypes("PerProfile").evaluate(customScalarAdapters.adapterContext.variables(), __typename, customScalarAdapters.adapterContext, null)) {
        reader.rewind()
        _onPerProfile = com.cyberconnect.link3.adapter.GetPostQuery_ResponseAdapter.OnPerProfile.fromJson(reader,
            customScalarAdapters)
      }

      var _onOrgProfile: GetPostQuery.OnOrgProfile? = null
      if (possibleTypes("OrgProfile").evaluate(customScalarAdapters.adapterContext.variables(), __typename, customScalarAdapters.adapterContext, null)) {
        reader.rewind()
        _onOrgProfile = com.cyberconnect.link3.adapter.GetPostQuery_ResponseAdapter.OnOrgProfile.fromJson(reader,
            customScalarAdapters)
      }

      return GetPostQuery.Profile(
        __typename = __typename,
        id = _id!!,
        handle = _handle!!,
        onPerProfile = _onPerProfile,
        onOrgProfile = _onOrgProfile
      )
    }

    public override fun toJson(
      writer: JsonWriter,
      customScalarAdapters: CustomScalarAdapters,
      `value`: GetPostQuery.Profile,
    ): Unit {
      writer.name("__typename")
      StringAdapter.toJson(writer, customScalarAdapters, value.__typename)

      writer.name("id")
      StringAdapter.toJson(writer, customScalarAdapters, value.id)

      writer.name("handle")
      StringAdapter.toJson(writer, customScalarAdapters, value.handle)

      if (value.onPerProfile != null) {
        com.cyberconnect.link3.adapter.GetPostQuery_ResponseAdapter.OnPerProfile.toJson(writer,
            customScalarAdapters, value.onPerProfile)
      }

      if (value.onOrgProfile != null) {
        com.cyberconnect.link3.adapter.GetPostQuery_ResponseAdapter.OnOrgProfile.toJson(writer,
            customScalarAdapters, value.onOrgProfile)
      }
    }
  }

  public object OnPerProfile : Adapter<GetPostQuery.OnPerProfile> {
    public val RESPONSE_NAMES: List<String> = listOf("bio", "personalDisplayName", "isFollowing",
        "personalprofilePicture")

    public override fun fromJson(reader: JsonReader, customScalarAdapters: CustomScalarAdapters):
        GetPostQuery.OnPerProfile {
      var _bio: String? = null
      var _personalDisplayName: GetPostQuery.PersonalDisplayName? = null
      var _isFollowing: Boolean? = null
      var _personalprofilePicture: GetPostQuery.PersonalprofilePicture? = null

      while(true) {
        when (reader.selectName(RESPONSE_NAMES)) {
          0 -> _bio = StringAdapter.fromJson(reader, customScalarAdapters)
          1 -> _personalDisplayName = PersonalDisplayName.obj().fromJson(reader,
              customScalarAdapters)
          2 -> _isFollowing = BooleanAdapter.fromJson(reader, customScalarAdapters)
          3 -> _personalprofilePicture = PersonalprofilePicture.obj().fromJson(reader,
              customScalarAdapters)
          else -> break
        }
      }

      return GetPostQuery.OnPerProfile(
        bio = _bio!!,
        personalDisplayName = _personalDisplayName!!,
        isFollowing = _isFollowing!!,
        personalprofilePicture = _personalprofilePicture!!
      )
    }

    public override fun toJson(
      writer: JsonWriter,
      customScalarAdapters: CustomScalarAdapters,
      `value`: GetPostQuery.OnPerProfile,
    ): Unit {
      writer.name("bio")
      StringAdapter.toJson(writer, customScalarAdapters, value.bio)

      writer.name("personalDisplayName")
      PersonalDisplayName.obj().toJson(writer, customScalarAdapters, value.personalDisplayName)

      writer.name("isFollowing")
      BooleanAdapter.toJson(writer, customScalarAdapters, value.isFollowing)

      writer.name("personalprofilePicture")
      PersonalprofilePicture.obj().toJson(writer, customScalarAdapters,
          value.personalprofilePicture)
    }
  }

  public object PersonalDisplayName : Adapter<GetPostQuery.PersonalDisplayName> {
    public val RESPONSE_NAMES: List<String> = listOf("displayName")

    public override fun fromJson(reader: JsonReader, customScalarAdapters: CustomScalarAdapters):
        GetPostQuery.PersonalDisplayName {
      var _displayName: String? = null

      while(true) {
        when (reader.selectName(RESPONSE_NAMES)) {
          0 -> _displayName = StringAdapter.fromJson(reader, customScalarAdapters)
          else -> break
        }
      }

      return GetPostQuery.PersonalDisplayName(
        displayName = _displayName!!
      )
    }

    public override fun toJson(
      writer: JsonWriter,
      customScalarAdapters: CustomScalarAdapters,
      `value`: GetPostQuery.PersonalDisplayName,
    ): Unit {
      writer.name("displayName")
      StringAdapter.toJson(writer, customScalarAdapters, value.displayName)
    }
  }

  public object PersonalprofilePicture : Adapter<GetPostQuery.PersonalprofilePicture> {
    public val RESPONSE_NAMES: List<String> = listOf("picture")

    public override fun fromJson(reader: JsonReader, customScalarAdapters: CustomScalarAdapters):
        GetPostQuery.PersonalprofilePicture {
      var _picture: String? = null

      while(true) {
        when (reader.selectName(RESPONSE_NAMES)) {
          0 -> _picture = NullableStringAdapter.fromJson(reader, customScalarAdapters)
          else -> break
        }
      }

      return GetPostQuery.PersonalprofilePicture(
        picture = _picture
      )
    }

    public override fun toJson(
      writer: JsonWriter,
      customScalarAdapters: CustomScalarAdapters,
      `value`: GetPostQuery.PersonalprofilePicture,
    ): Unit {
      writer.name("picture")
      NullableStringAdapter.toJson(writer, customScalarAdapters, value.picture)
    }
  }

  public object OnOrgProfile : Adapter<GetPostQuery.OnOrgProfile> {
    public val RESPONSE_NAMES: List<String> = listOf("bio", "displayName", "isFollowing",
        "profilePicture", "organization")

    public override fun fromJson(reader: JsonReader, customScalarAdapters: CustomScalarAdapters):
        GetPostQuery.OnOrgProfile {
      var _bio: String? = null
      var _displayName: String? = null
      var _isFollowing: Boolean? = null
      var _profilePicture: String? = null
      var _organization: GetPostQuery.Organization? = null

      while(true) {
        when (reader.selectName(RESPONSE_NAMES)) {
          0 -> _bio = StringAdapter.fromJson(reader, customScalarAdapters)
          1 -> _displayName = StringAdapter.fromJson(reader, customScalarAdapters)
          2 -> _isFollowing = BooleanAdapter.fromJson(reader, customScalarAdapters)
          3 -> _profilePicture = StringAdapter.fromJson(reader, customScalarAdapters)
          4 -> _organization = Organization.obj().fromJson(reader, customScalarAdapters)
          else -> break
        }
      }

      return GetPostQuery.OnOrgProfile(
        bio = _bio!!,
        displayName = _displayName!!,
        isFollowing = _isFollowing!!,
        profilePicture = _profilePicture!!,
        organization = _organization!!
      )
    }

    public override fun toJson(
      writer: JsonWriter,
      customScalarAdapters: CustomScalarAdapters,
      `value`: GetPostQuery.OnOrgProfile,
    ): Unit {
      writer.name("bio")
      StringAdapter.toJson(writer, customScalarAdapters, value.bio)

      writer.name("displayName")
      StringAdapter.toJson(writer, customScalarAdapters, value.displayName)

      writer.name("isFollowing")
      BooleanAdapter.toJson(writer, customScalarAdapters, value.isFollowing)

      writer.name("profilePicture")
      StringAdapter.toJson(writer, customScalarAdapters, value.profilePicture)

      writer.name("organization")
      Organization.obj().toJson(writer, customScalarAdapters, value.organization)
    }
  }

  public object Organization : Adapter<GetPostQuery.Organization> {
    public val RESPONSE_NAMES: List<String> = listOf("id")

    public override fun fromJson(reader: JsonReader, customScalarAdapters: CustomScalarAdapters):
        GetPostQuery.Organization {
      var _id: String? = null

      while(true) {
        when (reader.selectName(RESPONSE_NAMES)) {
          0 -> _id = StringAdapter.fromJson(reader, customScalarAdapters)
          else -> break
        }
      }

      return GetPostQuery.Organization(
        id = _id!!
      )
    }

    public override fun toJson(
      writer: JsonWriter,
      customScalarAdapters: CustomScalarAdapters,
      `value`: GetPostQuery.Organization,
    ): Unit {
      writer.name("id")
      StringAdapter.toJson(writer, customScalarAdapters, value.id)
    }
  }

  public object Essence : Adapter<GetPostQuery.Essence> {
    public val RESPONSE_NAMES: List<String> = listOf("contract", "tokenUri", "tokenId",
        "cyberAccount", "imageUrl", "chainId", "profileId", "essenceId", "mwType", "mwInfo",
        "postQuestion")

    public override fun fromJson(reader: JsonReader, customScalarAdapters: CustomScalarAdapters):
        GetPostQuery.Essence {
      var _contract: String? = null
      var _tokenUri: String? = null
      var _tokenId: Int? = null
      var _cyberAccount: Any? = null
      var _imageUrl: Any? = null
      var _chainId: Int? = null
      var _profileId: Int? = null
      var _essenceId: Int? = null
      var _mwType: EssenceMwType? = null
      var _mwInfo: GetPostQuery.MwInfo? = null
      var _postQuestion: GetPostQuery.PostQuestion? = null

      while(true) {
        when (reader.selectName(RESPONSE_NAMES)) {
          0 -> _contract = NullableStringAdapter.fromJson(reader, customScalarAdapters)
          1 -> _tokenUri = NullableStringAdapter.fromJson(reader, customScalarAdapters)
          2 -> _tokenId = IntAdapter.fromJson(reader, customScalarAdapters)
          3 -> _cyberAccount = AnyAdapter.fromJson(reader, customScalarAdapters)
          4 -> _imageUrl = AnyAdapter.fromJson(reader, customScalarAdapters)
          5 -> _chainId = IntAdapter.fromJson(reader, customScalarAdapters)
          6 -> _profileId = NullableIntAdapter.fromJson(reader, customScalarAdapters)
          7 -> _essenceId = NullableIntAdapter.fromJson(reader, customScalarAdapters)
          8 -> _mwType = EssenceMwType_ResponseAdapter.fromJson(reader, customScalarAdapters)
          9 -> _mwInfo = MwInfo.obj().fromJson(reader, customScalarAdapters)
          10 -> _postQuestion = PostQuestion.obj().nullable().fromJson(reader, customScalarAdapters)
          else -> break
        }
      }

      return GetPostQuery.Essence(
        contract = _contract,
        tokenUri = _tokenUri,
        tokenId = _tokenId!!,
        cyberAccount = _cyberAccount!!,
        imageUrl = _imageUrl!!,
        chainId = _chainId!!,
        profileId = _profileId,
        essenceId = _essenceId,
        mwType = _mwType!!,
        mwInfo = _mwInfo!!,
        postQuestion = _postQuestion
      )
    }

    public override fun toJson(
      writer: JsonWriter,
      customScalarAdapters: CustomScalarAdapters,
      `value`: GetPostQuery.Essence,
    ): Unit {
      writer.name("contract")
      NullableStringAdapter.toJson(writer, customScalarAdapters, value.contract)

      writer.name("tokenUri")
      NullableStringAdapter.toJson(writer, customScalarAdapters, value.tokenUri)

      writer.name("tokenId")
      IntAdapter.toJson(writer, customScalarAdapters, value.tokenId)

      writer.name("cyberAccount")
      AnyAdapter.toJson(writer, customScalarAdapters, value.cyberAccount)

      writer.name("imageUrl")
      AnyAdapter.toJson(writer, customScalarAdapters, value.imageUrl)

      writer.name("chainId")
      IntAdapter.toJson(writer, customScalarAdapters, value.chainId)

      writer.name("profileId")
      NullableIntAdapter.toJson(writer, customScalarAdapters, value.profileId)

      writer.name("essenceId")
      NullableIntAdapter.toJson(writer, customScalarAdapters, value.essenceId)

      writer.name("mwType")
      EssenceMwType_ResponseAdapter.toJson(writer, customScalarAdapters, value.mwType)

      writer.name("mwInfo")
      MwInfo.obj().toJson(writer, customScalarAdapters, value.mwInfo)

      writer.name("postQuestion")
      PostQuestion.obj().nullable().toJson(writer, customScalarAdapters, value.postQuestion)
    }
  }

  public object MwInfo : Adapter<GetPostQuery.MwInfo> {
    public val RESPONSE_NAMES: List<String> = listOf("currencyAddress", "endTime", "startTime",
        "mwAddress", "price", "profileRequired", "totalSupply")

    public override fun fromJson(reader: JsonReader, customScalarAdapters: CustomScalarAdapters):
        GetPostQuery.MwInfo {
      var _currencyAddress: String? = null
      var _endTime: Any? = null
      var _startTime: Any? = null
      var _mwAddress: String? = null
      var _price: String? = null
      var _profileRequired: Boolean? = null
      var _totalSupply: Int? = null

      while(true) {
        when (reader.selectName(RESPONSE_NAMES)) {
          0 -> _currencyAddress = NullableStringAdapter.fromJson(reader, customScalarAdapters)
          1 -> _endTime = NullableAnyAdapter.fromJson(reader, customScalarAdapters)
          2 -> _startTime = NullableAnyAdapter.fromJson(reader, customScalarAdapters)
          3 -> _mwAddress = NullableStringAdapter.fromJson(reader, customScalarAdapters)
          4 -> _price = NullableStringAdapter.fromJson(reader, customScalarAdapters)
          5 -> _profileRequired = NullableBooleanAdapter.fromJson(reader, customScalarAdapters)
          6 -> _totalSupply = IntAdapter.fromJson(reader, customScalarAdapters)
          else -> break
        }
      }

      return GetPostQuery.MwInfo(
        currencyAddress = _currencyAddress,
        endTime = _endTime,
        startTime = _startTime,
        mwAddress = _mwAddress,
        price = _price,
        profileRequired = _profileRequired,
        totalSupply = _totalSupply!!
      )
    }

    public override fun toJson(
      writer: JsonWriter,
      customScalarAdapters: CustomScalarAdapters,
      `value`: GetPostQuery.MwInfo,
    ): Unit {
      writer.name("currencyAddress")
      NullableStringAdapter.toJson(writer, customScalarAdapters, value.currencyAddress)

      writer.name("endTime")
      NullableAnyAdapter.toJson(writer, customScalarAdapters, value.endTime)

      writer.name("startTime")
      NullableAnyAdapter.toJson(writer, customScalarAdapters, value.startTime)

      writer.name("mwAddress")
      NullableStringAdapter.toJson(writer, customScalarAdapters, value.mwAddress)

      writer.name("price")
      NullableStringAdapter.toJson(writer, customScalarAdapters, value.price)

      writer.name("profileRequired")
      NullableBooleanAdapter.toJson(writer, customScalarAdapters, value.profileRequired)

      writer.name("totalSupply")
      IntAdapter.toJson(writer, customScalarAdapters, value.totalSupply)
    }
  }

  public object PostQuestion : Adapter<GetPostQuery.PostQuestion> {
    public val RESPONSE_NAMES: List<String> = listOf("questions", "options")

    public override fun fromJson(reader: JsonReader, customScalarAdapters: CustomScalarAdapters):
        GetPostQuery.PostQuestion {
      var _questions: List<String>? = null
      var _options: List<String>? = null

      while(true) {
        when (reader.selectName(RESPONSE_NAMES)) {
          0 -> _questions = StringAdapter.list().fromJson(reader, customScalarAdapters)
          1 -> _options = StringAdapter.list().fromJson(reader, customScalarAdapters)
          else -> break
        }
      }

      return GetPostQuery.PostQuestion(
        questions = _questions!!,
        options = _options!!
      )
    }

    public override fun toJson(
      writer: JsonWriter,
      customScalarAdapters: CustomScalarAdapters,
      `value`: GetPostQuery.PostQuestion,
    ): Unit {
      writer.name("questions")
      StringAdapter.list().toJson(writer, customScalarAdapters, value.questions)

      writer.name("options")
      StringAdapter.list().toJson(writer, customScalarAdapters, value.options)
    }
  }
}
