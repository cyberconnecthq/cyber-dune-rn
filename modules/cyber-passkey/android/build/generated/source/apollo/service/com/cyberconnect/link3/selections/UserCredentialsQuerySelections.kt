//
// AUTO-GENERATED FILE. DO NOT MODIFY.
//
// This class was automatically generated by Apollo GraphQL version '3.8.2'.
//
package com.cyberconnect.link3.selections

import com.apollographql.apollo3.api.CompiledArgument
import com.apollographql.apollo3.api.CompiledField
import com.apollographql.apollo3.api.CompiledSelection
import com.apollographql.apollo3.api.CompiledVariable
import com.apollographql.apollo3.api.list
import com.apollographql.apollo3.api.notNull
import com.cyberconnect.link3.type.Address
import com.cyberconnect.link3.type.Chain
import com.cyberconnect.link3.type.Cred
import com.cyberconnect.link3.type.CredConnection
import com.cyberconnect.link3.type.GraphQLID
import com.cyberconnect.link3.type.GraphQLInt
import com.cyberconnect.link3.type.GraphQLString
import kotlin.collections.List

public object UserCredentialsQuerySelections {
  private val __list: List<CompiledSelection> = listOf(
        CompiledField.Builder(
          name = "id",
          type = GraphQLID.type.notNull()
        ).build(),
        CompiledField.Builder(
          name = "name",
          type = GraphQLString.type.notNull()
        ).build(),
        CompiledField.Builder(
          name = "description",
          type = GraphQLString.type.notNull()
        ).build(),
        CompiledField.Builder(
          name = "chain",
          type = Chain.type.notNull()
        ).build(),
        CompiledField.Builder(
          name = "itemCount",
          type = GraphQLInt.type.notNull()
        ).build()
      )

  private val __addressEligibleCredentials: List<CompiledSelection> = listOf(
        CompiledField.Builder(
          name = "list",
          type = Cred.type.notNull().list().notNull()
        ).selections(__list)
        .build()
      )

  private val __addressInfo: List<CompiledSelection> = listOf(
        CompiledField.Builder(
          name = "addressEligibleCredentials",
          type = CredConnection.type.notNull()
        ).arguments(listOf(
          CompiledArgument.Builder("after", CompiledVariable("after")).build(),
          CompiledArgument.Builder("first", CompiledVariable("first")).build()
        ))
        .selections(__addressEligibleCredentials)
        .build()
      )

  public val __root: List<CompiledSelection> = listOf(
        CompiledField.Builder(
          name = "addressInfo",
          type = Address.type.notNull()
        ).arguments(listOf(
          CompiledArgument.Builder("address", CompiledVariable("address")).build()
        ))
        .selections(__addressInfo)
        .build()
      )
}
