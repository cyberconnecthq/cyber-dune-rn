//
// AUTO-GENERATED FILE. DO NOT MODIFY.
//
// This class was automatically generated by Apollo GraphQL version '3.8.2'.
//
package com.cyberconnect.link3.fragment

import com.apollographql.apollo3.api.Adapter
import com.apollographql.apollo3.api.BooleanAdapter
import com.apollographql.apollo3.api.CustomScalarAdapters
import com.apollographql.apollo3.api.IntAdapter
import com.apollographql.apollo3.api.NullableIntAdapter
import com.apollographql.apollo3.api.StringAdapter
import com.apollographql.apollo3.api.json.JsonReader
import com.apollographql.apollo3.api.json.JsonWriter
import com.apollographql.apollo3.api.nullable
import com.apollographql.apollo3.api.obj
import com.cyberconnect.link3.type.MessageStatus
import com.cyberconnect.link3.type.MessageType
import com.cyberconnect.link3.type.PaidStatus
import com.cyberconnect.link3.type.adapter.MessageStatus_ResponseAdapter
import com.cyberconnect.link3.type.adapter.MessageType_ResponseAdapter
import com.cyberconnect.link3.type.adapter.PaidStatus_ResponseAdapter
import kotlin.Boolean
import kotlin.Int
import kotlin.String
import kotlin.Unit
import kotlin.collections.List

public object PerMessageImpl_ResponseAdapter {
  public object PerMessage : Adapter<com.cyberconnect.link3.fragment.PerMessage> {
    public val RESPONSE_NAMES: List<String> = listOf("content", "id", "msgType", "paid", "sender",
        "chatUser", "msgTime", "replyToEarn", "status")

    public override fun fromJson(reader: JsonReader, customScalarAdapters: CustomScalarAdapters):
        com.cyberconnect.link3.fragment.PerMessage {
      var _content: String? = null
      var _id: String? = null
      var _msgType: MessageType? = null
      var _paid: com.cyberconnect.link3.fragment.PerMessage.Paid? = null
      var _sender: com.cyberconnect.link3.fragment.PerMessage.Sender? = null
      var _chatUser: com.cyberconnect.link3.fragment.PerMessage.ChatUser? = null
      var _msgTime: Int? = null
      var _replyToEarn: Boolean? = null
      var _status: MessageStatus? = null

      while(true) {
        when (reader.selectName(RESPONSE_NAMES)) {
          0 -> _content = StringAdapter.fromJson(reader, customScalarAdapters)
          1 -> _id = StringAdapter.fromJson(reader, customScalarAdapters)
          2 -> _msgType = MessageType_ResponseAdapter.fromJson(reader, customScalarAdapters)
          3 -> _paid = Paid.obj().fromJson(reader, customScalarAdapters)
          4 -> _sender = Sender.obj().fromJson(reader, customScalarAdapters)
          5 -> _chatUser = ChatUser.obj().fromJson(reader, customScalarAdapters)
          6 -> _msgTime = IntAdapter.fromJson(reader, customScalarAdapters)
          7 -> _replyToEarn = BooleanAdapter.fromJson(reader, customScalarAdapters)
          8 -> _status = MessageStatus_ResponseAdapter.fromJson(reader, customScalarAdapters)
          else -> break
        }
      }

      return com.cyberconnect.link3.fragment.PerMessage(
        content = _content!!,
        id = _id!!,
        msgType = _msgType!!,
        paid = _paid!!,
        sender = _sender!!,
        chatUser = _chatUser!!,
        msgTime = _msgTime!!,
        replyToEarn = _replyToEarn!!,
        status = _status!!
      )
    }

    public override fun toJson(
      writer: JsonWriter,
      customScalarAdapters: CustomScalarAdapters,
      `value`: com.cyberconnect.link3.fragment.PerMessage,
    ): Unit {
      writer.name("content")
      StringAdapter.toJson(writer, customScalarAdapters, value.content)

      writer.name("id")
      StringAdapter.toJson(writer, customScalarAdapters, value.id)

      writer.name("msgType")
      MessageType_ResponseAdapter.toJson(writer, customScalarAdapters, value.msgType)

      writer.name("paid")
      Paid.obj().toJson(writer, customScalarAdapters, value.paid)

      writer.name("sender")
      Sender.obj().toJson(writer, customScalarAdapters, value.sender)

      writer.name("chatUser")
      ChatUser.obj().toJson(writer, customScalarAdapters, value.chatUser)

      writer.name("msgTime")
      IntAdapter.toJson(writer, customScalarAdapters, value.msgTime)

      writer.name("replyToEarn")
      BooleanAdapter.toJson(writer, customScalarAdapters, value.replyToEarn)

      writer.name("status")
      MessageStatus_ResponseAdapter.toJson(writer, customScalarAdapters, value.status)
    }
  }

  public object Paid : Adapter<com.cyberconnect.link3.fragment.PerMessage.Paid> {
    public val RESPONSE_NAMES: List<String> = listOf("earnValue", "status", "value", "refundAt")

    public override fun fromJson(reader: JsonReader, customScalarAdapters: CustomScalarAdapters):
        com.cyberconnect.link3.fragment.PerMessage.Paid {
      var _earnValue: com.cyberconnect.link3.fragment.PerMessage.EarnValue? = null
      var _status: PaidStatus? = null
      var _value: com.cyberconnect.link3.fragment.PerMessage.Value? = null
      var _refundAt: Int? = null

      while(true) {
        when (reader.selectName(RESPONSE_NAMES)) {
          0 -> _earnValue = EarnValue.obj(true).nullable().fromJson(reader, customScalarAdapters)
          1 -> _status = PaidStatus_ResponseAdapter.fromJson(reader, customScalarAdapters)
          2 -> _value = Value.obj(true).nullable().fromJson(reader, customScalarAdapters)
          3 -> _refundAt = NullableIntAdapter.fromJson(reader, customScalarAdapters)
          else -> break
        }
      }

      return com.cyberconnect.link3.fragment.PerMessage.Paid(
        earnValue = _earnValue,
        status = _status!!,
        `value` = _value,
        refundAt = _refundAt
      )
    }

    public override fun toJson(
      writer: JsonWriter,
      customScalarAdapters: CustomScalarAdapters,
      `value`: com.cyberconnect.link3.fragment.PerMessage.Paid,
    ): Unit {
      writer.name("earnValue")
      EarnValue.obj(true).nullable().toJson(writer, customScalarAdapters, value.earnValue)

      writer.name("status")
      PaidStatus_ResponseAdapter.toJson(writer, customScalarAdapters, value.status)

      writer.name("value")
      Value.obj(true).nullable().toJson(writer, customScalarAdapters, value.`value`)

      writer.name("refundAt")
      NullableIntAdapter.toJson(writer, customScalarAdapters, value.refundAt)
    }
  }

  public object EarnValue : Adapter<com.cyberconnect.link3.fragment.PerMessage.EarnValue> {
    public val RESPONSE_NAMES: List<String> = listOf("__typename")

    public override fun fromJson(reader: JsonReader, customScalarAdapters: CustomScalarAdapters):
        com.cyberconnect.link3.fragment.PerMessage.EarnValue {
      var __typename: String? = null

      while(true) {
        when (reader.selectName(RESPONSE_NAMES)) {
          0 -> __typename = StringAdapter.fromJson(reader, customScalarAdapters)
          else -> break
        }
      }

      reader.rewind()
      val _price = com.cyberconnect.link3.fragment.PriceImpl_ResponseAdapter.Price.fromJson(reader,
          customScalarAdapters)

      return com.cyberconnect.link3.fragment.PerMessage.EarnValue(
        __typename = __typename!!,
        price = _price
      )
    }

    public override fun toJson(
      writer: JsonWriter,
      customScalarAdapters: CustomScalarAdapters,
      `value`: com.cyberconnect.link3.fragment.PerMessage.EarnValue,
    ): Unit {
      writer.name("__typename")
      StringAdapter.toJson(writer, customScalarAdapters, value.__typename)

      com.cyberconnect.link3.fragment.PriceImpl_ResponseAdapter.Price.toJson(writer,
          customScalarAdapters, value.price)
    }
  }

  public object Value : Adapter<com.cyberconnect.link3.fragment.PerMessage.Value> {
    public val RESPONSE_NAMES: List<String> = listOf("__typename")

    public override fun fromJson(reader: JsonReader, customScalarAdapters: CustomScalarAdapters):
        com.cyberconnect.link3.fragment.PerMessage.Value {
      var __typename: String? = null

      while(true) {
        when (reader.selectName(RESPONSE_NAMES)) {
          0 -> __typename = StringAdapter.fromJson(reader, customScalarAdapters)
          else -> break
        }
      }

      reader.rewind()
      val _price = com.cyberconnect.link3.fragment.PriceImpl_ResponseAdapter.Price.fromJson(reader,
          customScalarAdapters)

      return com.cyberconnect.link3.fragment.PerMessage.Value(
        __typename = __typename!!,
        price = _price
      )
    }

    public override fun toJson(
      writer: JsonWriter,
      customScalarAdapters: CustomScalarAdapters,
      `value`: com.cyberconnect.link3.fragment.PerMessage.Value,
    ): Unit {
      writer.name("__typename")
      StringAdapter.toJson(writer, customScalarAdapters, value.__typename)

      com.cyberconnect.link3.fragment.PriceImpl_ResponseAdapter.Price.toJson(writer,
          customScalarAdapters, value.price)
    }
  }

  public object Sender : Adapter<com.cyberconnect.link3.fragment.PerMessage.Sender> {
    public val RESPONSE_NAMES: List<String> = listOf("lightInfo")

    public override fun fromJson(reader: JsonReader, customScalarAdapters: CustomScalarAdapters):
        com.cyberconnect.link3.fragment.PerMessage.Sender {
      var _lightInfo: com.cyberconnect.link3.fragment.PerMessage.LightInfo? = null

      while(true) {
        when (reader.selectName(RESPONSE_NAMES)) {
          0 -> _lightInfo = LightInfo.obj().fromJson(reader, customScalarAdapters)
          else -> break
        }
      }

      return com.cyberconnect.link3.fragment.PerMessage.Sender(
        lightInfo = _lightInfo!!
      )
    }

    public override fun toJson(
      writer: JsonWriter,
      customScalarAdapters: CustomScalarAdapters,
      `value`: com.cyberconnect.link3.fragment.PerMessage.Sender,
    ): Unit {
      writer.name("lightInfo")
      LightInfo.obj().toJson(writer, customScalarAdapters, value.lightInfo)
    }
  }

  public object LightInfo : Adapter<com.cyberconnect.link3.fragment.PerMessage.LightInfo> {
    public val RESPONSE_NAMES: List<String> = listOf("displayName", "handle", "avatar")

    public override fun fromJson(reader: JsonReader, customScalarAdapters: CustomScalarAdapters):
        com.cyberconnect.link3.fragment.PerMessage.LightInfo {
      var _displayName: String? = null
      var _handle: String? = null
      var _avatar: String? = null

      while(true) {
        when (reader.selectName(RESPONSE_NAMES)) {
          0 -> _displayName = StringAdapter.fromJson(reader, customScalarAdapters)
          1 -> _handle = StringAdapter.fromJson(reader, customScalarAdapters)
          2 -> _avatar = StringAdapter.fromJson(reader, customScalarAdapters)
          else -> break
        }
      }

      return com.cyberconnect.link3.fragment.PerMessage.LightInfo(
        displayName = _displayName!!,
        handle = _handle!!,
        avatar = _avatar!!
      )
    }

    public override fun toJson(
      writer: JsonWriter,
      customScalarAdapters: CustomScalarAdapters,
      `value`: com.cyberconnect.link3.fragment.PerMessage.LightInfo,
    ): Unit {
      writer.name("displayName")
      StringAdapter.toJson(writer, customScalarAdapters, value.displayName)

      writer.name("handle")
      StringAdapter.toJson(writer, customScalarAdapters, value.handle)

      writer.name("avatar")
      StringAdapter.toJson(writer, customScalarAdapters, value.avatar)
    }
  }

  public object ChatUser : Adapter<com.cyberconnect.link3.fragment.PerMessage.ChatUser> {
    public val RESPONSE_NAMES: List<String> = listOf("lightInfo")

    public override fun fromJson(reader: JsonReader, customScalarAdapters: CustomScalarAdapters):
        com.cyberconnect.link3.fragment.PerMessage.ChatUser {
      var _lightInfo: com.cyberconnect.link3.fragment.PerMessage.LightInfo1? = null

      while(true) {
        when (reader.selectName(RESPONSE_NAMES)) {
          0 -> _lightInfo = LightInfo1.obj().fromJson(reader, customScalarAdapters)
          else -> break
        }
      }

      return com.cyberconnect.link3.fragment.PerMessage.ChatUser(
        lightInfo = _lightInfo!!
      )
    }

    public override fun toJson(
      writer: JsonWriter,
      customScalarAdapters: CustomScalarAdapters,
      `value`: com.cyberconnect.link3.fragment.PerMessage.ChatUser,
    ): Unit {
      writer.name("lightInfo")
      LightInfo1.obj().toJson(writer, customScalarAdapters, value.lightInfo)
    }
  }

  public object LightInfo1 : Adapter<com.cyberconnect.link3.fragment.PerMessage.LightInfo1> {
    public val RESPONSE_NAMES: List<String> = listOf("displayName", "handle", "avatar")

    public override fun fromJson(reader: JsonReader, customScalarAdapters: CustomScalarAdapters):
        com.cyberconnect.link3.fragment.PerMessage.LightInfo1 {
      var _displayName: String? = null
      var _handle: String? = null
      var _avatar: String? = null

      while(true) {
        when (reader.selectName(RESPONSE_NAMES)) {
          0 -> _displayName = StringAdapter.fromJson(reader, customScalarAdapters)
          1 -> _handle = StringAdapter.fromJson(reader, customScalarAdapters)
          2 -> _avatar = StringAdapter.fromJson(reader, customScalarAdapters)
          else -> break
        }
      }

      return com.cyberconnect.link3.fragment.PerMessage.LightInfo1(
        displayName = _displayName!!,
        handle = _handle!!,
        avatar = _avatar!!
      )
    }

    public override fun toJson(
      writer: JsonWriter,
      customScalarAdapters: CustomScalarAdapters,
      `value`: com.cyberconnect.link3.fragment.PerMessage.LightInfo1,
    ): Unit {
      writer.name("displayName")
      StringAdapter.toJson(writer, customScalarAdapters, value.displayName)

      writer.name("handle")
      StringAdapter.toJson(writer, customScalarAdapters, value.handle)

      writer.name("avatar")
      StringAdapter.toJson(writer, customScalarAdapters, value.avatar)
    }
  }
}
