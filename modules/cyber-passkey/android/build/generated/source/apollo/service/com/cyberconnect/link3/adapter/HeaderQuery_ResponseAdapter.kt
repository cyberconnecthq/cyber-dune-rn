//
// AUTO-GENERATED FILE. DO NOT MODIFY.
//
// This class was automatically generated by Apollo GraphQL version '3.8.2'.
//
package com.cyberconnect.link3.adapter

import com.apollographql.apollo3.api.Adapter
import com.apollographql.apollo3.api.AnyAdapter
import com.apollographql.apollo3.api.BooleanAdapter
import com.apollographql.apollo3.api.CustomScalarAdapters
import com.apollographql.apollo3.api.IntAdapter
import com.apollographql.apollo3.api.NullableStringAdapter
import com.apollographql.apollo3.api.StringAdapter
import com.apollographql.apollo3.api.evaluate
import com.apollographql.apollo3.api.json.JsonReader
import com.apollographql.apollo3.api.json.JsonWriter
import com.apollographql.apollo3.api.list
import com.apollographql.apollo3.api.nullable
import com.apollographql.apollo3.api.obj
import com.apollographql.apollo3.api.possibleTypes
import com.cyberconnect.link3.HeaderQuery
import com.cyberconnect.link3.type.Attestation_Status
import com.cyberconnect.link3.type.Attestation_Type
import com.cyberconnect.link3.type.BlockType
import com.cyberconnect.link3.type.HeadlineType
import com.cyberconnect.link3.type.MeResponse_Status
import com.cyberconnect.link3.type.PersonalDisplayName_Type
import com.cyberconnect.link3.type.adapter.Attestation_Status_ResponseAdapter
import com.cyberconnect.link3.type.adapter.Attestation_Type_ResponseAdapter
import com.cyberconnect.link3.type.adapter.BlockType_ResponseAdapter
import com.cyberconnect.link3.type.adapter.HeadlineType_ResponseAdapter
import com.cyberconnect.link3.type.adapter.MeResponse_Status_ResponseAdapter
import com.cyberconnect.link3.type.adapter.PersonalDisplayName_Type_ResponseAdapter
import kotlin.Any
import kotlin.Boolean
import kotlin.Int
import kotlin.String
import kotlin.Unit
import kotlin.collections.List

public object HeaderQuery_ResponseAdapter {
  public object Data : Adapter<HeaderQuery.Data> {
    public val RESPONSE_NAMES: List<String> = listOf("me")

    public override fun fromJson(reader: JsonReader, customScalarAdapters: CustomScalarAdapters):
        HeaderQuery.Data {
      var _me: HeaderQuery.Me? = null

      while(true) {
        when (reader.selectName(RESPONSE_NAMES)) {
          0 -> _me = Me.obj().fromJson(reader, customScalarAdapters)
          else -> break
        }
      }

      return HeaderQuery.Data(
        me = _me!!
      )
    }

    public override fun toJson(
      writer: JsonWriter,
      customScalarAdapters: CustomScalarAdapters,
      `value`: HeaderQuery.Data,
    ): Unit {
      writer.name("me")
      Me.obj().toJson(writer, customScalarAdapters, value.me)
    }
  }

  public object Me : Adapter<HeaderQuery.Me> {
    public val RESPONSE_NAMES: List<String> = listOf("status", "message", "data")

    public override fun fromJson(reader: JsonReader, customScalarAdapters: CustomScalarAdapters):
        HeaderQuery.Me {
      var _status: MeResponse_Status? = null
      var _message: String? = null
      var _data: HeaderQuery.Data1? = null

      while(true) {
        when (reader.selectName(RESPONSE_NAMES)) {
          0 -> _status = MeResponse_Status_ResponseAdapter.fromJson(reader, customScalarAdapters)
          1 -> _message = StringAdapter.fromJson(reader, customScalarAdapters)
          2 -> _data = Data1.obj().nullable().fromJson(reader, customScalarAdapters)
          else -> break
        }
      }

      return HeaderQuery.Me(
        status = _status!!,
        message = _message!!,
        `data` = _data
      )
    }

    public override fun toJson(
      writer: JsonWriter,
      customScalarAdapters: CustomScalarAdapters,
      `value`: HeaderQuery.Me,
    ): Unit {
      writer.name("status")
      MeResponse_Status_ResponseAdapter.toJson(writer, customScalarAdapters, value.status)

      writer.name("message")
      StringAdapter.toJson(writer, customScalarAdapters, value.message)

      writer.name("data")
      Data1.obj().nullable().toJson(writer, customScalarAdapters, value.`data`)
    }
  }

  public object Data1 : Adapter<HeaderQuery.Data1> {
    public val RESPONSE_NAMES: List<String> = listOf("id", "totalEarned", "profile", "lightInfo",
        "privateInfo", "v3Info", "cyberIds", "turnkeyUserInfo", "chatUser", "dmCreditAccount",
        "pointAccount")

    public override fun fromJson(reader: JsonReader, customScalarAdapters: CustomScalarAdapters):
        HeaderQuery.Data1 {
      var _id: String? = null
      var _totalEarned: HeaderQuery.TotalEarned? = null
      var _profile: HeaderQuery.Profile? = null
      var _lightInfo: HeaderQuery.LightInfo? = null
      var _privateInfo: HeaderQuery.PrivateInfo? = null
      var _v3Info: HeaderQuery.V3Info? = null
      var _cyberIds: List<HeaderQuery.CyberId>? = null
      var _turnkeyUserInfo: HeaderQuery.TurnkeyUserInfo? = null
      var _chatUser: HeaderQuery.ChatUser? = null
      var _dmCreditAccount: HeaderQuery.DmCreditAccount? = null
      var _pointAccount: HeaderQuery.PointAccount? = null

      while(true) {
        when (reader.selectName(RESPONSE_NAMES)) {
          0 -> _id = StringAdapter.fromJson(reader, customScalarAdapters)
          1 -> _totalEarned = TotalEarned.obj().fromJson(reader, customScalarAdapters)
          2 -> _profile = Profile.obj(true).nullable().fromJson(reader, customScalarAdapters)
          3 -> _lightInfo = LightInfo.obj().fromJson(reader, customScalarAdapters)
          4 -> _privateInfo = PrivateInfo.obj().nullable().fromJson(reader, customScalarAdapters)
          5 -> _v3Info = V3Info.obj().nullable().fromJson(reader, customScalarAdapters)
          6 -> _cyberIds = CyberId.obj().list().fromJson(reader, customScalarAdapters)
          7 -> _turnkeyUserInfo = TurnkeyUserInfo.obj().nullable().fromJson(reader,
              customScalarAdapters)
          8 -> _chatUser = ChatUser.obj().nullable().fromJson(reader, customScalarAdapters)
          9 -> _dmCreditAccount = DmCreditAccount.obj().fromJson(reader, customScalarAdapters)
          10 -> _pointAccount = PointAccount.obj().fromJson(reader, customScalarAdapters)
          else -> break
        }
      }

      return HeaderQuery.Data1(
        id = _id!!,
        totalEarned = _totalEarned!!,
        profile = _profile,
        lightInfo = _lightInfo!!,
        privateInfo = _privateInfo,
        v3Info = _v3Info,
        cyberIds = _cyberIds!!,
        turnkeyUserInfo = _turnkeyUserInfo,
        chatUser = _chatUser,
        dmCreditAccount = _dmCreditAccount!!,
        pointAccount = _pointAccount!!
      )
    }

    public override fun toJson(
      writer: JsonWriter,
      customScalarAdapters: CustomScalarAdapters,
      `value`: HeaderQuery.Data1,
    ): Unit {
      writer.name("id")
      StringAdapter.toJson(writer, customScalarAdapters, value.id)

      writer.name("totalEarned")
      TotalEarned.obj().toJson(writer, customScalarAdapters, value.totalEarned)

      writer.name("profile")
      Profile.obj(true).nullable().toJson(writer, customScalarAdapters, value.profile)

      writer.name("lightInfo")
      LightInfo.obj().toJson(writer, customScalarAdapters, value.lightInfo)

      writer.name("privateInfo")
      PrivateInfo.obj().nullable().toJson(writer, customScalarAdapters, value.privateInfo)

      writer.name("v3Info")
      V3Info.obj().nullable().toJson(writer, customScalarAdapters, value.v3Info)

      writer.name("cyberIds")
      CyberId.obj().list().toJson(writer, customScalarAdapters, value.cyberIds)

      writer.name("turnkeyUserInfo")
      TurnkeyUserInfo.obj().nullable().toJson(writer, customScalarAdapters, value.turnkeyUserInfo)

      writer.name("chatUser")
      ChatUser.obj().nullable().toJson(writer, customScalarAdapters, value.chatUser)

      writer.name("dmCreditAccount")
      DmCreditAccount.obj().toJson(writer, customScalarAdapters, value.dmCreditAccount)

      writer.name("pointAccount")
      PointAccount.obj().toJson(writer, customScalarAdapters, value.pointAccount)
    }
  }

  public object TotalEarned : Adapter<HeaderQuery.TotalEarned> {
    public val RESPONSE_NAMES: List<String> = listOf("value", "decimal", "currency")

    public override fun fromJson(reader: JsonReader, customScalarAdapters: CustomScalarAdapters):
        HeaderQuery.TotalEarned {
      var _value: String? = null
      var _decimal: Int? = null
      var _currency: String? = null

      while(true) {
        when (reader.selectName(RESPONSE_NAMES)) {
          0 -> _value = StringAdapter.fromJson(reader, customScalarAdapters)
          1 -> _decimal = IntAdapter.fromJson(reader, customScalarAdapters)
          2 -> _currency = StringAdapter.fromJson(reader, customScalarAdapters)
          else -> break
        }
      }

      return HeaderQuery.TotalEarned(
        `value` = _value!!,
        decimal = _decimal!!,
        currency = _currency!!
      )
    }

    public override fun toJson(
      writer: JsonWriter,
      customScalarAdapters: CustomScalarAdapters,
      `value`: HeaderQuery.TotalEarned,
    ): Unit {
      writer.name("value")
      StringAdapter.toJson(writer, customScalarAdapters, value.`value`)

      writer.name("decimal")
      IntAdapter.toJson(writer, customScalarAdapters, value.decimal)

      writer.name("currency")
      StringAdapter.toJson(writer, customScalarAdapters, value.currency)
    }
  }

  public object Profile : Adapter<HeaderQuery.Profile> {
    public val RESPONSE_NAMES: List<String> = listOf("__typename")

    public override fun fromJson(reader: JsonReader, customScalarAdapters: CustomScalarAdapters):
        HeaderQuery.Profile {
      var __typename: String? = null

      while(true) {
        when (reader.selectName(RESPONSE_NAMES)) {
          0 -> __typename = StringAdapter.fromJson(reader, customScalarAdapters)
          else -> break
        }
      }

      check(__typename != null) {
        "__typename was not found"
      }

      var _onPerProfile: HeaderQuery.OnPerProfile? = null
      if (possibleTypes("PerProfile").evaluate(customScalarAdapters.adapterContext.variables(), __typename, customScalarAdapters.adapterContext, null)) {
        reader.rewind()
        _onPerProfile = com.cyberconnect.link3.adapter.HeaderQuery_ResponseAdapter.OnPerProfile.fromJson(reader,
            customScalarAdapters)
      }

      return HeaderQuery.Profile(
        __typename = __typename,
        onPerProfile = _onPerProfile
      )
    }

    public override fun toJson(
      writer: JsonWriter,
      customScalarAdapters: CustomScalarAdapters,
      `value`: HeaderQuery.Profile,
    ): Unit {
      writer.name("__typename")
      StringAdapter.toJson(writer, customScalarAdapters, value.__typename)

      if (value.onPerProfile != null) {
        com.cyberconnect.link3.adapter.HeaderQuery_ResponseAdapter.OnPerProfile.toJson(writer,
            customScalarAdapters, value.onPerProfile)
      }
    }
  }

  public object OnPerProfile : Adapter<HeaderQuery.OnPerProfile> {
    public val RESPONSE_NAMES: List<String> = listOf("id", "handle", "displayName", "headline",
        "isVerified", "identities", "blocks")

    public override fun fromJson(reader: JsonReader, customScalarAdapters: CustomScalarAdapters):
        HeaderQuery.OnPerProfile {
      var _id: String? = null
      var _handle: String? = null
      var _displayName: HeaderQuery.DisplayName? = null
      var _headline: HeaderQuery.Headline? = null
      var _isVerified: Boolean? = null
      var _identities: List<HeaderQuery.Identity>? = null
      var _blocks: List<HeaderQuery.Block>? = null

      while(true) {
        when (reader.selectName(RESPONSE_NAMES)) {
          0 -> _id = StringAdapter.fromJson(reader, customScalarAdapters)
          1 -> _handle = StringAdapter.fromJson(reader, customScalarAdapters)
          2 -> _displayName = DisplayName.obj().fromJson(reader, customScalarAdapters)
          3 -> _headline = Headline.obj().fromJson(reader, customScalarAdapters)
          4 -> _isVerified = BooleanAdapter.fromJson(reader, customScalarAdapters)
          5 -> _identities = Identity.obj().list().nullable().fromJson(reader, customScalarAdapters)
          6 -> _blocks = Block.obj().list().fromJson(reader, customScalarAdapters)
          else -> break
        }
      }

      return HeaderQuery.OnPerProfile(
        id = _id!!,
        handle = _handle!!,
        displayName = _displayName!!,
        headline = _headline!!,
        isVerified = _isVerified!!,
        identities = _identities,
        blocks = _blocks!!
      )
    }

    public override fun toJson(
      writer: JsonWriter,
      customScalarAdapters: CustomScalarAdapters,
      `value`: HeaderQuery.OnPerProfile,
    ): Unit {
      writer.name("id")
      StringAdapter.toJson(writer, customScalarAdapters, value.id)

      writer.name("handle")
      StringAdapter.toJson(writer, customScalarAdapters, value.handle)

      writer.name("displayName")
      DisplayName.obj().toJson(writer, customScalarAdapters, value.displayName)

      writer.name("headline")
      Headline.obj().toJson(writer, customScalarAdapters, value.headline)

      writer.name("isVerified")
      BooleanAdapter.toJson(writer, customScalarAdapters, value.isVerified)

      writer.name("identities")
      Identity.obj().list().nullable().toJson(writer, customScalarAdapters, value.identities)

      writer.name("blocks")
      Block.obj().list().toJson(writer, customScalarAdapters, value.blocks)
    }
  }

  public object DisplayName : Adapter<HeaderQuery.DisplayName> {
    public val RESPONSE_NAMES: List<String> = listOf("type")

    public override fun fromJson(reader: JsonReader, customScalarAdapters: CustomScalarAdapters):
        HeaderQuery.DisplayName {
      var _type: PersonalDisplayName_Type? = null

      while(true) {
        when (reader.selectName(RESPONSE_NAMES)) {
          0 -> _type = PersonalDisplayName_Type_ResponseAdapter.fromJson(reader,
              customScalarAdapters)
          else -> break
        }
      }

      return HeaderQuery.DisplayName(
        type = _type!!
      )
    }

    public override fun toJson(
      writer: JsonWriter,
      customScalarAdapters: CustomScalarAdapters,
      `value`: HeaderQuery.DisplayName,
    ): Unit {
      writer.name("type")
      PersonalDisplayName_Type_ResponseAdapter.toJson(writer, customScalarAdapters, value.type)
    }
  }

  public object Headline : Adapter<HeaderQuery.Headline> {
    public val RESPONSE_NAMES: List<String> = listOf("avatar", "title", "displayName",
        "twitterHandle", "twitterId", "headlineType", "followersCount")

    public override fun fromJson(reader: JsonReader, customScalarAdapters: CustomScalarAdapters):
        HeaderQuery.Headline {
      var _avatar: Any? = null
      var _title: String? = null
      var _displayName: String? = null
      var _twitterHandle: String? = null
      var _twitterId: String? = null
      var _headlineType: HeadlineType? = null
      var _followersCount: Int? = null

      while(true) {
        when (reader.selectName(RESPONSE_NAMES)) {
          0 -> _avatar = AnyAdapter.fromJson(reader, customScalarAdapters)
          1 -> _title = StringAdapter.fromJson(reader, customScalarAdapters)
          2 -> _displayName = StringAdapter.fromJson(reader, customScalarAdapters)
          3 -> _twitterHandle = StringAdapter.fromJson(reader, customScalarAdapters)
          4 -> _twitterId = StringAdapter.fromJson(reader, customScalarAdapters)
          5 -> _headlineType = HeadlineType_ResponseAdapter.fromJson(reader, customScalarAdapters)
          6 -> _followersCount = IntAdapter.fromJson(reader, customScalarAdapters)
          else -> break
        }
      }

      return HeaderQuery.Headline(
        avatar = _avatar!!,
        title = _title!!,
        displayName = _displayName!!,
        twitterHandle = _twitterHandle!!,
        twitterId = _twitterId!!,
        headlineType = _headlineType!!,
        followersCount = _followersCount!!
      )
    }

    public override fun toJson(
      writer: JsonWriter,
      customScalarAdapters: CustomScalarAdapters,
      `value`: HeaderQuery.Headline,
    ): Unit {
      writer.name("avatar")
      AnyAdapter.toJson(writer, customScalarAdapters, value.avatar)

      writer.name("title")
      StringAdapter.toJson(writer, customScalarAdapters, value.title)

      writer.name("displayName")
      StringAdapter.toJson(writer, customScalarAdapters, value.displayName)

      writer.name("twitterHandle")
      StringAdapter.toJson(writer, customScalarAdapters, value.twitterHandle)

      writer.name("twitterId")
      StringAdapter.toJson(writer, customScalarAdapters, value.twitterId)

      writer.name("headlineType")
      HeadlineType_ResponseAdapter.toJson(writer, customScalarAdapters, value.headlineType)

      writer.name("followersCount")
      IntAdapter.toJson(writer, customScalarAdapters, value.followersCount)
    }
  }

  public object Identity : Adapter<HeaderQuery.Identity> {
    public val RESPONSE_NAMES: List<String> = listOf("headline", "attestation")

    public override fun fromJson(reader: JsonReader, customScalarAdapters: CustomScalarAdapters):
        HeaderQuery.Identity {
      var _headline: HeaderQuery.Headline1? = null
      var _attestation: HeaderQuery.Attestation? = null

      while(true) {
        when (reader.selectName(RESPONSE_NAMES)) {
          0 -> _headline = Headline1.obj().fromJson(reader, customScalarAdapters)
          1 -> _attestation = Attestation.obj().nullable().fromJson(reader, customScalarAdapters)
          else -> break
        }
      }

      return HeaderQuery.Identity(
        headline = _headline!!,
        attestation = _attestation
      )
    }

    public override fun toJson(
      writer: JsonWriter,
      customScalarAdapters: CustomScalarAdapters,
      `value`: HeaderQuery.Identity,
    ): Unit {
      writer.name("headline")
      Headline1.obj().toJson(writer, customScalarAdapters, value.headline)

      writer.name("attestation")
      Attestation.obj().nullable().toJson(writer, customScalarAdapters, value.attestation)
    }
  }

  public object Headline1 : Adapter<HeaderQuery.Headline1> {
    public val RESPONSE_NAMES: List<String> = listOf("avatar", "title", "displayName",
        "twitterHandle", "twitterId", "headlineType", "followersCount")

    public override fun fromJson(reader: JsonReader, customScalarAdapters: CustomScalarAdapters):
        HeaderQuery.Headline1 {
      var _avatar: Any? = null
      var _title: String? = null
      var _displayName: String? = null
      var _twitterHandle: String? = null
      var _twitterId: String? = null
      var _headlineType: HeadlineType? = null
      var _followersCount: Int? = null

      while(true) {
        when (reader.selectName(RESPONSE_NAMES)) {
          0 -> _avatar = AnyAdapter.fromJson(reader, customScalarAdapters)
          1 -> _title = StringAdapter.fromJson(reader, customScalarAdapters)
          2 -> _displayName = StringAdapter.fromJson(reader, customScalarAdapters)
          3 -> _twitterHandle = StringAdapter.fromJson(reader, customScalarAdapters)
          4 -> _twitterId = StringAdapter.fromJson(reader, customScalarAdapters)
          5 -> _headlineType = HeadlineType_ResponseAdapter.fromJson(reader, customScalarAdapters)
          6 -> _followersCount = IntAdapter.fromJson(reader, customScalarAdapters)
          else -> break
        }
      }

      return HeaderQuery.Headline1(
        avatar = _avatar!!,
        title = _title!!,
        displayName = _displayName!!,
        twitterHandle = _twitterHandle!!,
        twitterId = _twitterId!!,
        headlineType = _headlineType!!,
        followersCount = _followersCount!!
      )
    }

    public override fun toJson(
      writer: JsonWriter,
      customScalarAdapters: CustomScalarAdapters,
      `value`: HeaderQuery.Headline1,
    ): Unit {
      writer.name("avatar")
      AnyAdapter.toJson(writer, customScalarAdapters, value.avatar)

      writer.name("title")
      StringAdapter.toJson(writer, customScalarAdapters, value.title)

      writer.name("displayName")
      StringAdapter.toJson(writer, customScalarAdapters, value.displayName)

      writer.name("twitterHandle")
      StringAdapter.toJson(writer, customScalarAdapters, value.twitterHandle)

      writer.name("twitterId")
      StringAdapter.toJson(writer, customScalarAdapters, value.twitterId)

      writer.name("headlineType")
      HeadlineType_ResponseAdapter.toJson(writer, customScalarAdapters, value.headlineType)

      writer.name("followersCount")
      IntAdapter.toJson(writer, customScalarAdapters, value.followersCount)
    }
  }

  public object Attestation : Adapter<HeaderQuery.Attestation> {
    public val RESPONSE_NAMES: List<String> = listOf("uid", "status", "type")

    public override fun fromJson(reader: JsonReader, customScalarAdapters: CustomScalarAdapters):
        HeaderQuery.Attestation {
      var _uid: String? = null
      var _status: Attestation_Status? = null
      var _type: Attestation_Type? = null

      while(true) {
        when (reader.selectName(RESPONSE_NAMES)) {
          0 -> _uid = StringAdapter.fromJson(reader, customScalarAdapters)
          1 -> _status = Attestation_Status_ResponseAdapter.fromJson(reader, customScalarAdapters)
          2 -> _type = Attestation_Type_ResponseAdapter.fromJson(reader, customScalarAdapters)
          else -> break
        }
      }

      return HeaderQuery.Attestation(
        uid = _uid!!,
        status = _status!!,
        type = _type!!
      )
    }

    public override fun toJson(
      writer: JsonWriter,
      customScalarAdapters: CustomScalarAdapters,
      `value`: HeaderQuery.Attestation,
    ): Unit {
      writer.name("uid")
      StringAdapter.toJson(writer, customScalarAdapters, value.uid)

      writer.name("status")
      Attestation_Status_ResponseAdapter.toJson(writer, customScalarAdapters, value.status)

      writer.name("type")
      Attestation_Type_ResponseAdapter.toJson(writer, customScalarAdapters, value.type)
    }
  }

  public object Block : Adapter<HeaderQuery.Block> {
    public val RESPONSE_NAMES: List<String> = listOf("type", "isPlaceHolder")

    public override fun fromJson(reader: JsonReader, customScalarAdapters: CustomScalarAdapters):
        HeaderQuery.Block {
      var _type: BlockType? = null
      var _isPlaceHolder: Boolean? = null

      while(true) {
        when (reader.selectName(RESPONSE_NAMES)) {
          0 -> _type = BlockType_ResponseAdapter.fromJson(reader, customScalarAdapters)
          1 -> _isPlaceHolder = BooleanAdapter.fromJson(reader, customScalarAdapters)
          else -> break
        }
      }

      return HeaderQuery.Block(
        type = _type!!,
        isPlaceHolder = _isPlaceHolder!!
      )
    }

    public override fun toJson(
      writer: JsonWriter,
      customScalarAdapters: CustomScalarAdapters,
      `value`: HeaderQuery.Block,
    ): Unit {
      writer.name("type")
      BlockType_ResponseAdapter.toJson(writer, customScalarAdapters, value.type)

      writer.name("isPlaceHolder")
      BooleanAdapter.toJson(writer, customScalarAdapters, value.isPlaceHolder)
    }
  }

  public object LightInfo : Adapter<HeaderQuery.LightInfo> {
    public val RESPONSE_NAMES: List<String> = listOf("avatar", "formattedAddress", "displayName",
        "handle", "avatarFrameTokenId", "attestation")

    public override fun fromJson(reader: JsonReader, customScalarAdapters: CustomScalarAdapters):
        HeaderQuery.LightInfo {
      var _avatar: String? = null
      var _formattedAddress: String? = null
      var _displayName: String? = null
      var _handle: String? = null
      var _avatarFrameTokenId: String? = null
      var _attestation: HeaderQuery.Attestation1? = null

      while(true) {
        when (reader.selectName(RESPONSE_NAMES)) {
          0 -> _avatar = StringAdapter.fromJson(reader, customScalarAdapters)
          1 -> _formattedAddress = StringAdapter.fromJson(reader, customScalarAdapters)
          2 -> _displayName = StringAdapter.fromJson(reader, customScalarAdapters)
          3 -> _handle = StringAdapter.fromJson(reader, customScalarAdapters)
          4 -> _avatarFrameTokenId = NullableStringAdapter.fromJson(reader, customScalarAdapters)
          5 -> _attestation = Attestation1.obj().nullable().fromJson(reader, customScalarAdapters)
          else -> break
        }
      }

      return HeaderQuery.LightInfo(
        avatar = _avatar!!,
        formattedAddress = _formattedAddress!!,
        displayName = _displayName!!,
        handle = _handle!!,
        avatarFrameTokenId = _avatarFrameTokenId,
        attestation = _attestation
      )
    }

    public override fun toJson(
      writer: JsonWriter,
      customScalarAdapters: CustomScalarAdapters,
      `value`: HeaderQuery.LightInfo,
    ): Unit {
      writer.name("avatar")
      StringAdapter.toJson(writer, customScalarAdapters, value.avatar)

      writer.name("formattedAddress")
      StringAdapter.toJson(writer, customScalarAdapters, value.formattedAddress)

      writer.name("displayName")
      StringAdapter.toJson(writer, customScalarAdapters, value.displayName)

      writer.name("handle")
      StringAdapter.toJson(writer, customScalarAdapters, value.handle)

      writer.name("avatarFrameTokenId")
      NullableStringAdapter.toJson(writer, customScalarAdapters, value.avatarFrameTokenId)

      writer.name("attestation")
      Attestation1.obj().nullable().toJson(writer, customScalarAdapters, value.attestation)
    }
  }

  public object Attestation1 : Adapter<HeaderQuery.Attestation1> {
    public val RESPONSE_NAMES: List<String> = listOf("uid", "status", "type")

    public override fun fromJson(reader: JsonReader, customScalarAdapters: CustomScalarAdapters):
        HeaderQuery.Attestation1 {
      var _uid: String? = null
      var _status: Attestation_Status? = null
      var _type: Attestation_Type? = null

      while(true) {
        when (reader.selectName(RESPONSE_NAMES)) {
          0 -> _uid = StringAdapter.fromJson(reader, customScalarAdapters)
          1 -> _status = Attestation_Status_ResponseAdapter.fromJson(reader, customScalarAdapters)
          2 -> _type = Attestation_Type_ResponseAdapter.fromJson(reader, customScalarAdapters)
          else -> break
        }
      }

      return HeaderQuery.Attestation1(
        uid = _uid!!,
        status = _status!!,
        type = _type!!
      )
    }

    public override fun toJson(
      writer: JsonWriter,
      customScalarAdapters: CustomScalarAdapters,
      `value`: HeaderQuery.Attestation1,
    ): Unit {
      writer.name("uid")
      StringAdapter.toJson(writer, customScalarAdapters, value.uid)

      writer.name("status")
      Attestation_Status_ResponseAdapter.toJson(writer, customScalarAdapters, value.status)

      writer.name("type")
      Attestation_Type_ResponseAdapter.toJson(writer, customScalarAdapters, value.type)
    }
  }

  public object PrivateInfo : Adapter<HeaderQuery.PrivateInfo> {
    public val RESPONSE_NAMES: List<String> = listOf("address", "discordId", "twitterId",
        "twitterAuthorized", "accessToken", "email", "v3SdkToken", "linkedinId", "githubId")

    public override fun fromJson(reader: JsonReader, customScalarAdapters: CustomScalarAdapters):
        HeaderQuery.PrivateInfo {
      var _address: Any? = null
      var _discordId: String? = null
      var _twitterId: String? = null
      var _twitterAuthorized: Boolean? = null
      var _accessToken: String? = null
      var _email: String? = null
      var _v3SdkToken: String? = null
      var _linkedinId: String? = null
      var _githubId: String? = null

      while(true) {
        when (reader.selectName(RESPONSE_NAMES)) {
          0 -> _address = AnyAdapter.fromJson(reader, customScalarAdapters)
          1 -> _discordId = StringAdapter.fromJson(reader, customScalarAdapters)
          2 -> _twitterId = StringAdapter.fromJson(reader, customScalarAdapters)
          3 -> _twitterAuthorized = BooleanAdapter.fromJson(reader, customScalarAdapters)
          4 -> _accessToken = StringAdapter.fromJson(reader, customScalarAdapters)
          5 -> _email = StringAdapter.fromJson(reader, customScalarAdapters)
          6 -> _v3SdkToken = StringAdapter.fromJson(reader, customScalarAdapters)
          7 -> _linkedinId = StringAdapter.fromJson(reader, customScalarAdapters)
          8 -> _githubId = StringAdapter.fromJson(reader, customScalarAdapters)
          else -> break
        }
      }

      return HeaderQuery.PrivateInfo(
        address = _address!!,
        discordId = _discordId!!,
        twitterId = _twitterId!!,
        twitterAuthorized = _twitterAuthorized!!,
        accessToken = _accessToken!!,
        email = _email!!,
        v3SdkToken = _v3SdkToken!!,
        linkedinId = _linkedinId!!,
        githubId = _githubId!!
      )
    }

    public override fun toJson(
      writer: JsonWriter,
      customScalarAdapters: CustomScalarAdapters,
      `value`: HeaderQuery.PrivateInfo,
    ): Unit {
      writer.name("address")
      AnyAdapter.toJson(writer, customScalarAdapters, value.address)

      writer.name("discordId")
      StringAdapter.toJson(writer, customScalarAdapters, value.discordId)

      writer.name("twitterId")
      StringAdapter.toJson(writer, customScalarAdapters, value.twitterId)

      writer.name("twitterAuthorized")
      BooleanAdapter.toJson(writer, customScalarAdapters, value.twitterAuthorized)

      writer.name("accessToken")
      StringAdapter.toJson(writer, customScalarAdapters, value.accessToken)

      writer.name("email")
      StringAdapter.toJson(writer, customScalarAdapters, value.email)

      writer.name("v3SdkToken")
      StringAdapter.toJson(writer, customScalarAdapters, value.v3SdkToken)

      writer.name("linkedinId")
      StringAdapter.toJson(writer, customScalarAdapters, value.linkedinId)

      writer.name("githubId")
      StringAdapter.toJson(writer, customScalarAdapters, value.githubId)
    }
  }

  public object V3Info : Adapter<HeaderQuery.V3Info> {
    public val RESPONSE_NAMES: List<String> = listOf("cyberAccount", "credits")

    public override fun fromJson(reader: JsonReader, customScalarAdapters: CustomScalarAdapters):
        HeaderQuery.V3Info {
      var _cyberAccount: String? = null
      var _credits: List<HeaderQuery.Credit>? = null

      while(true) {
        when (reader.selectName(RESPONSE_NAMES)) {
          0 -> _cyberAccount = StringAdapter.fromJson(reader, customScalarAdapters)
          1 -> _credits = Credit.obj().list().fromJson(reader, customScalarAdapters)
          else -> break
        }
      }

      return HeaderQuery.V3Info(
        cyberAccount = _cyberAccount!!,
        credits = _credits!!
      )
    }

    public override fun toJson(
      writer: JsonWriter,
      customScalarAdapters: CustomScalarAdapters,
      `value`: HeaderQuery.V3Info,
    ): Unit {
      writer.name("cyberAccount")
      StringAdapter.toJson(writer, customScalarAdapters, value.cyberAccount)

      writer.name("credits")
      Credit.obj().list().toJson(writer, customScalarAdapters, value.credits)
    }
  }

  public object Credit : Adapter<HeaderQuery.Credit> {
    public val RESPONSE_NAMES: List<String> = listOf("balance", "decimals", "pending", "locked")

    public override fun fromJson(reader: JsonReader, customScalarAdapters: CustomScalarAdapters):
        HeaderQuery.Credit {
      var _balance: String? = null
      var _decimals: Int? = null
      var _pending: String? = null
      var _locked: String? = null

      while(true) {
        when (reader.selectName(RESPONSE_NAMES)) {
          0 -> _balance = StringAdapter.fromJson(reader, customScalarAdapters)
          1 -> _decimals = IntAdapter.fromJson(reader, customScalarAdapters)
          2 -> _pending = StringAdapter.fromJson(reader, customScalarAdapters)
          3 -> _locked = StringAdapter.fromJson(reader, customScalarAdapters)
          else -> break
        }
      }

      return HeaderQuery.Credit(
        balance = _balance!!,
        decimals = _decimals!!,
        pending = _pending!!,
        locked = _locked!!
      )
    }

    public override fun toJson(
      writer: JsonWriter,
      customScalarAdapters: CustomScalarAdapters,
      `value`: HeaderQuery.Credit,
    ): Unit {
      writer.name("balance")
      StringAdapter.toJson(writer, customScalarAdapters, value.balance)

      writer.name("decimals")
      IntAdapter.toJson(writer, customScalarAdapters, value.decimals)

      writer.name("pending")
      StringAdapter.toJson(writer, customScalarAdapters, value.pending)

      writer.name("locked")
      StringAdapter.toJson(writer, customScalarAdapters, value.locked)
    }
  }

  public object CyberId : Adapter<HeaderQuery.CyberId> {
    public val RESPONSE_NAMES: List<String> = listOf("tokenId", "handle", "isPrimary")

    public override fun fromJson(reader: JsonReader, customScalarAdapters: CustomScalarAdapters):
        HeaderQuery.CyberId {
      var _tokenId: String? = null
      var _handle: String? = null
      var _isPrimary: Boolean? = null

      while(true) {
        when (reader.selectName(RESPONSE_NAMES)) {
          0 -> _tokenId = StringAdapter.fromJson(reader, customScalarAdapters)
          1 -> _handle = StringAdapter.fromJson(reader, customScalarAdapters)
          2 -> _isPrimary = BooleanAdapter.fromJson(reader, customScalarAdapters)
          else -> break
        }
      }

      return HeaderQuery.CyberId(
        tokenId = _tokenId!!,
        handle = _handle!!,
        isPrimary = _isPrimary!!
      )
    }

    public override fun toJson(
      writer: JsonWriter,
      customScalarAdapters: CustomScalarAdapters,
      `value`: HeaderQuery.CyberId,
    ): Unit {
      writer.name("tokenId")
      StringAdapter.toJson(writer, customScalarAdapters, value.tokenId)

      writer.name("handle")
      StringAdapter.toJson(writer, customScalarAdapters, value.handle)

      writer.name("isPrimary")
      BooleanAdapter.toJson(writer, customScalarAdapters, value.isPrimary)
    }
  }

  public object TurnkeyUserInfo : Adapter<HeaderQuery.TurnkeyUserInfo> {
    public val RESPONSE_NAMES: List<String> = listOf("subOrgId", "turnkeyUserId", "username")

    public override fun fromJson(reader: JsonReader, customScalarAdapters: CustomScalarAdapters):
        HeaderQuery.TurnkeyUserInfo {
      var _subOrgId: String? = null
      var _turnkeyUserId: String? = null
      var _username: String? = null

      while(true) {
        when (reader.selectName(RESPONSE_NAMES)) {
          0 -> _subOrgId = StringAdapter.fromJson(reader, customScalarAdapters)
          1 -> _turnkeyUserId = StringAdapter.fromJson(reader, customScalarAdapters)
          2 -> _username = StringAdapter.fromJson(reader, customScalarAdapters)
          else -> break
        }
      }

      return HeaderQuery.TurnkeyUserInfo(
        subOrgId = _subOrgId!!,
        turnkeyUserId = _turnkeyUserId!!,
        username = _username!!
      )
    }

    public override fun toJson(
      writer: JsonWriter,
      customScalarAdapters: CustomScalarAdapters,
      `value`: HeaderQuery.TurnkeyUserInfo,
    ): Unit {
      writer.name("subOrgId")
      StringAdapter.toJson(writer, customScalarAdapters, value.subOrgId)

      writer.name("turnkeyUserId")
      StringAdapter.toJson(writer, customScalarAdapters, value.turnkeyUserId)

      writer.name("username")
      StringAdapter.toJson(writer, customScalarAdapters, value.username)
    }
  }

  public object ChatUser : Adapter<HeaderQuery.ChatUser> {
    public val RESPONSE_NAMES: List<String> = listOf("creditBalance")

    public override fun fromJson(reader: JsonReader, customScalarAdapters: CustomScalarAdapters):
        HeaderQuery.ChatUser {
      var _creditBalance: HeaderQuery.CreditBalance? = null

      while(true) {
        when (reader.selectName(RESPONSE_NAMES)) {
          0 -> _creditBalance = CreditBalance.obj().fromJson(reader, customScalarAdapters)
          else -> break
        }
      }

      return HeaderQuery.ChatUser(
        creditBalance = _creditBalance!!
      )
    }

    public override fun toJson(
      writer: JsonWriter,
      customScalarAdapters: CustomScalarAdapters,
      `value`: HeaderQuery.ChatUser,
    ): Unit {
      writer.name("creditBalance")
      CreditBalance.obj().toJson(writer, customScalarAdapters, value.creditBalance)
    }
  }

  public object CreditBalance : Adapter<HeaderQuery.CreditBalance> {
    public val RESPONSE_NAMES: List<String> = listOf("value", "decimal", "currency")

    public override fun fromJson(reader: JsonReader, customScalarAdapters: CustomScalarAdapters):
        HeaderQuery.CreditBalance {
      var _value: String? = null
      var _decimal: Int? = null
      var _currency: String? = null

      while(true) {
        when (reader.selectName(RESPONSE_NAMES)) {
          0 -> _value = StringAdapter.fromJson(reader, customScalarAdapters)
          1 -> _decimal = IntAdapter.fromJson(reader, customScalarAdapters)
          2 -> _currency = StringAdapter.fromJson(reader, customScalarAdapters)
          else -> break
        }
      }

      return HeaderQuery.CreditBalance(
        `value` = _value!!,
        decimal = _decimal!!,
        currency = _currency!!
      )
    }

    public override fun toJson(
      writer: JsonWriter,
      customScalarAdapters: CustomScalarAdapters,
      `value`: HeaderQuery.CreditBalance,
    ): Unit {
      writer.name("value")
      StringAdapter.toJson(writer, customScalarAdapters, value.`value`)

      writer.name("decimal")
      IntAdapter.toJson(writer, customScalarAdapters, value.decimal)

      writer.name("currency")
      StringAdapter.toJson(writer, customScalarAdapters, value.currency)
    }
  }

  public object DmCreditAccount : Adapter<HeaderQuery.DmCreditAccount> {
    public val RESPONSE_NAMES: List<String> = listOf("balance", "nonWithdrawableBalance",
        "withdrawableBalance")

    public override fun fromJson(reader: JsonReader, customScalarAdapters: CustomScalarAdapters):
        HeaderQuery.DmCreditAccount {
      var _balance: HeaderQuery.Balance? = null
      var _nonWithdrawableBalance: HeaderQuery.NonWithdrawableBalance? = null
      var _withdrawableBalance: HeaderQuery.WithdrawableBalance? = null

      while(true) {
        when (reader.selectName(RESPONSE_NAMES)) {
          0 -> _balance = Balance.obj(true).fromJson(reader, customScalarAdapters)
          1 -> _nonWithdrawableBalance = NonWithdrawableBalance.obj(true).fromJson(reader,
              customScalarAdapters)
          2 -> _withdrawableBalance = WithdrawableBalance.obj(true).fromJson(reader,
              customScalarAdapters)
          else -> break
        }
      }

      return HeaderQuery.DmCreditAccount(
        balance = _balance!!,
        nonWithdrawableBalance = _nonWithdrawableBalance!!,
        withdrawableBalance = _withdrawableBalance!!
      )
    }

    public override fun toJson(
      writer: JsonWriter,
      customScalarAdapters: CustomScalarAdapters,
      `value`: HeaderQuery.DmCreditAccount,
    ): Unit {
      writer.name("balance")
      Balance.obj(true).toJson(writer, customScalarAdapters, value.balance)

      writer.name("nonWithdrawableBalance")
      NonWithdrawableBalance.obj(true).toJson(writer, customScalarAdapters,
          value.nonWithdrawableBalance)

      writer.name("withdrawableBalance")
      WithdrawableBalance.obj(true).toJson(writer, customScalarAdapters, value.withdrawableBalance)
    }
  }

  public object Balance : Adapter<HeaderQuery.Balance> {
    public val RESPONSE_NAMES: List<String> = listOf("__typename")

    public override fun fromJson(reader: JsonReader, customScalarAdapters: CustomScalarAdapters):
        HeaderQuery.Balance {
      var __typename: String? = null

      while(true) {
        when (reader.selectName(RESPONSE_NAMES)) {
          0 -> __typename = StringAdapter.fromJson(reader, customScalarAdapters)
          else -> break
        }
      }

      reader.rewind()
      val _price = com.cyberconnect.link3.fragment.PriceImpl_ResponseAdapter.Price.fromJson(reader,
          customScalarAdapters)

      return HeaderQuery.Balance(
        __typename = __typename!!,
        price = _price
      )
    }

    public override fun toJson(
      writer: JsonWriter,
      customScalarAdapters: CustomScalarAdapters,
      `value`: HeaderQuery.Balance,
    ): Unit {
      writer.name("__typename")
      StringAdapter.toJson(writer, customScalarAdapters, value.__typename)

      com.cyberconnect.link3.fragment.PriceImpl_ResponseAdapter.Price.toJson(writer,
          customScalarAdapters, value.price)
    }
  }

  public object NonWithdrawableBalance : Adapter<HeaderQuery.NonWithdrawableBalance> {
    public val RESPONSE_NAMES: List<String> = listOf("__typename")

    public override fun fromJson(reader: JsonReader, customScalarAdapters: CustomScalarAdapters):
        HeaderQuery.NonWithdrawableBalance {
      var __typename: String? = null

      while(true) {
        when (reader.selectName(RESPONSE_NAMES)) {
          0 -> __typename = StringAdapter.fromJson(reader, customScalarAdapters)
          else -> break
        }
      }

      reader.rewind()
      val _price = com.cyberconnect.link3.fragment.PriceImpl_ResponseAdapter.Price.fromJson(reader,
          customScalarAdapters)

      return HeaderQuery.NonWithdrawableBalance(
        __typename = __typename!!,
        price = _price
      )
    }

    public override fun toJson(
      writer: JsonWriter,
      customScalarAdapters: CustomScalarAdapters,
      `value`: HeaderQuery.NonWithdrawableBalance,
    ): Unit {
      writer.name("__typename")
      StringAdapter.toJson(writer, customScalarAdapters, value.__typename)

      com.cyberconnect.link3.fragment.PriceImpl_ResponseAdapter.Price.toJson(writer,
          customScalarAdapters, value.price)
    }
  }

  public object WithdrawableBalance : Adapter<HeaderQuery.WithdrawableBalance> {
    public val RESPONSE_NAMES: List<String> = listOf("__typename")

    public override fun fromJson(reader: JsonReader, customScalarAdapters: CustomScalarAdapters):
        HeaderQuery.WithdrawableBalance {
      var __typename: String? = null

      while(true) {
        when (reader.selectName(RESPONSE_NAMES)) {
          0 -> __typename = StringAdapter.fromJson(reader, customScalarAdapters)
          else -> break
        }
      }

      reader.rewind()
      val _price = com.cyberconnect.link3.fragment.PriceImpl_ResponseAdapter.Price.fromJson(reader,
          customScalarAdapters)

      return HeaderQuery.WithdrawableBalance(
        __typename = __typename!!,
        price = _price
      )
    }

    public override fun toJson(
      writer: JsonWriter,
      customScalarAdapters: CustomScalarAdapters,
      `value`: HeaderQuery.WithdrawableBalance,
    ): Unit {
      writer.name("__typename")
      StringAdapter.toJson(writer, customScalarAdapters, value.__typename)

      com.cyberconnect.link3.fragment.PriceImpl_ResponseAdapter.Price.toJson(writer,
          customScalarAdapters, value.price)
    }
  }

  public object PointAccount : Adapter<HeaderQuery.PointAccount> {
    public val RESPONSE_NAMES: List<String> = listOf("totalPoints")

    public override fun fromJson(reader: JsonReader, customScalarAdapters: CustomScalarAdapters):
        HeaderQuery.PointAccount {
      var _totalPoints: Int? = null

      while(true) {
        when (reader.selectName(RESPONSE_NAMES)) {
          0 -> _totalPoints = IntAdapter.fromJson(reader, customScalarAdapters)
          else -> break
        }
      }

      return HeaderQuery.PointAccount(
        totalPoints = _totalPoints!!
      )
    }

    public override fun toJson(
      writer: JsonWriter,
      customScalarAdapters: CustomScalarAdapters,
      `value`: HeaderQuery.PointAccount,
    ): Unit {
      writer.name("totalPoints")
      IntAdapter.toJson(writer, customScalarAdapters, value.totalPoints)
    }
  }
}
