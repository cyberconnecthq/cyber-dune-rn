//
// AUTO-GENERATED FILE. DO NOT MODIFY.
//
// This class was automatically generated by Apollo GraphQL version '3.8.2'.
//
package com.cyberconnect.link3.fragment.selections

import com.apollographql.apollo3.api.CompiledField
import com.apollographql.apollo3.api.CompiledFragment
import com.apollographql.apollo3.api.CompiledSelection
import com.apollographql.apollo3.api.list
import com.apollographql.apollo3.api.notNull
import com.cyberconnect.link3.type.Attestation
import com.cyberconnect.link3.type.Attestation_Status
import com.cyberconnect.link3.type.Attestation_Type
import com.cyberconnect.link3.type.ConnectStatus
import com.cyberconnect.link3.type.GraphQLBoolean
import com.cyberconnect.link3.type.GraphQLID
import com.cyberconnect.link3.type.GraphQLInt
import com.cyberconnect.link3.type.GraphQLString
import com.cyberconnect.link3.type.HeadlineType
import com.cyberconnect.link3.type.Identity
import com.cyberconnect.link3.type.LightInfo
import com.cyberconnect.link3.type.NFT
import com.cyberconnect.link3.type.PersonalDisplayName
import com.cyberconnect.link3.type.PersonalDisplayName_Type
import com.cyberconnect.link3.type.PersonalPicture
import com.cyberconnect.link3.type.PersonalPicture_Type
import com.cyberconnect.link3.type.Profile
import com.cyberconnect.link3.type.ProfilePage
import com.cyberconnect.link3.type.ReputationScore
import com.cyberconnect.link3.type.Twitter
import com.cyberconnect.link3.type.Url
import com.cyberconnect.link3.type.User
import kotlin.collections.List

public object PersonalProfileSelections {
  private val __reputation: List<CompiledSelection> = listOf(
        CompiledField.Builder(
          name = "total",
          type = GraphQLInt.type.notNull()
        ).build()
      )

  private val __attestation: List<CompiledSelection> = listOf(
        CompiledField.Builder(
          name = "status",
          type = Attestation_Status.type.notNull()
        ).build(),
        CompiledField.Builder(
          name = "uid",
          type = GraphQLString.type.notNull()
        ).build(),
        CompiledField.Builder(
          name = "type",
          type = Attestation_Type.type.notNull()
        ).build()
      )

  private val __lightInfo: List<CompiledSelection> = listOf(
        CompiledField.Builder(
          name = "attestation",
          type = Attestation.type
        ).selections(__attestation)
        .build(),
        CompiledField.Builder(
          name = "remark",
          type = GraphQLString.type.notNull()
        ).build()
      )

  private val __owner: List<CompiledSelection> = listOf(
        CompiledField.Builder(
          name = "id",
          type = GraphQLID.type.notNull()
        ).build(),
        CompiledField.Builder(
          name = "lightInfo",
          type = LightInfo.type.notNull()
        ).selections(__lightInfo)
        .build()
      )

  private val __profilePicture: List<CompiledSelection> = listOf(
        CompiledField.Builder(
          name = "picture",
          type = GraphQLString.type
        ).build()
      )

  private val __displayName: List<CompiledSelection> = listOf(
        CompiledField.Builder(
          name = "displayName",
          type = GraphQLString.type.notNull()
        ).build()
      )

  private val __onPerProfile: List<CompiledSelection> = listOf(
        CompiledField.Builder(
          name = "profilePicture",
          type = PersonalPicture.type.notNull()
        ).selections(__profilePicture)
        .build(),
        CompiledField.Builder(
          name = "displayName",
          type = PersonalDisplayName.type.notNull()
        ).selections(__displayName)
        .build()
      )

  private val __list: List<CompiledSelection> = listOf(
        CompiledField.Builder(
          name = "__typename",
          type = GraphQLString.type.notNull()
        ).build(),
        CompiledField.Builder(
          name = "handle",
          type = GraphQLString.type.notNull()
        ).build(),
        CompiledField.Builder(
          name = "id",
          type = GraphQLID.type.notNull()
        ).build(),
        CompiledFragment.Builder(
          typeCondition = "PerProfile",
          possibleTypes = listOf("PerProfile")
        ).selections(__onPerProfile)
        .build()
      )

  private val __connections: List<CompiledSelection> = listOf(
        CompiledField.Builder(
          name = "list",
          type = Profile.type.notNull().list().notNull()
        ).selections(__list)
        .build()
      )

  private val __profilePicture1: List<CompiledSelection> = listOf(
        CompiledField.Builder(
          name = "picture",
          type = GraphQLString.type
        ).build()
      )

  private val __displayName2: List<CompiledSelection> = listOf(
        CompiledField.Builder(
          name = "displayName",
          type = GraphQLString.type.notNull()
        ).build()
      )

  private val __onPerProfile1: List<CompiledSelection> = listOf(
        CompiledField.Builder(
          name = "profilePicture",
          type = PersonalPicture.type.notNull()
        ).selections(__profilePicture1)
        .build(),
        CompiledField.Builder(
          name = "displayName",
          type = PersonalDisplayName.type.notNull()
        ).selections(__displayName2)
        .build()
      )

  private val __list1: List<CompiledSelection> = listOf(
        CompiledField.Builder(
          name = "__typename",
          type = GraphQLString.type.notNull()
        ).build(),
        CompiledField.Builder(
          name = "handle",
          type = GraphQLString.type.notNull()
        ).build(),
        CompiledField.Builder(
          name = "id",
          type = GraphQLID.type.notNull()
        ).build(),
        CompiledFragment.Builder(
          typeCondition = "PerProfile",
          possibleTypes = listOf("PerProfile")
        ).selections(__onPerProfile1)
        .build()
      )

  private val __mutualConnections: List<CompiledSelection> = listOf(
        CompiledField.Builder(
          name = "list",
          type = Profile.type.notNull().list().notNull()
        ).selections(__list1)
        .build()
      )

  private val __headline: List<CompiledSelection> = listOf(
        CompiledField.Builder(
          name = "twitterId",
          type = GraphQLString.type.notNull()
        ).build(),
        CompiledField.Builder(
          name = "twitterHandle",
          type = GraphQLString.type.notNull()
        ).build(),
        CompiledField.Builder(
          name = "displayName",
          type = GraphQLString.type.notNull()
        ).build(),
        CompiledField.Builder(
          name = "avatar",
          type = Url.type.notNull()
        ).build(),
        CompiledField.Builder(
          name = "title",
          type = GraphQLString.type.notNull()
        ).build(),
        CompiledField.Builder(
          name = "description",
          type = GraphQLString.type.notNull()
        ).build(),
        CompiledField.Builder(
          name = "headlineType",
          type = HeadlineType.type.notNull()
        ).build(),
        CompiledField.Builder(
          name = "followersCount",
          type = GraphQLInt.type.notNull()
        ).build(),
        CompiledField.Builder(
          name = "profileId",
          type = GraphQLID.type
        ).build()
      )

  private val __headline1: List<CompiledSelection> = listOf(
        CompiledField.Builder(
          name = "twitterId",
          type = GraphQLString.type.notNull()
        ).build(),
        CompiledField.Builder(
          name = "twitterHandle",
          type = GraphQLString.type.notNull()
        ).build(),
        CompiledField.Builder(
          name = "displayName",
          type = GraphQLString.type.notNull()
        ).build(),
        CompiledField.Builder(
          name = "avatar",
          type = Url.type.notNull()
        ).build(),
        CompiledField.Builder(
          name = "title",
          type = GraphQLString.type.notNull()
        ).build(),
        CompiledField.Builder(
          name = "description",
          type = GraphQLString.type.notNull()
        ).build(),
        CompiledField.Builder(
          name = "headlineType",
          type = HeadlineType.type.notNull()
        ).build(),
        CompiledField.Builder(
          name = "followersCount",
          type = GraphQLInt.type.notNull()
        ).build()
      )

  private val __attestation1: List<CompiledSelection> = listOf(
        CompiledField.Builder(
          name = "uid",
          type = GraphQLString.type.notNull()
        ).build(),
        CompiledField.Builder(
          name = "status",
          type = Attestation_Status.type.notNull()
        ).build(),
        CompiledField.Builder(
          name = "type",
          type = Attestation_Type.type.notNull()
        ).build()
      )

  private val __identities: List<CompiledSelection> = listOf(
        CompiledField.Builder(
          name = "headline",
          type = Twitter.type.notNull()
        ).selections(__headline1)
        .build(),
        CompiledField.Builder(
          name = "attestation",
          type = Attestation.type
        ).selections(__attestation1)
        .build()
      )

  private val __displayName6: List<CompiledSelection> = listOf(
        CompiledField.Builder(
          name = "type",
          type = PersonalDisplayName_Type.type.notNull()
        ).build(),
        CompiledField.Builder(
          name = "displayName",
          type = GraphQLString.type.notNull()
        ).build()
      )

  private val __nfts: List<CompiledSelection> = listOf(
        CompiledField.Builder(
          name = "__typename",
          type = GraphQLString.type.notNull()
        ).build(),
        CompiledFragment.Builder(
          typeCondition = "NFT",
          possibleTypes = listOf("NFT")
        ).selections(NFTSelections.__root)
        .build()
      )

  private val __profilePicture2: List<CompiledSelection> = listOf(
        CompiledField.Builder(
          name = "picture",
          type = GraphQLString.type
        ).build(),
        CompiledField.Builder(
          name = "type",
          type = PersonalPicture_Type.type.notNull()
        ).build(),
        CompiledField.Builder(
          name = "nfts",
          type = NFT.type.notNull().list()
        ).selections(__nfts)
        .build()
      )

  private val __nfts1: List<CompiledSelection> = listOf(
        CompiledField.Builder(
          name = "__typename",
          type = GraphQLString.type.notNull()
        ).build(),
        CompiledFragment.Builder(
          typeCondition = "NFT",
          possibleTypes = listOf("NFT")
        ).selections(NFTSelections.__root)
        .build()
      )

  private val __backgroundPicture: List<CompiledSelection> = listOf(
        CompiledField.Builder(
          name = "picture",
          type = GraphQLString.type
        ).build(),
        CompiledField.Builder(
          name = "type",
          type = PersonalPicture_Type.type.notNull()
        ).build(),
        CompiledField.Builder(
          name = "nfts",
          type = NFT.type.notNull().list()
        ).selections(__nfts1)
        .build()
      )

  public val __root: List<CompiledSelection> = listOf(
        CompiledField.Builder(
          name = "bio",
          type = GraphQLString.type.notNull()
        ).build(),
        CompiledField.Builder(
          name = "reputation",
          type = ReputationScore.type.notNull()
        ).selections(__reputation)
        .build(),
        CompiledField.Builder(
          name = "owner",
          type = User.type.notNull()
        ).selections(__owner)
        .build(),
        CompiledField.Builder(
          name = "avatarFrameTokenId",
          type = GraphQLID.type
        ).build(),
        CompiledField.Builder(
          name = "connectStatus",
          type = ConnectStatus.type.notNull()
        ).build(),
        CompiledField.Builder(
          name = "connectionsCount",
          type = GraphQLInt.type.notNull()
        ).build(),
        CompiledField.Builder(
          name = "isVerified",
          type = GraphQLBoolean.type.notNull()
        ).build(),
        CompiledField.Builder(
          name = "connections",
          type = ProfilePage.type.notNull()
        ).selections(__connections)
        .build(),
        CompiledField.Builder(
          name = "mutualConnections",
          type = ProfilePage.type.notNull()
        ).selections(__mutualConnections)
        .build(),
        CompiledField.Builder(
          name = "headline",
          type = Twitter.type.notNull()
        ).selections(__headline)
        .build(),
        CompiledField.Builder(
          name = "identities",
          type = Identity.type.notNull().list()
        ).selections(__identities)
        .build(),
        CompiledField.Builder(
          name = "isAdmin",
          type = GraphQLBoolean.type.notNull()
        ).build(),
        CompiledField.Builder(
          name = "isFollowing",
          type = GraphQLBoolean.type.notNull()
        ).build(),
        CompiledField.Builder(
          name = "region",
          type = GraphQLString.type.notNull()
        ).build(),
        CompiledField.Builder(
          name = "languages",
          type = GraphQLString.type.notNull().list()
        ).build(),
        CompiledField.Builder(
          name = "displayName",
          type = PersonalDisplayName.type.notNull()
        ).alias("personaldisplayName")
        .selections(__displayName6)
        .build(),
        CompiledField.Builder(
          name = "profilePicture",
          type = PersonalPicture.type.notNull()
        ).alias("personalProfilePicture")
        .selections(__profilePicture2)
        .build(),
        CompiledField.Builder(
          name = "backgroundPicture",
          type = PersonalPicture.type.notNull()
        ).alias("personalBackgroundPicture")
        .selections(__backgroundPicture)
        .build()
      )
}
