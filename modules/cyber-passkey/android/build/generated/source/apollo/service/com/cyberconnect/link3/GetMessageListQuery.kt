//
// AUTO-GENERATED FILE. DO NOT MODIFY.
//
// This class was automatically generated by Apollo GraphQL version '3.8.2'.
//
package com.cyberconnect.link3

import com.apollographql.apollo3.annotations.ApolloAdaptableWith
import com.apollographql.apollo3.api.Adapter
import com.apollographql.apollo3.api.CompiledField
import com.apollographql.apollo3.api.CustomScalarAdapters
import com.apollographql.apollo3.api.Optional
import com.apollographql.apollo3.api.Query
import com.apollographql.apollo3.api.json.JsonWriter
import com.apollographql.apollo3.api.obj
import com.cyberconnect.link3.adapter.GetMessageListQuery_ResponseAdapter
import com.cyberconnect.link3.adapter.GetMessageListQuery_VariablesAdapter
import com.cyberconnect.link3.fragment.MessageListItem
import com.cyberconnect.link3.selections.GetMessageListQuerySelections
import kotlin.String
import kotlin.Unit

public data class GetMessageListQuery(
  public val after: Optional<String?> = Optional.Absent,
) : Query<GetMessageListQuery.Data> {
  public override fun id(): String = OPERATION_ID

  public override fun document(): String = OPERATION_DOCUMENT

  public override fun name(): String = OPERATION_NAME

  public override fun serializeVariables(writer: JsonWriter,
      customScalarAdapters: CustomScalarAdapters): Unit {
    GetMessageListQuery_VariablesAdapter.toJson(writer, customScalarAdapters, this)
  }

  public override fun adapter(): Adapter<Data> = GetMessageListQuery_ResponseAdapter.Data.obj()

  public override fun rootField(): CompiledField = CompiledField.Builder(
    name = "data",
    type = com.cyberconnect.link3.type.Query.type
  )
  .selections(selections = GetMessageListQuerySelections.__root)
  .build()

  @ApolloAdaptableWith(GetMessageListQuery_ResponseAdapter.Data::class)
  public data class Data(
    public val me: Me,
  ) : Query.Data

  public data class Me(
    public val `data`: Data1?,
  )

  public data class Data1(
    public val chats: Chats,
  )

  public data class Chats(
    public val list: kotlin.collections.List<List>,
    public val pageInfo: PageInfo,
    public val chatsWithEarn: kotlin.collections.List<ChatsWithEarn>?,
  )

  public data class List(
    public val __typename: String,
    /**
     * Synthetic field for 'MessageListItem'
     */
    public val messageListItem: MessageListItem,
  )

  public data class PageInfo(
    public val __typename: String,
    /**
     * Synthetic field for 'PageInfo'
     */
    public val pageInfo: com.cyberconnect.link3.fragment.PageInfo,
  )

  public data class ChatsWithEarn(
    public val __typename: String,
    /**
     * Synthetic field for 'MessageListItem'
     */
    public val messageListItem: MessageListItem,
  )

  public companion object {
    public const val OPERATION_ID: String =
        "d5d8ecc5fe7bc057b8098abfbca15ee4b76ba290c06fb786d068a653bee4bc83"

    /**
     * The minimized GraphQL document being sent to the server to save a few bytes.
     * The un-minimized version is:
     *
     * query getMessageList($after: String) {
     *   me {
     *     data {
     *       chats(first: 20, after: $after) {
     *         list {
     *           __typename
     *           ...MessageListItem
     *         }
     *         pageInfo {
     *           __typename
     *           ...PageInfo
     *         }
     *         chatsWithEarn {
     *           __typename
     *           ...MessageListItem
     *         }
     *       }
     *     }
     *   }
     * }
     *
     * fragment Price on TokenValue {
     *   currency
     *   decimal
     *   value
     * }
     *
     * fragment MessageListItem on Chat {
     *   id
     *   user {
     *     id
     *     lightInfo {
     *       handle
     *       avatar
     *       displayName
     *       formattedAddress
     *       remark
     *     }
     *   }
     *   unreadCount
     *   lastMessage {
     *     content
     *     msgTime
     *     msgType
     *     replyToEarn
     *     paid {
     *       earnValue {
     *         __typename
     *         ...Price
     *       }
     *       status
     *       refundAt
     *     }
     *     sender {
     *       id
     *     }
     *   }
     * }
     *
     * fragment PageInfo on PageInfo {
     *   startCursor
     *   endCursor
     *   hasNextPage
     *   hasPreviousPage
     * }
     */
    public val OPERATION_DOCUMENT: String
      get() =
          "query getMessageList(${'$'}after: String) { me { data { chats(first: 20, after: ${'$'}after) { list { __typename ...MessageListItem } pageInfo { __typename ...PageInfo } chatsWithEarn { __typename ...MessageListItem } } } } }  fragment Price on TokenValue { currency decimal value }  fragment MessageListItem on Chat { id user { id lightInfo { handle avatar displayName formattedAddress remark } } unreadCount lastMessage { content msgTime msgType replyToEarn paid { earnValue { __typename ...Price } status refundAt } sender { id } } }  fragment PageInfo on PageInfo { startCursor endCursor hasNextPage hasPreviousPage }"

    public const val OPERATION_NAME: String = "getMessageList"
  }
}
