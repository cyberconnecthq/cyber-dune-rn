//
// AUTO-GENERATED FILE. DO NOT MODIFY.
//
// This class was automatically generated by Apollo GraphQL version '3.8.2'.
//
package com.cyberconnect.link3.fragment

import com.apollographql.apollo3.api.Adapter
import com.apollographql.apollo3.api.BooleanAdapter
import com.apollographql.apollo3.api.CustomScalarAdapters
import com.apollographql.apollo3.api.IntAdapter
import com.apollographql.apollo3.api.NullableStringAdapter
import com.apollographql.apollo3.api.StringAdapter
import com.apollographql.apollo3.api.json.JsonReader
import com.apollographql.apollo3.api.json.JsonWriter
import com.apollographql.apollo3.api.list
import com.apollographql.apollo3.api.nullable
import com.apollographql.apollo3.api.obj
import kotlin.Boolean
import kotlin.Int
import kotlin.String
import kotlin.Unit

public object EventAudiencePageImpl_ResponseAdapter {
  public object EventAudiencePage : Adapter<com.cyberconnect.link3.fragment.EventAudiencePage> {
    public val RESPONSE_NAMES: kotlin.collections.List<String> = listOf("pageInfo", "list")

    public override fun fromJson(reader: JsonReader, customScalarAdapters: CustomScalarAdapters):
        com.cyberconnect.link3.fragment.EventAudiencePage {
      var _pageInfo: com.cyberconnect.link3.fragment.EventAudiencePage.PageInfo? = null
      var _list: kotlin.collections.List<com.cyberconnect.link3.fragment.EventAudiencePage.List>? = null

      while(true) {
        when (reader.selectName(RESPONSE_NAMES)) {
          0 -> _pageInfo = PageInfo.obj().fromJson(reader, customScalarAdapters)
          1 -> _list = List.obj().list().fromJson(reader, customScalarAdapters)
          else -> break
        }
      }

      return com.cyberconnect.link3.fragment.EventAudiencePage(
        pageInfo = _pageInfo!!,
        list = _list!!
      )
    }

    public override fun toJson(
      writer: JsonWriter,
      customScalarAdapters: CustomScalarAdapters,
      `value`: com.cyberconnect.link3.fragment.EventAudiencePage,
    ): Unit {
      writer.name("pageInfo")
      PageInfo.obj().toJson(writer, customScalarAdapters, value.pageInfo)

      writer.name("list")
      List.obj().list().toJson(writer, customScalarAdapters, value.list)
    }
  }

  public object PageInfo : Adapter<com.cyberconnect.link3.fragment.EventAudiencePage.PageInfo> {
    public val RESPONSE_NAMES: kotlin.collections.List<String> = listOf("startCursor", "endCursor",
        "hasNextPage", "hasPreviousPage")

    public override fun fromJson(reader: JsonReader, customScalarAdapters: CustomScalarAdapters):
        com.cyberconnect.link3.fragment.EventAudiencePage.PageInfo {
      var _startCursor: String? = null
      var _endCursor: String? = null
      var _hasNextPage: Boolean? = null
      var _hasPreviousPage: Boolean? = null

      while(true) {
        when (reader.selectName(RESPONSE_NAMES)) {
          0 -> _startCursor = StringAdapter.fromJson(reader, customScalarAdapters)
          1 -> _endCursor = StringAdapter.fromJson(reader, customScalarAdapters)
          2 -> _hasNextPage = BooleanAdapter.fromJson(reader, customScalarAdapters)
          3 -> _hasPreviousPage = BooleanAdapter.fromJson(reader, customScalarAdapters)
          else -> break
        }
      }

      return com.cyberconnect.link3.fragment.EventAudiencePage.PageInfo(
        startCursor = _startCursor!!,
        endCursor = _endCursor!!,
        hasNextPage = _hasNextPage!!,
        hasPreviousPage = _hasPreviousPage!!
      )
    }

    public override fun toJson(
      writer: JsonWriter,
      customScalarAdapters: CustomScalarAdapters,
      `value`: com.cyberconnect.link3.fragment.EventAudiencePage.PageInfo,
    ): Unit {
      writer.name("startCursor")
      StringAdapter.toJson(writer, customScalarAdapters, value.startCursor)

      writer.name("endCursor")
      StringAdapter.toJson(writer, customScalarAdapters, value.endCursor)

      writer.name("hasNextPage")
      BooleanAdapter.toJson(writer, customScalarAdapters, value.hasNextPage)

      writer.name("hasPreviousPage")
      BooleanAdapter.toJson(writer, customScalarAdapters, value.hasPreviousPage)
    }
  }

  public object List : Adapter<com.cyberconnect.link3.fragment.EventAudiencePage.List> {
    public val RESPONSE_NAMES: kotlin.collections.List<String> = listOf("stayTime", "raffleClaimed",
        "user")

    public override fun fromJson(reader: JsonReader, customScalarAdapters: CustomScalarAdapters):
        com.cyberconnect.link3.fragment.EventAudiencePage.List {
      var _stayTime: Int? = null
      var _raffleClaimed: Boolean? = null
      var _user: com.cyberconnect.link3.fragment.EventAudiencePage.User? = null

      while(true) {
        when (reader.selectName(RESPONSE_NAMES)) {
          0 -> _stayTime = IntAdapter.fromJson(reader, customScalarAdapters)
          1 -> _raffleClaimed = BooleanAdapter.fromJson(reader, customScalarAdapters)
          2 -> _user = User.obj().fromJson(reader, customScalarAdapters)
          else -> break
        }
      }

      return com.cyberconnect.link3.fragment.EventAudiencePage.List(
        stayTime = _stayTime!!,
        raffleClaimed = _raffleClaimed!!,
        user = _user!!
      )
    }

    public override fun toJson(
      writer: JsonWriter,
      customScalarAdapters: CustomScalarAdapters,
      `value`: com.cyberconnect.link3.fragment.EventAudiencePage.List,
    ): Unit {
      writer.name("stayTime")
      IntAdapter.toJson(writer, customScalarAdapters, value.stayTime)

      writer.name("raffleClaimed")
      BooleanAdapter.toJson(writer, customScalarAdapters, value.raffleClaimed)

      writer.name("user")
      User.obj().toJson(writer, customScalarAdapters, value.user)
    }
  }

  public object User : Adapter<com.cyberconnect.link3.fragment.EventAudiencePage.User> {
    public val RESPONSE_NAMES: kotlin.collections.List<String> = listOf("address", "profileId",
        "avatar", "displayName", "avatarFrameTokenId", "isKol", "discord", "twitter")

    public override fun fromJson(reader: JsonReader, customScalarAdapters: CustomScalarAdapters):
        com.cyberconnect.link3.fragment.EventAudiencePage.User {
      var _address: String? = null
      var _profileId: String? = null
      var _avatar: String? = null
      var _displayName: String? = null
      var _avatarFrameTokenId: String? = null
      var _isKol: Boolean? = null
      var _discord: com.cyberconnect.link3.fragment.EventAudiencePage.Discord? = null
      var _twitter: com.cyberconnect.link3.fragment.EventAudiencePage.Twitter? = null

      while(true) {
        when (reader.selectName(RESPONSE_NAMES)) {
          0 -> _address = StringAdapter.fromJson(reader, customScalarAdapters)
          1 -> _profileId = StringAdapter.fromJson(reader, customScalarAdapters)
          2 -> _avatar = StringAdapter.fromJson(reader, customScalarAdapters)
          3 -> _displayName = StringAdapter.fromJson(reader, customScalarAdapters)
          4 -> _avatarFrameTokenId = NullableStringAdapter.fromJson(reader, customScalarAdapters)
          5 -> _isKol = BooleanAdapter.fromJson(reader, customScalarAdapters)
          6 -> _discord = Discord.obj().nullable().fromJson(reader, customScalarAdapters)
          7 -> _twitter = Twitter.obj().nullable().fromJson(reader, customScalarAdapters)
          else -> break
        }
      }

      return com.cyberconnect.link3.fragment.EventAudiencePage.User(
        address = _address!!,
        profileId = _profileId!!,
        avatar = _avatar!!,
        displayName = _displayName!!,
        avatarFrameTokenId = _avatarFrameTokenId,
        isKol = _isKol!!,
        discord = _discord,
        twitter = _twitter
      )
    }

    public override fun toJson(
      writer: JsonWriter,
      customScalarAdapters: CustomScalarAdapters,
      `value`: com.cyberconnect.link3.fragment.EventAudiencePage.User,
    ): Unit {
      writer.name("address")
      StringAdapter.toJson(writer, customScalarAdapters, value.address)

      writer.name("profileId")
      StringAdapter.toJson(writer, customScalarAdapters, value.profileId)

      writer.name("avatar")
      StringAdapter.toJson(writer, customScalarAdapters, value.avatar)

      writer.name("displayName")
      StringAdapter.toJson(writer, customScalarAdapters, value.displayName)

      writer.name("avatarFrameTokenId")
      NullableStringAdapter.toJson(writer, customScalarAdapters, value.avatarFrameTokenId)

      writer.name("isKol")
      BooleanAdapter.toJson(writer, customScalarAdapters, value.isKol)

      writer.name("discord")
      Discord.obj().nullable().toJson(writer, customScalarAdapters, value.discord)

      writer.name("twitter")
      Twitter.obj().nullable().toJson(writer, customScalarAdapters, value.twitter)
    }
  }

  public object Discord : Adapter<com.cyberconnect.link3.fragment.EventAudiencePage.Discord> {
    public val RESPONSE_NAMES: kotlin.collections.List<String> = listOf("discordId",
        "discriminator", "displayName", "avatar", "role")

    public override fun fromJson(reader: JsonReader, customScalarAdapters: CustomScalarAdapters):
        com.cyberconnect.link3.fragment.EventAudiencePage.Discord {
      var _discordId: String? = null
      var _discriminator: String? = null
      var _displayName: String? = null
      var _avatar: String? = null
      var _role: kotlin.collections.List<String>? = null

      while(true) {
        when (reader.selectName(RESPONSE_NAMES)) {
          0 -> _discordId = StringAdapter.fromJson(reader, customScalarAdapters)
          1 -> _discriminator = StringAdapter.fromJson(reader, customScalarAdapters)
          2 -> _displayName = StringAdapter.fromJson(reader, customScalarAdapters)
          3 -> _avatar = StringAdapter.fromJson(reader, customScalarAdapters)
          4 -> _role = StringAdapter.list().fromJson(reader, customScalarAdapters)
          else -> break
        }
      }

      return com.cyberconnect.link3.fragment.EventAudiencePage.Discord(
        discordId = _discordId!!,
        discriminator = _discriminator!!,
        displayName = _displayName!!,
        avatar = _avatar!!,
        role = _role!!
      )
    }

    public override fun toJson(
      writer: JsonWriter,
      customScalarAdapters: CustomScalarAdapters,
      `value`: com.cyberconnect.link3.fragment.EventAudiencePage.Discord,
    ): Unit {
      writer.name("discordId")
      StringAdapter.toJson(writer, customScalarAdapters, value.discordId)

      writer.name("discriminator")
      StringAdapter.toJson(writer, customScalarAdapters, value.discriminator)

      writer.name("displayName")
      StringAdapter.toJson(writer, customScalarAdapters, value.displayName)

      writer.name("avatar")
      StringAdapter.toJson(writer, customScalarAdapters, value.avatar)

      writer.name("role")
      StringAdapter.list().toJson(writer, customScalarAdapters, value.role)
    }
  }

  public object Twitter : Adapter<com.cyberconnect.link3.fragment.EventAudiencePage.Twitter> {
    public val RESPONSE_NAMES: kotlin.collections.List<String> = listOf("twitterId",
        "twitterHandle", "displayName", "avatar", "followersCount")

    public override fun fromJson(reader: JsonReader, customScalarAdapters: CustomScalarAdapters):
        com.cyberconnect.link3.fragment.EventAudiencePage.Twitter {
      var _twitterId: String? = null
      var _twitterHandle: String? = null
      var _displayName: String? = null
      var _avatar: String? = null
      var _followersCount: Int? = null

      while(true) {
        when (reader.selectName(RESPONSE_NAMES)) {
          0 -> _twitterId = StringAdapter.fromJson(reader, customScalarAdapters)
          1 -> _twitterHandle = StringAdapter.fromJson(reader, customScalarAdapters)
          2 -> _displayName = StringAdapter.fromJson(reader, customScalarAdapters)
          3 -> _avatar = StringAdapter.fromJson(reader, customScalarAdapters)
          4 -> _followersCount = IntAdapter.fromJson(reader, customScalarAdapters)
          else -> break
        }
      }

      return com.cyberconnect.link3.fragment.EventAudiencePage.Twitter(
        twitterId = _twitterId!!,
        twitterHandle = _twitterHandle!!,
        displayName = _displayName!!,
        avatar = _avatar!!,
        followersCount = _followersCount!!
      )
    }

    public override fun toJson(
      writer: JsonWriter,
      customScalarAdapters: CustomScalarAdapters,
      `value`: com.cyberconnect.link3.fragment.EventAudiencePage.Twitter,
    ): Unit {
      writer.name("twitterId")
      StringAdapter.toJson(writer, customScalarAdapters, value.twitterId)

      writer.name("twitterHandle")
      StringAdapter.toJson(writer, customScalarAdapters, value.twitterHandle)

      writer.name("displayName")
      StringAdapter.toJson(writer, customScalarAdapters, value.displayName)

      writer.name("avatar")
      StringAdapter.toJson(writer, customScalarAdapters, value.avatar)

      writer.name("followersCount")
      IntAdapter.toJson(writer, customScalarAdapters, value.followersCount)
    }
  }
}
