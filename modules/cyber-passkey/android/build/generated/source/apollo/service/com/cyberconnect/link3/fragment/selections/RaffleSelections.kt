//
// AUTO-GENERATED FILE. DO NOT MODIFY.
//
// This class was automatically generated by Apollo GraphQL version '3.8.2'.
//
package com.cyberconnect.link3.fragment.selections

import com.apollographql.apollo3.api.CompiledField
import com.apollographql.apollo3.api.CompiledFragment
import com.apollographql.apollo3.api.CompiledSelection
import com.apollographql.apollo3.api.list
import com.apollographql.apollo3.api.notNull
import com.cyberconnect.link3.type.Award
import com.cyberconnect.link3.type.GraphQLBoolean
import com.cyberconnect.link3.type.GraphQLInt
import com.cyberconnect.link3.type.GraphQLString
import com.cyberconnect.link3.type.JoinStatus
import com.cyberconnect.link3.type.RaffleJoinStatus
import com.cyberconnect.link3.type.RaffleRequirements
import com.cyberconnect.link3.type.RaffleRequirements_TwitterToFollow
import com.cyberconnect.link3.type.Timestamp
import com.cyberconnect.link3.type.Url
import kotlin.collections.List

public object RaffleSelections {
  private val __awards: List<CompiledSelection> = listOf(
        CompiledField.Builder(
          name = "__typename",
          type = GraphQLString.type.notNull()
        ).build(),
        CompiledFragment.Builder(
          typeCondition = "TokenAward",
          possibleTypes = listOf("TokenAward")
        ).selections(TokenAwardSelections.__root)
        .build(),
        CompiledFragment.Builder(
          typeCondition = "CodeAward",
          possibleTypes = listOf("CodeAward")
        ).selections(CodeAwardSelections.__root)
        .build()
      )

  private val __joinStatus: List<CompiledSelection> = listOf(
        CompiledField.Builder(
          name = "status",
          type = JoinStatus.type.notNull()
        ).build(),
        CompiledField.Builder(
          name = "myAward",
          type = GraphQLString.type
        ).build()
      )

  private val __twittersToFollow: List<CompiledSelection> = listOf(
        CompiledField.Builder(
          name = "twitterId",
          type = GraphQLString.type.notNull()
        ).build(),
        CompiledField.Builder(
          name = "twitterHandle",
          type = GraphQLString.type.notNull()
        ).build()
      )

  private val __requirement: List<CompiledSelection> = listOf(
        CompiledField.Builder(
          name = "retweet",
          type = GraphQLBoolean.type.notNull()
        ).build(),
        CompiledField.Builder(
          name = "follow",
          type = GraphQLBoolean.type.notNull()
        ).build(),
        CompiledField.Builder(
          name = "comment",
          type = GraphQLBoolean.type.notNull()
        ).build(),
        CompiledField.Builder(
          name = "likeAndRetweet",
          type = GraphQLBoolean.type.notNull()
        ).build(),
        CompiledField.Builder(
          name = "tag",
          type = GraphQLBoolean.type.notNull()
        ).build(),
        CompiledField.Builder(
          name = "multiFollow",
          type = GraphQLBoolean.type.notNull()
        ).build(),
        CompiledField.Builder(
          name = "whitelist",
          type = GraphQLBoolean.type.notNull()
        ).build(),
        CompiledField.Builder(
          name = "attend",
          type = GraphQLBoolean.type.notNull()
        ).build(),
        CompiledField.Builder(
          name = "twittersToFollow",
          type = RaffleRequirements_TwitterToFollow.type.notNull().list().notNull()
        ).selections(__twittersToFollow)
        .build()
      )

  public val __root: List<CompiledSelection> = listOf(
        CompiledField.Builder(
          name = "awards",
          type = Award.type.notNull()
        ).selections(__awards)
        .build(),
        CompiledField.Builder(
          name = "tweetUrl",
          type = Url.type.notNull()
        ).build(),
        CompiledField.Builder(
          name = "joinStatus",
          type = RaffleJoinStatus.type.notNull()
        ).selections(__joinStatus)
        .build(),
        CompiledField.Builder(
          name = "winnersCount",
          type = GraphQLInt.type.notNull()
        ).build(),
        CompiledField.Builder(
          name = "joinedCount",
          type = GraphQLInt.type.notNull()
        ).build(),
        CompiledField.Builder(
          name = "claimDeadline",
          type = Timestamp.type.notNull()
        ).build(),
        CompiledField.Builder(
          name = "participateDeadline",
          type = Timestamp.type.notNull()
        ).build(),
        CompiledField.Builder(
          name = "requirement",
          type = RaffleRequirements.type.notNull()
        ).selections(__requirement)
        .build()
      )
}
