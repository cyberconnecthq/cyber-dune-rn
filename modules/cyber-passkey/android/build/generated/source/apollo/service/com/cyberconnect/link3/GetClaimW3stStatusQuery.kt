//
// AUTO-GENERATED FILE. DO NOT MODIFY.
//
// This class was automatically generated by Apollo GraphQL version '3.8.2'.
//
package com.cyberconnect.link3

import com.apollographql.apollo3.annotations.ApolloAdaptableWith
import com.apollographql.apollo3.api.Adapter
import com.apollographql.apollo3.api.CompiledField
import com.apollographql.apollo3.api.CustomScalarAdapters
import com.apollographql.apollo3.api.Query
import com.apollographql.apollo3.api.json.JsonWriter
import com.apollographql.apollo3.api.obj
import com.cyberconnect.link3.adapter.GetClaimW3stStatusQuery_ResponseAdapter
import com.cyberconnect.link3.adapter.GetClaimW3stStatusQuery_VariablesAdapter
import com.cyberconnect.link3.selections.GetClaimW3stStatusQuerySelections
import com.cyberconnect.link3.type.W3STRequirementType
import kotlin.Boolean
import kotlin.Int
import kotlin.String
import kotlin.Unit
import kotlin.collections.List

public data class GetClaimW3stStatusQuery(
  public val id: String,
) : Query<GetClaimW3stStatusQuery.Data> {
  public override fun id(): String = OPERATION_ID

  public override fun document(): String = OPERATION_DOCUMENT

  public override fun name(): String = OPERATION_NAME

  public override fun serializeVariables(writer: JsonWriter,
      customScalarAdapters: CustomScalarAdapters): Unit {
    GetClaimW3stStatusQuery_VariablesAdapter.toJson(writer, customScalarAdapters, this)
  }

  public override fun adapter(): Adapter<Data> = GetClaimW3stStatusQuery_ResponseAdapter.Data.obj()

  public override fun rootField(): CompiledField = CompiledField.Builder(
    name = "data",
    type = com.cyberconnect.link3.type.Query.type
  )
  .selections(selections = GetClaimW3stStatusQuerySelections.__root)
  .build()

  @ApolloAdaptableWith(GetClaimW3stStatusQuery_ResponseAdapter.Data::class)
  public data class Data(
    public val event: Event?,
  ) : Query.Data

  public data class Event(
    public val organizer: Organizer,
    public val w3st: W3st?,
  )

  public data class Organizer(
    public val __typename: String,
    /**
     * Synthetic field for 'Organizer'
     */
    public val organizer: com.cyberconnect.link3.fragment.Organizer,
  )

  public data class W3st(
    /**
     * current user status
     */
    public val eligible: Eligible?,
  )

  public data class Eligible(
    public val unclaimed: Int,
    public val claiming: Int,
    public val claimed: Int,
    public val stayTime: Int,
    public val readyToClaim: Boolean,
    public val claimedByOther: Boolean,
    public val firstClaim: Boolean,
    public val requirements: List<Requirement>,
  )

  public data class Requirement(
    public val eligible: Boolean,
    public val requirement: Requirement1,
  )

  public data class Requirement1(
    public val type: W3STRequirementType,
    public val `value`: Int?,
  )

  public companion object {
    public const val OPERATION_ID: String =
        "5dd39125b6272cdbc3ca393eb689684ac0e002145666bb20e48e93295c167105"

    /**
     * The minimized GraphQL document being sent to the server to save a few bytes.
     * The un-minimized version is:
     *
     * query getClaimW3stStatus($id: ID!) {
     *   event(id: $id) {
     *     organizer {
     *       __typename
     *       ...Organizer
     *     }
     *     w3st {
     *       eligible {
     *         unclaimed
     *         claiming
     *         claimed
     *         stayTime
     *         readyToClaim
     *         claimedByOther
     *         firstClaim
     *         requirements {
     *           eligible
     *           requirement {
     *             type
     *             value
     *           }
     *         }
     *       }
     *     }
     *   }
     * }
     *
     * fragment Organizer on Organization {
     *   twitterId
     *   id
     *   followersCount
     *   verification
     *   currentAccess
     *   lightInfo {
     *     isFollowing
     *     displayName
     *     profilePicture
     *     profileHandle
     *   }
     * }
     */
    public val OPERATION_DOCUMENT: String
      get() =
          "query getClaimW3stStatus(${'$'}id: ID!) { event(id: ${'$'}id) { organizer { __typename ...Organizer } w3st { eligible { unclaimed claiming claimed stayTime readyToClaim claimedByOther firstClaim requirements { eligible requirement { type value } } } } } }  fragment Organizer on Organization { twitterId id followersCount verification currentAccess lightInfo { isFollowing displayName profilePicture profileHandle } }"

    public const val OPERATION_NAME: String = "getClaimW3stStatus"
  }
}
