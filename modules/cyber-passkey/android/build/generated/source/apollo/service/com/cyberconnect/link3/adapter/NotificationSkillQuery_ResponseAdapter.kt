//
// AUTO-GENERATED FILE. DO NOT MODIFY.
//
// This class was automatically generated by Apollo GraphQL version '3.8.2'.
//
package com.cyberconnect.link3.adapter

import com.apollographql.apollo3.api.Adapter
import com.apollographql.apollo3.api.CustomScalarAdapters
import com.apollographql.apollo3.api.StringAdapter
import com.apollographql.apollo3.api.evaluate
import com.apollographql.apollo3.api.json.JsonReader
import com.apollographql.apollo3.api.json.JsonWriter
import com.apollographql.apollo3.api.list
import com.apollographql.apollo3.api.nullable
import com.apollographql.apollo3.api.obj
import com.apollographql.apollo3.api.possibleTypes
import com.cyberconnect.link3.NotificationSkillQuery
import com.cyberconnect.link3.fragment.Skill
import kotlin.String
import kotlin.Unit

public object NotificationSkillQuery_ResponseAdapter {
  public object Data : Adapter<NotificationSkillQuery.Data> {
    public val RESPONSE_NAMES: kotlin.collections.List<String> = listOf("me")

    public override fun fromJson(reader: JsonReader, customScalarAdapters: CustomScalarAdapters):
        NotificationSkillQuery.Data {
      var _me: NotificationSkillQuery.Me? = null

      while(true) {
        when (reader.selectName(RESPONSE_NAMES)) {
          0 -> _me = Me.obj().fromJson(reader, customScalarAdapters)
          else -> break
        }
      }

      return NotificationSkillQuery.Data(
        me = _me!!
      )
    }

    public override fun toJson(
      writer: JsonWriter,
      customScalarAdapters: CustomScalarAdapters,
      `value`: NotificationSkillQuery.Data,
    ): Unit {
      writer.name("me")
      Me.obj().toJson(writer, customScalarAdapters, value.me)
    }
  }

  public object Me : Adapter<NotificationSkillQuery.Me> {
    public val RESPONSE_NAMES: kotlin.collections.List<String> = listOf("data")

    public override fun fromJson(reader: JsonReader, customScalarAdapters: CustomScalarAdapters):
        NotificationSkillQuery.Me {
      var _data: NotificationSkillQuery.Data1? = null

      while(true) {
        when (reader.selectName(RESPONSE_NAMES)) {
          0 -> _data = Data1.obj().nullable().fromJson(reader, customScalarAdapters)
          else -> break
        }
      }

      return NotificationSkillQuery.Me(
        `data` = _data
      )
    }

    public override fun toJson(
      writer: JsonWriter,
      customScalarAdapters: CustomScalarAdapters,
      `value`: NotificationSkillQuery.Me,
    ): Unit {
      writer.name("data")
      Data1.obj().nullable().toJson(writer, customScalarAdapters, value.`data`)
    }
  }

  public object Data1 : Adapter<NotificationSkillQuery.Data1> {
    public val RESPONSE_NAMES: kotlin.collections.List<String> = listOf("notifications")

    public override fun fromJson(reader: JsonReader, customScalarAdapters: CustomScalarAdapters):
        NotificationSkillQuery.Data1 {
      var _notifications: NotificationSkillQuery.Notifications? = null

      while(true) {
        when (reader.selectName(RESPONSE_NAMES)) {
          0 -> _notifications = Notifications.obj().nullable().fromJson(reader,
              customScalarAdapters)
          else -> break
        }
      }

      return NotificationSkillQuery.Data1(
        notifications = _notifications
      )
    }

    public override fun toJson(
      writer: JsonWriter,
      customScalarAdapters: CustomScalarAdapters,
      `value`: NotificationSkillQuery.Data1,
    ): Unit {
      writer.name("notifications")
      Notifications.obj().nullable().toJson(writer, customScalarAdapters, value.notifications)
    }
  }

  public object Notifications : Adapter<NotificationSkillQuery.Notifications> {
    public val RESPONSE_NAMES: kotlin.collections.List<String> = listOf("list", "pageInfo")

    public override fun fromJson(reader: JsonReader, customScalarAdapters: CustomScalarAdapters):
        NotificationSkillQuery.Notifications {
      var _list: kotlin.collections.List<NotificationSkillQuery.List>? = null
      var _pageInfo: NotificationSkillQuery.PageInfo? = null

      while(true) {
        when (reader.selectName(RESPONSE_NAMES)) {
          0 -> _list = List.obj(true).list().fromJson(reader, customScalarAdapters)
          1 -> _pageInfo = PageInfo.obj(true).fromJson(reader, customScalarAdapters)
          else -> break
        }
      }

      return NotificationSkillQuery.Notifications(
        list = _list!!,
        pageInfo = _pageInfo!!
      )
    }

    public override fun toJson(
      writer: JsonWriter,
      customScalarAdapters: CustomScalarAdapters,
      `value`: NotificationSkillQuery.Notifications,
    ): Unit {
      writer.name("list")
      List.obj(true).list().toJson(writer, customScalarAdapters, value.list)

      writer.name("pageInfo")
      PageInfo.obj(true).toJson(writer, customScalarAdapters, value.pageInfo)
    }
  }

  public object List : Adapter<NotificationSkillQuery.List> {
    public val RESPONSE_NAMES: kotlin.collections.List<String> = listOf("__typename")

    public override fun fromJson(reader: JsonReader, customScalarAdapters: CustomScalarAdapters):
        NotificationSkillQuery.List {
      var __typename: String? = null

      while(true) {
        when (reader.selectName(RESPONSE_NAMES)) {
          0 -> __typename = StringAdapter.fromJson(reader, customScalarAdapters)
          else -> break
        }
      }

      check(__typename != null) {
        "__typename was not found"
      }

      var _skill: Skill? = null
      if (possibleTypes("SkillEndorsementNotification").evaluate(customScalarAdapters.adapterContext.variables(), __typename, customScalarAdapters.adapterContext, null)) {
        reader.rewind()
        _skill = com.cyberconnect.link3.fragment.SkillImpl_ResponseAdapter.Skill.fromJson(reader,
            customScalarAdapters)
      }

      return NotificationSkillQuery.List(
        __typename = __typename,
        skill = _skill
      )
    }

    public override fun toJson(
      writer: JsonWriter,
      customScalarAdapters: CustomScalarAdapters,
      `value`: NotificationSkillQuery.List,
    ): Unit {
      writer.name("__typename")
      StringAdapter.toJson(writer, customScalarAdapters, value.__typename)

      if (value.skill != null) {
        com.cyberconnect.link3.fragment.SkillImpl_ResponseAdapter.Skill.toJson(writer,
            customScalarAdapters, value.skill)
      }
    }
  }

  public object PageInfo : Adapter<NotificationSkillQuery.PageInfo> {
    public val RESPONSE_NAMES: kotlin.collections.List<String> = listOf("__typename")

    public override fun fromJson(reader: JsonReader, customScalarAdapters: CustomScalarAdapters):
        NotificationSkillQuery.PageInfo {
      var __typename: String? = null

      while(true) {
        when (reader.selectName(RESPONSE_NAMES)) {
          0 -> __typename = StringAdapter.fromJson(reader, customScalarAdapters)
          else -> break
        }
      }

      reader.rewind()
      val _pageInfo = com.cyberconnect.link3.fragment.PageInfoImpl_ResponseAdapter.PageInfo.fromJson(reader,
          customScalarAdapters)

      return NotificationSkillQuery.PageInfo(
        __typename = __typename!!,
        pageInfo = _pageInfo
      )
    }

    public override fun toJson(
      writer: JsonWriter,
      customScalarAdapters: CustomScalarAdapters,
      `value`: NotificationSkillQuery.PageInfo,
    ): Unit {
      writer.name("__typename")
      StringAdapter.toJson(writer, customScalarAdapters, value.__typename)

      com.cyberconnect.link3.fragment.PageInfoImpl_ResponseAdapter.PageInfo.toJson(writer,
          customScalarAdapters, value.pageInfo)
    }
  }
}
