//
// AUTO-GENERATED FILE. DO NOT MODIFY.
//
// This class was automatically generated by Apollo GraphQL version '3.8.2'.
//
package com.cyberconnect.link3.selections

import com.apollographql.apollo3.api.CompiledArgument
import com.apollographql.apollo3.api.CompiledField
import com.apollographql.apollo3.api.CompiledSelection
import com.apollographql.apollo3.api.CompiledVariable
import com.apollographql.apollo3.api.notNull
import com.cyberconnect.link3.type.EVMAddress
import com.cyberconnect.link3.type.GraphQLID
import com.cyberconnect.link3.type.GraphQLString
import com.cyberconnect.link3.type.LoginResponse
import com.cyberconnect.link3.type.LoginResponse_Status
import com.cyberconnect.link3.type.PrivateInfo
import com.cyberconnect.link3.type.User
import kotlin.collections.List

public object LoginMutationSelections {
  private val __privateInfo: List<CompiledSelection> = listOf(
        CompiledField.Builder(
          name = "address",
          type = EVMAddress.type.notNull()
        ).build(),
        CompiledField.Builder(
          name = "accessToken",
          type = GraphQLString.type.notNull()
        ).build()
      )

  private val __data: List<CompiledSelection> = listOf(
        CompiledField.Builder(
          name = "id",
          type = GraphQLID.type.notNull()
        ).build(),
        CompiledField.Builder(
          name = "privateInfo",
          type = PrivateInfo.type
        ).selections(__privateInfo)
        .build()
      )

  private val __login: List<CompiledSelection> = listOf(
        CompiledField.Builder(
          name = "status",
          type = LoginResponse_Status.type.notNull()
        ).build(),
        CompiledField.Builder(
          name = "message",
          type = GraphQLString.type.notNull()
        ).build(),
        CompiledField.Builder(
          name = "data",
          type = User.type
        ).selections(__data)
        .build()
      )

  public val __root: List<CompiledSelection> = listOf(
        CompiledField.Builder(
          name = "login",
          type = LoginResponse.type.notNull()
        ).arguments(listOf(
          CompiledArgument.Builder("request", mapOf(
            "address" to CompiledVariable("address"),
            "signature" to CompiledVariable("signature"),
            "signedMessage" to CompiledVariable("signedMessage"),
            "token" to CompiledVariable("token"),
            "isEIP1271" to CompiledVariable("isEIP1271"),
            "chainId" to CompiledVariable("chainId")
          )).build()
        ))
        .selections(__login)
        .build()
      )
}
