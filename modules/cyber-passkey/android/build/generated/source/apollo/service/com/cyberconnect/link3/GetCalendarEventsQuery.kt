//
// AUTO-GENERATED FILE. DO NOT MODIFY.
//
// This class was automatically generated by Apollo GraphQL version '3.8.2'.
//
package com.cyberconnect.link3

import com.apollographql.apollo3.annotations.ApolloAdaptableWith
import com.apollographql.apollo3.api.Adapter
import com.apollographql.apollo3.api.CompiledField
import com.apollographql.apollo3.api.CustomScalarAdapters
import com.apollographql.apollo3.api.Query
import com.apollographql.apollo3.api.json.JsonWriter
import com.apollographql.apollo3.api.obj
import com.cyberconnect.link3.adapter.GetCalendarEventsQuery_ResponseAdapter
import com.cyberconnect.link3.adapter.GetCalendarEventsQuery_VariablesAdapter
import com.cyberconnect.link3.selections.GetCalendarEventsQuerySelections
import com.cyberconnect.link3.type.EventStatus
import kotlin.Any
import kotlin.String
import kotlin.Unit
import kotlin.collections.List

public data class GetCalendarEventsQuery(
  public val startTimestamp: Any,
  public val endTimestamp: Any,
) : Query<GetCalendarEventsQuery.Data> {
  public override fun id(): String = OPERATION_ID

  public override fun document(): String = OPERATION_DOCUMENT

  public override fun name(): String = OPERATION_NAME

  public override fun serializeVariables(writer: JsonWriter,
      customScalarAdapters: CustomScalarAdapters): Unit {
    GetCalendarEventsQuery_VariablesAdapter.toJson(writer, customScalarAdapters, this)
  }

  public override fun adapter(): Adapter<Data> = GetCalendarEventsQuery_ResponseAdapter.Data.obj()

  public override fun rootField(): CompiledField = CompiledField.Builder(
    name = "data",
    type = com.cyberconnect.link3.type.Query.type
  )
  .selections(selections = GetCalendarEventsQuerySelections.__root)
  .build()

  @ApolloAdaptableWith(GetCalendarEventsQuery_ResponseAdapter.Data::class)
  public data class Data(
    public val me: Me,
  ) : Query.Data

  public data class Me(
    public val `data`: Data1?,
  )

  public data class Data1(
    public val calendarEvents: List<CalendarEvent>?,
  )

  public data class CalendarEvent(
    public val id: String,
    public val info: String,
    public val title: String,
    public val posterUrl: Any,
    public val startTimestamp: Any,
    public val endTimestamp: Any,
    public val status: EventStatus,
    public val organizer: Organizer,
  )

  public data class Organizer(
    public val __typename: String,
    /**
     * Synthetic field for 'Organizer'
     */
    public val organizer: com.cyberconnect.link3.fragment.Organizer,
  )

  public companion object {
    public const val OPERATION_ID: String =
        "10c0f6b911c717754facec781faa8e2ec57a436e8b853dbb2e8aeb649f9e2aa6"

    /**
     * The minimized GraphQL document being sent to the server to save a few bytes.
     * The un-minimized version is:
     *
     * query getCalendarEvents($startTimestamp: Timestamp!, $endTimestamp: Timestamp!) {
     *   me {
     *     data {
     *       calendarEvents(startTimestamp: $startTimestamp, endTimestamp: $endTimestamp) {
     *         id
     *         info
     *         title
     *         posterUrl
     *         startTimestamp
     *         endTimestamp
     *         status
     *         organizer {
     *           __typename
     *           ...Organizer
     *         }
     *       }
     *     }
     *   }
     * }
     *
     * fragment Organizer on Organization {
     *   twitterId
     *   id
     *   followersCount
     *   verification
     *   currentAccess
     *   lightInfo {
     *     isFollowing
     *     displayName
     *     profilePicture
     *     profileHandle
     *   }
     * }
     */
    public val OPERATION_DOCUMENT: String
      get() =
          "query getCalendarEvents(${'$'}startTimestamp: Timestamp!, ${'$'}endTimestamp: Timestamp!) { me { data { calendarEvents(startTimestamp: ${'$'}startTimestamp, endTimestamp: ${'$'}endTimestamp) { id info title posterUrl startTimestamp endTimestamp status organizer { __typename ...Organizer } } } } }  fragment Organizer on Organization { twitterId id followersCount verification currentAccess lightInfo { isFollowing displayName profilePicture profileHandle } }"

    public const val OPERATION_NAME: String = "getCalendarEvents"
  }
}
