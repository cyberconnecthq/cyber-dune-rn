//
// AUTO-GENERATED FILE. DO NOT MODIFY.
//
// This class was automatically generated by Apollo GraphQL version '3.8.2'.
//
package com.cyberconnect.link3.adapter

import com.apollographql.apollo3.api.Adapter
import com.apollographql.apollo3.api.AnyAdapter
import com.apollographql.apollo3.api.BooleanAdapter
import com.apollographql.apollo3.api.CustomScalarAdapters
import com.apollographql.apollo3.api.IntAdapter
import com.apollographql.apollo3.api.NullableStringAdapter
import com.apollographql.apollo3.api.StringAdapter
import com.apollographql.apollo3.api.json.JsonReader
import com.apollographql.apollo3.api.json.JsonWriter
import com.apollographql.apollo3.api.list
import com.apollographql.apollo3.api.nullable
import com.apollographql.apollo3.api.obj
import com.cyberconnect.link3.GetPostCommentReplyQuery
import kotlin.Any
import kotlin.Boolean
import kotlin.Int
import kotlin.String
import kotlin.Unit

public object GetPostCommentReplyQuery_ResponseAdapter {
  public object Data : Adapter<GetPostCommentReplyQuery.Data> {
    public val RESPONSE_NAMES: kotlin.collections.List<String> = listOf("comment")

    public override fun fromJson(reader: JsonReader, customScalarAdapters: CustomScalarAdapters):
        GetPostCommentReplyQuery.Data {
      var _comment: GetPostCommentReplyQuery.Comment? = null

      while(true) {
        when (reader.selectName(RESPONSE_NAMES)) {
          0 -> _comment = Comment.obj().nullable().fromJson(reader, customScalarAdapters)
          else -> break
        }
      }

      return GetPostCommentReplyQuery.Data(
        comment = _comment
      )
    }

    public override fun toJson(
      writer: JsonWriter,
      customScalarAdapters: CustomScalarAdapters,
      `value`: GetPostCommentReplyQuery.Data,
    ): Unit {
      writer.name("comment")
      Comment.obj().nullable().toJson(writer, customScalarAdapters, value.comment)
    }
  }

  public object Comment : Adapter<GetPostCommentReplyQuery.Comment> {
    public val RESPONSE_NAMES: kotlin.collections.List<String> = listOf("commentCount", "comments")

    public override fun fromJson(reader: JsonReader, customScalarAdapters: CustomScalarAdapters):
        GetPostCommentReplyQuery.Comment {
      var _commentCount: Int? = null
      var _comments: GetPostCommentReplyQuery.Comments? = null

      while(true) {
        when (reader.selectName(RESPONSE_NAMES)) {
          0 -> _commentCount = IntAdapter.fromJson(reader, customScalarAdapters)
          1 -> _comments = Comments.obj().fromJson(reader, customScalarAdapters)
          else -> break
        }
      }

      return GetPostCommentReplyQuery.Comment(
        commentCount = _commentCount!!,
        comments = _comments!!
      )
    }

    public override fun toJson(
      writer: JsonWriter,
      customScalarAdapters: CustomScalarAdapters,
      `value`: GetPostCommentReplyQuery.Comment,
    ): Unit {
      writer.name("commentCount")
      IntAdapter.toJson(writer, customScalarAdapters, value.commentCount)

      writer.name("comments")
      Comments.obj().toJson(writer, customScalarAdapters, value.comments)
    }
  }

  public object Comments : Adapter<GetPostCommentReplyQuery.Comments> {
    public val RESPONSE_NAMES: kotlin.collections.List<String> = listOf("pageInfo", "list")

    public override fun fromJson(reader: JsonReader, customScalarAdapters: CustomScalarAdapters):
        GetPostCommentReplyQuery.Comments {
      var _pageInfo: GetPostCommentReplyQuery.PageInfo? = null
      var _list: kotlin.collections.List<GetPostCommentReplyQuery.List>? = null

      while(true) {
        when (reader.selectName(RESPONSE_NAMES)) {
          0 -> _pageInfo = PageInfo.obj().fromJson(reader, customScalarAdapters)
          1 -> _list = List.obj().list().fromJson(reader, customScalarAdapters)
          else -> break
        }
      }

      return GetPostCommentReplyQuery.Comments(
        pageInfo = _pageInfo!!,
        list = _list!!
      )
    }

    public override fun toJson(
      writer: JsonWriter,
      customScalarAdapters: CustomScalarAdapters,
      `value`: GetPostCommentReplyQuery.Comments,
    ): Unit {
      writer.name("pageInfo")
      PageInfo.obj().toJson(writer, customScalarAdapters, value.pageInfo)

      writer.name("list")
      List.obj().list().toJson(writer, customScalarAdapters, value.list)
    }
  }

  public object PageInfo : Adapter<GetPostCommentReplyQuery.PageInfo> {
    public val RESPONSE_NAMES: kotlin.collections.List<String> = listOf("startCursor", "endCursor",
        "hasNextPage", "hasPreviousPage")

    public override fun fromJson(reader: JsonReader, customScalarAdapters: CustomScalarAdapters):
        GetPostCommentReplyQuery.PageInfo {
      var _startCursor: String? = null
      var _endCursor: String? = null
      var _hasNextPage: Boolean? = null
      var _hasPreviousPage: Boolean? = null

      while(true) {
        when (reader.selectName(RESPONSE_NAMES)) {
          0 -> _startCursor = StringAdapter.fromJson(reader, customScalarAdapters)
          1 -> _endCursor = StringAdapter.fromJson(reader, customScalarAdapters)
          2 -> _hasNextPage = BooleanAdapter.fromJson(reader, customScalarAdapters)
          3 -> _hasPreviousPage = BooleanAdapter.fromJson(reader, customScalarAdapters)
          else -> break
        }
      }

      return GetPostCommentReplyQuery.PageInfo(
        startCursor = _startCursor!!,
        endCursor = _endCursor!!,
        hasNextPage = _hasNextPage!!,
        hasPreviousPage = _hasPreviousPage!!
      )
    }

    public override fun toJson(
      writer: JsonWriter,
      customScalarAdapters: CustomScalarAdapters,
      `value`: GetPostCommentReplyQuery.PageInfo,
    ): Unit {
      writer.name("startCursor")
      StringAdapter.toJson(writer, customScalarAdapters, value.startCursor)

      writer.name("endCursor")
      StringAdapter.toJson(writer, customScalarAdapters, value.endCursor)

      writer.name("hasNextPage")
      BooleanAdapter.toJson(writer, customScalarAdapters, value.hasNextPage)

      writer.name("hasPreviousPage")
      BooleanAdapter.toJson(writer, customScalarAdapters, value.hasPreviousPage)
    }
  }

  public object List : Adapter<GetPostCommentReplyQuery.List> {
    public val RESPONSE_NAMES: kotlin.collections.List<String> = listOf("id", "author", "body",
        "likedStatus", "likeCount", "publishedAt")

    public override fun fromJson(reader: JsonReader, customScalarAdapters: CustomScalarAdapters):
        GetPostCommentReplyQuery.List {
      var _id: String? = null
      var _author: GetPostCommentReplyQuery.Author? = null
      var _body: String? = null
      var _likedStatus: GetPostCommentReplyQuery.LikedStatus? = null
      var _likeCount: Int? = null
      var _publishedAt: Any? = null

      while(true) {
        when (reader.selectName(RESPONSE_NAMES)) {
          0 -> _id = StringAdapter.fromJson(reader, customScalarAdapters)
          1 -> _author = Author.obj().fromJson(reader, customScalarAdapters)
          2 -> _body = StringAdapter.fromJson(reader, customScalarAdapters)
          3 -> _likedStatus = LikedStatus.obj().fromJson(reader, customScalarAdapters)
          4 -> _likeCount = IntAdapter.fromJson(reader, customScalarAdapters)
          5 -> _publishedAt = AnyAdapter.fromJson(reader, customScalarAdapters)
          else -> break
        }
      }

      return GetPostCommentReplyQuery.List(
        id = _id!!,
        author = _author!!,
        body = _body!!,
        likedStatus = _likedStatus!!,
        likeCount = _likeCount!!,
        publishedAt = _publishedAt!!
      )
    }

    public override fun toJson(
      writer: JsonWriter,
      customScalarAdapters: CustomScalarAdapters,
      `value`: GetPostCommentReplyQuery.List,
    ): Unit {
      writer.name("id")
      StringAdapter.toJson(writer, customScalarAdapters, value.id)

      writer.name("author")
      Author.obj().toJson(writer, customScalarAdapters, value.author)

      writer.name("body")
      StringAdapter.toJson(writer, customScalarAdapters, value.body)

      writer.name("likedStatus")
      LikedStatus.obj().toJson(writer, customScalarAdapters, value.likedStatus)

      writer.name("likeCount")
      IntAdapter.toJson(writer, customScalarAdapters, value.likeCount)

      writer.name("publishedAt")
      AnyAdapter.toJson(writer, customScalarAdapters, value.publishedAt)
    }
  }

  public object Author : Adapter<GetPostCommentReplyQuery.Author> {
    public val RESPONSE_NAMES: kotlin.collections.List<String> = listOf("lightInfo")

    public override fun fromJson(reader: JsonReader, customScalarAdapters: CustomScalarAdapters):
        GetPostCommentReplyQuery.Author {
      var _lightInfo: GetPostCommentReplyQuery.LightInfo? = null

      while(true) {
        when (reader.selectName(RESPONSE_NAMES)) {
          0 -> _lightInfo = LightInfo.obj().fromJson(reader, customScalarAdapters)
          else -> break
        }
      }

      return GetPostCommentReplyQuery.Author(
        lightInfo = _lightInfo!!
      )
    }

    public override fun toJson(
      writer: JsonWriter,
      customScalarAdapters: CustomScalarAdapters,
      `value`: GetPostCommentReplyQuery.Author,
    ): Unit {
      writer.name("lightInfo")
      LightInfo.obj().toJson(writer, customScalarAdapters, value.lightInfo)
    }
  }

  public object LightInfo : Adapter<GetPostCommentReplyQuery.LightInfo> {
    public val RESPONSE_NAMES: kotlin.collections.List<String> = listOf("handle", "avatar",
        "avatarFrameTokenId", "displayName", "formattedAddress")

    public override fun fromJson(reader: JsonReader, customScalarAdapters: CustomScalarAdapters):
        GetPostCommentReplyQuery.LightInfo {
      var _handle: String? = null
      var _avatar: String? = null
      var _avatarFrameTokenId: String? = null
      var _displayName: String? = null
      var _formattedAddress: String? = null

      while(true) {
        when (reader.selectName(RESPONSE_NAMES)) {
          0 -> _handle = StringAdapter.fromJson(reader, customScalarAdapters)
          1 -> _avatar = StringAdapter.fromJson(reader, customScalarAdapters)
          2 -> _avatarFrameTokenId = NullableStringAdapter.fromJson(reader, customScalarAdapters)
          3 -> _displayName = StringAdapter.fromJson(reader, customScalarAdapters)
          4 -> _formattedAddress = StringAdapter.fromJson(reader, customScalarAdapters)
          else -> break
        }
      }

      return GetPostCommentReplyQuery.LightInfo(
        handle = _handle!!,
        avatar = _avatar!!,
        avatarFrameTokenId = _avatarFrameTokenId,
        displayName = _displayName!!,
        formattedAddress = _formattedAddress!!
      )
    }

    public override fun toJson(
      writer: JsonWriter,
      customScalarAdapters: CustomScalarAdapters,
      `value`: GetPostCommentReplyQuery.LightInfo,
    ): Unit {
      writer.name("handle")
      StringAdapter.toJson(writer, customScalarAdapters, value.handle)

      writer.name("avatar")
      StringAdapter.toJson(writer, customScalarAdapters, value.avatar)

      writer.name("avatarFrameTokenId")
      NullableStringAdapter.toJson(writer, customScalarAdapters, value.avatarFrameTokenId)

      writer.name("displayName")
      StringAdapter.toJson(writer, customScalarAdapters, value.displayName)

      writer.name("formattedAddress")
      StringAdapter.toJson(writer, customScalarAdapters, value.formattedAddress)
    }
  }

  public object LikedStatus : Adapter<GetPostCommentReplyQuery.LikedStatus> {
    public val RESPONSE_NAMES: kotlin.collections.List<String> = listOf("liked")

    public override fun fromJson(reader: JsonReader, customScalarAdapters: CustomScalarAdapters):
        GetPostCommentReplyQuery.LikedStatus {
      var _liked: Boolean? = null

      while(true) {
        when (reader.selectName(RESPONSE_NAMES)) {
          0 -> _liked = BooleanAdapter.fromJson(reader, customScalarAdapters)
          else -> break
        }
      }

      return GetPostCommentReplyQuery.LikedStatus(
        liked = _liked!!
      )
    }

    public override fun toJson(
      writer: JsonWriter,
      customScalarAdapters: CustomScalarAdapters,
      `value`: GetPostCommentReplyQuery.LikedStatus,
    ): Unit {
      writer.name("liked")
      BooleanAdapter.toJson(writer, customScalarAdapters, value.liked)
    }
  }
}
