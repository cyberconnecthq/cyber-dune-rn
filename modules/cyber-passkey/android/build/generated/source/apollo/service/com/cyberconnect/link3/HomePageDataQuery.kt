//
// AUTO-GENERATED FILE. DO NOT MODIFY.
//
// This class was automatically generated by Apollo GraphQL version '3.8.2'.
//
package com.cyberconnect.link3

import com.apollographql.apollo3.annotations.ApolloAdaptableWith
import com.apollographql.apollo3.api.Adapter
import com.apollographql.apollo3.api.CompiledField
import com.apollographql.apollo3.api.CustomScalarAdapters
import com.apollographql.apollo3.api.Query
import com.apollographql.apollo3.api.json.JsonWriter
import com.apollographql.apollo3.api.obj
import com.cyberconnect.link3.adapter.HomePageDataQuery_ResponseAdapter
import com.cyberconnect.link3.fragment.ConnectionOrgProfile
import com.cyberconnect.link3.fragment.ConnectionPersonalProfile
import com.cyberconnect.link3.fragment.EventCardWithPoster
import com.cyberconnect.link3.fragment.PerProfileWithOrg
import com.cyberconnect.link3.fragment.PostCard
import com.cyberconnect.link3.selections.HomePageDataQuerySelections
import kotlin.Any
import kotlin.Boolean
import kotlin.Int
import kotlin.String
import kotlin.Unit

public class HomePageDataQuery() : Query<HomePageDataQuery.Data> {
  public override fun equals(other: Any?): Boolean = other != null && other::class == this::class

  public override fun hashCode(): Int = this::class.hashCode()

  public override fun id(): String = OPERATION_ID

  public override fun document(): String = OPERATION_DOCUMENT

  public override fun name(): String = OPERATION_NAME

  public override fun serializeVariables(writer: JsonWriter,
      customScalarAdapters: CustomScalarAdapters): Unit {
    // This operation doesn't have any variable
  }

  public override fun adapter(): Adapter<Data> = HomePageDataQuery_ResponseAdapter.Data.obj()

  public override fun rootField(): CompiledField = CompiledField.Builder(
    name = "data",
    type = com.cyberconnect.link3.type.Query.type
  )
  .selections(selections = HomePageDataQuerySelections.__root)
  .build()

  @ApolloAdaptableWith(HomePageDataQuery_ResponseAdapter.Data::class)
  public data class Data(
    public val organization: Organization,
    public val recommended: Recommended,
    public val profiles: Profiles,
    public val exploreEvents: kotlin.collections.List<ExploreEvent>,
    public val explorePosts: kotlin.collections.List<ExplorePost>?,
  ) : Query.Data

  public data class Organization(
    public val list: kotlin.collections.List<List>,
  )

  public data class List(
    public val __typename: String,
    /**
     * Synthetic field for 'ConnectionOrgProfile'
     */
    public val connectionOrgProfile: ConnectionOrgProfile?,
  )

  public data class Recommended(
    public val `data`: Data1?,
  )

  public data class Data1(
    public val recommendedProfiles: RecommendedProfiles,
  )

  public data class RecommendedProfiles(
    public val list: kotlin.collections.List<List1>,
  )

  public data class List1(
    public val __typename: String,
    /**
     * Synthetic field for 'ConnectionPersonalProfile'
     */
    public val connectionPersonalProfile: ConnectionPersonalProfile?,
  )

  public data class Profiles(
    public val `data`: Data2?,
  )

  public data class Data2(
    public val schoolmatesProfiles: kotlin.collections.List<SchoolmatesProfile>,
    public val similarWorkExperiencesProfiles:
        kotlin.collections.List<SimilarWorkExperiencesProfile>,
  )

  public data class SchoolmatesProfile(
    public val __typename: String,
    /**
     * Synthetic field for 'PerProfileWithOrg'
     */
    public val perProfileWithOrg: PerProfileWithOrg,
  )

  public data class SimilarWorkExperiencesProfile(
    public val __typename: String,
    /**
     * Synthetic field for 'PerProfileWithOrg'
     */
    public val perProfileWithOrg: PerProfileWithOrg,
  )

  public data class ExploreEvent(
    public val __typename: String,
    /**
     * Synthetic field for 'EventCardWithPoster'
     */
    public val eventCardWithPoster: EventCardWithPoster,
  )

  public data class ExplorePost(
    public val __typename: String,
    /**
     * Synthetic field for 'PostCard'
     */
    public val postCard: PostCard,
  )

  public companion object {
    public const val OPERATION_ID: String =
        "f5409413840c8afab29ee15640bc1b754cfe10689176370e91ed8506f064827f"

    /**
     * The minimized GraphQL document being sent to the server to save a few bytes.
     * The un-minimized version is:
     *
     * query homePageData {
     *   organization: featuredProfiles(filter: ORGANIZATION, first: 12) {
     *     list {
     *       __typename
     *       ...ConnectionOrgProfile
     *     }
     *   }
     *   recommended: me {
     *     data {
     *       recommendedProfiles(first: 12, after: "") {
     *         list {
     *           __typename
     *           ...ConnectionPersonalProfile
     *         }
     *       }
     *     }
     *   }
     *   profiles: me {
     *     data {
     *       schoolmatesProfiles {
     *         __typename
     *         ...PerProfileWithOrg
     *       }
     *       similarWorkExperiencesProfiles {
     *         __typename
     *         ...PerProfileWithOrg
     *       }
     *     }
     *   }
     *   exploreEvents(request: {
     *     type: FEATURED
     *   }
     *   ) {
     *     __typename
     *     ...EventCardWithPoster
     *   }
     *   explorePosts(input: {
     *     type: FEATURED
     *   }
     *   ) {
     *     __typename
     *     ...PostCard
     *   }
     * }
     *
     * fragment ConnectionOrgProfile on OrgProfile {
     *   id
     *   handle
     *   bio
     *   displayName
     *   profilePicture
     *   isFollowing
     *   organization {
     *     followersCount
     *   }
     * }
     *
     * fragment ConnectionPersonalProfile on PerProfile {
     *   id
     *   handle
     *   owner {
     *     id
     *     price {
     *       price {
     *         value
     *         decimal
     *       }
     *     }
     *     lightInfo {
     *       attestation {
     *         uid
     *       }
     *     }
     *   }
     *   headline {
     *     displayName
     *     title
     *   }
     *   displayName {
     *     displayName
     *     type
     *   }
     *   profilePicture {
     *     picture
     *   }
     *   connectStatus
     *   connectionDegree
     *   reputation {
     *     total
     *   }
     *   isVerified
     *   mutualConnections {
     *     list {
     *       __typename
     *       handle
     *       id
     *       ... on PerProfile {
     *         profilePicture {
     *           picture
     *         }
     *         displayName {
     *           displayName
     *         }
     *       }
     *     }
     *   }
     * }
     *
     * fragment PerProfileWithOrg on PerProfileWithOrg {
     *   orgList {
     *     avatar
     *     name
     *   }
     *   profile {
     *     __typename
     *     ...ConnectionPersonalProfile
     *   }
     * }
     *
     * fragment EventCardWithPoster on Event {
     *   id
     *   title
     *   posterUrl
     *   startTimestamp
     *   endTimestamp
     *   registerStatus
     *   registrantsCount
     *   status
     *   organizer {
     *     verification
     *     lightInfo {
     *       displayName
     *       profilePicture
     *       profileHandle
     *     }
     *   }
     *   lightInfo {
     *     hasRaffle
     *     hasW3ST
     *   }
     * }
     *
     * fragment UnionIsFollowing on Profile {
     *   __typename
     *   ... on OrgProfile {
     *     isFollowing
     *   }
     *   ... on PerProfile {
     *     isFollowing
     *   }
     * }
     *
     * fragment UnionDisplayName on Profile {
     *   __typename
     *   ... on OrgProfile {
     *     displayName
     *   }
     *   ... on PerProfile {
     *     personalDisplayName: displayName {
     *       displayName
     *     }
     *   }
     * }
     *
     * fragment UnionProfilePicture on Profile {
     *   __typename
     *   ... on OrgProfile {
     *     profilePicture
     *   }
     *   ... on PerProfile {
     *     personalProfilePicture: profilePicture {
     *       picture
     *     }
     *   }
     * }
     *
     * fragment UnionBaseProfile on Profile {
     *   __typename
     *   type
     *   handle
     *   ...UnionIsFollowing
     *   ...UnionDisplayName
     *   ...UnionProfilePicture
     * }
     *
     * fragment ProfileInPostCard on Profile {
     *   __typename
     *   ...UnionBaseProfile
     *   ... on OrgProfile {
     *     organization {
     *       verification
     *     }
     *   }
     * }
     *
     * fragment PostCard on Post {
     *   id
     *   title
     *   cover
     *   description
     *   publishedAt
     *   readTime
     *   essence {
     *     totalCollected
     *     totalSupply
     *   }
     *   profile {
     *     __typename
     *     ...ProfileInPostCard
     *   }
     * }
     */
    public val OPERATION_DOCUMENT: String
      get() =
          "query homePageData { organization: featuredProfiles(filter: ORGANIZATION, first: 12) { list { __typename ...ConnectionOrgProfile } } recommended: me { data { recommendedProfiles(first: 12, after: \"\") { list { __typename ...ConnectionPersonalProfile } } } } profiles: me { data { schoolmatesProfiles { __typename ...PerProfileWithOrg } similarWorkExperiencesProfiles { __typename ...PerProfileWithOrg } } } exploreEvents(request: { type: FEATURED } ) { __typename ...EventCardWithPoster } explorePosts(input: { type: FEATURED } ) { __typename ...PostCard } }  fragment ConnectionOrgProfile on OrgProfile { id handle bio displayName profilePicture isFollowing organization { followersCount } }  fragment ConnectionPersonalProfile on PerProfile { id handle owner { id price { price { value decimal } } lightInfo { attestation { uid } } } headline { displayName title } displayName { displayName type } profilePicture { picture } connectStatus connectionDegree reputation { total } isVerified mutualConnections { list { __typename handle id ... on PerProfile { profilePicture { picture } displayName { displayName } } } } }  fragment PerProfileWithOrg on PerProfileWithOrg { orgList { avatar name } profile { __typename ...ConnectionPersonalProfile } }  fragment EventCardWithPoster on Event { id title posterUrl startTimestamp endTimestamp registerStatus registrantsCount status organizer { verification lightInfo { displayName profilePicture profileHandle } } lightInfo { hasRaffle hasW3ST } }  fragment UnionIsFollowing on Profile { __typename ... on OrgProfile { isFollowing } ... on PerProfile { isFollowing } }  fragment UnionDisplayName on Profile { __typename ... on OrgProfile { displayName } ... on PerProfile { personalDisplayName: displayName { displayName } } }  fragment UnionProfilePicture on Profile { __typename ... on OrgProfile { profilePicture } ... on PerProfile { personalProfilePicture: profilePicture { picture } } }  fragment UnionBaseProfile on Profile { __typename type handle ...UnionIsFollowing ...UnionDisplayName ...UnionProfilePicture }  fragment ProfileInPostCard on Profile { __typename ...UnionBaseProfile ... on OrgProfile { organization { verification } } }  fragment PostCard on Post { id title cover description publishedAt readTime essence { totalCollected totalSupply } profile { __typename ...ProfileInPostCard } }"

    public const val OPERATION_NAME: String = "homePageData"
  }
}
