//
// AUTO-GENERATED FILE. DO NOT MODIFY.
//
// This class was automatically generated by Apollo GraphQL version '3.8.2'.
//
package com.cyberconnect.link3.fragment.selections

import com.apollographql.apollo3.api.CompiledField
import com.apollographql.apollo3.api.CompiledFragment
import com.apollographql.apollo3.api.CompiledSelection
import com.apollographql.apollo3.api.notNull
import com.cyberconnect.link3.type.GraphQLBoolean
import com.cyberconnect.link3.type.GraphQLID
import com.cyberconnect.link3.type.GraphQLInt
import com.cyberconnect.link3.type.GraphQLString
import com.cyberconnect.link3.type.LightInfo
import com.cyberconnect.link3.type.MessageStatus
import com.cyberconnect.link3.type.MessageType
import com.cyberconnect.link3.type.PaidInfo
import com.cyberconnect.link3.type.PaidStatus
import com.cyberconnect.link3.type.TokenValue
import com.cyberconnect.link3.type.User
import kotlin.collections.List

public object PerMessageSelections {
  private val __earnValue: List<CompiledSelection> = listOf(
        CompiledField.Builder(
          name = "__typename",
          type = GraphQLString.type.notNull()
        ).build(),
        CompiledFragment.Builder(
          typeCondition = "TokenValue",
          possibleTypes = listOf("TokenValue")
        ).selections(PriceSelections.__root)
        .build()
      )

  private val __value: List<CompiledSelection> = listOf(
        CompiledField.Builder(
          name = "__typename",
          type = GraphQLString.type.notNull()
        ).build(),
        CompiledFragment.Builder(
          typeCondition = "TokenValue",
          possibleTypes = listOf("TokenValue")
        ).selections(PriceSelections.__root)
        .build()
      )

  private val __paid: List<CompiledSelection> = listOf(
        CompiledField.Builder(
          name = "earnValue",
          type = TokenValue.type
        ).selections(__earnValue)
        .build(),
        CompiledField.Builder(
          name = "status",
          type = PaidStatus.type.notNull()
        ).build(),
        CompiledField.Builder(
          name = "value",
          type = TokenValue.type
        ).selections(__value)
        .build(),
        CompiledField.Builder(
          name = "refundAt",
          type = GraphQLInt.type
        ).build()
      )

  private val __lightInfo: List<CompiledSelection> = listOf(
        CompiledField.Builder(
          name = "displayName",
          type = GraphQLString.type.notNull()
        ).build(),
        CompiledField.Builder(
          name = "handle",
          type = GraphQLString.type.notNull()
        ).build(),
        CompiledField.Builder(
          name = "avatar",
          type = GraphQLString.type.notNull()
        ).build()
      )

  private val __sender: List<CompiledSelection> = listOf(
        CompiledField.Builder(
          name = "lightInfo",
          type = LightInfo.type.notNull()
        ).selections(__lightInfo)
        .build()
      )

  private val __lightInfo1: List<CompiledSelection> = listOf(
        CompiledField.Builder(
          name = "displayName",
          type = GraphQLString.type.notNull()
        ).build(),
        CompiledField.Builder(
          name = "handle",
          type = GraphQLString.type.notNull()
        ).build(),
        CompiledField.Builder(
          name = "avatar",
          type = GraphQLString.type.notNull()
        ).build()
      )

  private val __chatUser: List<CompiledSelection> = listOf(
        CompiledField.Builder(
          name = "lightInfo",
          type = LightInfo.type.notNull()
        ).selections(__lightInfo1)
        .build()
      )

  public val __root: List<CompiledSelection> = listOf(
        CompiledField.Builder(
          name = "content",
          type = GraphQLString.type.notNull()
        ).build(),
        CompiledField.Builder(
          name = "id",
          type = GraphQLID.type.notNull()
        ).build(),
        CompiledField.Builder(
          name = "msgType",
          type = MessageType.type.notNull()
        ).build(),
        CompiledField.Builder(
          name = "paid",
          type = PaidInfo.type.notNull()
        ).selections(__paid)
        .build(),
        CompiledField.Builder(
          name = "sender",
          type = User.type.notNull()
        ).selections(__sender)
        .build(),
        CompiledField.Builder(
          name = "chatUser",
          type = User.type.notNull()
        ).selections(__chatUser)
        .build(),
        CompiledField.Builder(
          name = "msgTime",
          type = GraphQLInt.type.notNull()
        ).build(),
        CompiledField.Builder(
          name = "replyToEarn",
          type = GraphQLBoolean.type.notNull()
        ).build(),
        CompiledField.Builder(
          name = "status",
          type = MessageStatus.type.notNull()
        ).build()
      )
}
