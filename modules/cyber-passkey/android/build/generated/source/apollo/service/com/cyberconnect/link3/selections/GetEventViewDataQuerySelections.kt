//
// AUTO-GENERATED FILE. DO NOT MODIFY.
//
// This class was automatically generated by Apollo GraphQL version '3.8.2'.
//
package com.cyberconnect.link3.selections

import com.apollographql.apollo3.api.CompiledArgument
import com.apollographql.apollo3.api.CompiledField
import com.apollographql.apollo3.api.CompiledFragment
import com.apollographql.apollo3.api.CompiledSelection
import com.apollographql.apollo3.api.CompiledVariable
import com.apollographql.apollo3.api.list
import com.apollographql.apollo3.api.notNull
import com.cyberconnect.link3.fragment.selections.DiscordEventSelections
import com.cyberconnect.link3.fragment.selections.OtherEventSelections
import com.cyberconnect.link3.fragment.selections.PageInfoSelections
import com.cyberconnect.link3.fragment.selections.RaffleSelections
import com.cyberconnect.link3.fragment.selections.SpeakerSelections
import com.cyberconnect.link3.fragment.selections.TwitterSpaceEventSelections
import com.cyberconnect.link3.fragment.selections.W3stOnEventViewPageSelections
import com.cyberconnect.link3.type.Event
import com.cyberconnect.link3.type.EventLocation
import com.cyberconnect.link3.type.EventRegisterStatus
import com.cyberconnect.link3.type.EventSpeaker
import com.cyberconnect.link3.type.EventStatus
import com.cyberconnect.link3.type.GraphQLBoolean
import com.cyberconnect.link3.type.GraphQLID
import com.cyberconnect.link3.type.GraphQLInt
import com.cyberconnect.link3.type.GraphQLString
import com.cyberconnect.link3.type.LightInfo
import com.cyberconnect.link3.type.Organization
import com.cyberconnect.link3.type.OrganizationLightInfo
import com.cyberconnect.link3.type.PageInfo
import com.cyberconnect.link3.type.Profile
import com.cyberconnect.link3.type.Raffle
import com.cyberconnect.link3.type.RecapLikeInfo
import com.cyberconnect.link3.type.Role
import com.cyberconnect.link3.type.Timestamp
import com.cyberconnect.link3.type.TokenSummary
import com.cyberconnect.link3.type.Url
import com.cyberconnect.link3.type.User
import com.cyberconnect.link3.type.UserPage
import com.cyberconnect.link3.type.VerificationStatus
import com.cyberconnect.link3.type.W3ST
import kotlin.collections.List

public object GetEventViewDataQuerySelections {
  private val __speakers: List<CompiledSelection> = listOf(
        CompiledField.Builder(
          name = "__typename",
          type = GraphQLString.type.notNull()
        ).build(),
        CompiledFragment.Builder(
          typeCondition = "EventSpeaker",
          possibleTypes = listOf("EventSpeaker")
        ).selections(SpeakerSelections.__root)
        .build()
      )

  private val __lightInfo: List<CompiledSelection> = listOf(
        CompiledField.Builder(
          name = "profileHandle",
          type = GraphQLString.type.notNull()
        ).build(),
        CompiledField.Builder(
          name = "isFollowing",
          type = GraphQLBoolean.type.notNull()
        ).build(),
        CompiledField.Builder(
          name = "displayName",
          type = GraphQLString.type.notNull()
        ).build(),
        CompiledField.Builder(
          name = "profilePicture",
          type = GraphQLString.type.notNull()
        ).build()
      )

  private val __profile: List<CompiledSelection> = listOf(
        CompiledField.Builder(
          name = "id",
          type = GraphQLID.type.notNull()
        ).build()
      )

  private val __organizer: List<CompiledSelection> = listOf(
        CompiledField.Builder(
          name = "twitterId",
          type = GraphQLString.type.notNull()
        ).build(),
        CompiledField.Builder(
          name = "id",
          type = GraphQLID.type.notNull()
        ).build(),
        CompiledField.Builder(
          name = "followersCount",
          type = GraphQLInt.type.notNull()
        ).build(),
        CompiledField.Builder(
          name = "verification",
          type = VerificationStatus.type.notNull()
        ).build(),
        CompiledField.Builder(
          name = "currentAccess",
          type = Role.type.notNull()
        ).build(),
        CompiledField.Builder(
          name = "lightInfo",
          type = OrganizationLightInfo.type.notNull()
        ).selections(__lightInfo)
        .build(),
        CompiledField.Builder(
          name = "profile",
          type = Profile.type.notNull()
        ).selections(__profile)
        .build()
      )

  private val __w3st: List<CompiledSelection> = listOf(
        CompiledField.Builder(
          name = "__typename",
          type = GraphQLString.type.notNull()
        ).build(),
        CompiledFragment.Builder(
          typeCondition = "W3ST",
          possibleTypes = listOf("W3ST")
        ).selections(W3stOnEventViewPageSelections.__root)
        .build()
      )

  private val __pageInfo: List<CompiledSelection> = listOf(
        CompiledField.Builder(
          name = "__typename",
          type = GraphQLString.type.notNull()
        ).build(),
        CompiledFragment.Builder(
          typeCondition = "PageInfo",
          possibleTypes = listOf("PageInfo")
        ).selections(PageInfoSelections.__root)
        .build()
      )

  private val __lightInfo1: List<CompiledSelection> = listOf(
        CompiledField.Builder(
          name = "handle",
          type = GraphQLString.type.notNull()
        ).build(),
        CompiledField.Builder(
          name = "avatar",
          type = GraphQLString.type.notNull()
        ).build(),
        CompiledField.Builder(
          name = "avatarFrameTokenId",
          type = GraphQLID.type
        ).build(),
        CompiledField.Builder(
          name = "displayName",
          type = GraphQLString.type.notNull()
        ).build(),
        CompiledField.Builder(
          name = "formattedAddress",
          type = GraphQLString.type.notNull()
        ).build()
      )

  private val __list: List<CompiledSelection> = listOf(
        CompiledField.Builder(
          name = "lightInfo",
          type = LightInfo.type.notNull()
        ).selections(__lightInfo1)
        .build()
      )

  private val __registrants: List<CompiledSelection> = listOf(
        CompiledField.Builder(
          name = "pageInfo",
          type = PageInfo.type.notNull()
        ).selections(__pageInfo)
        .build(),
        CompiledField.Builder(
          name = "list",
          type = User.type.notNull().list().notNull()
        ).selections(__list)
        .build()
      )

  private val __raffle: List<CompiledSelection> = listOf(
        CompiledField.Builder(
          name = "__typename",
          type = GraphQLString.type.notNull()
        ).build(),
        CompiledFragment.Builder(
          typeCondition = "Raffle",
          possibleTypes = listOf("Raffle")
        ).selections(RaffleSelections.__root)
        .build()
      )

  private val __onDiscordEvent: List<CompiledSelection> = listOf(
        CompiledField.Builder(
          name = "inviteLink",
          type = GraphQLString.type.notNull()
        ).build()
      )

  private val __location: List<CompiledSelection> = listOf(
        CompiledField.Builder(
          name = "__typename",
          type = GraphQLString.type.notNull()
        ).build(),
        CompiledFragment.Builder(
          typeCondition = "TwitterSpaceEvent",
          possibleTypes = listOf("TwitterSpaceEvent")
        ).selections(TwitterSpaceEventSelections.__root)
        .build(),
        CompiledFragment.Builder(
          typeCondition = "DiscordEvent",
          possibleTypes = listOf("DiscordEvent")
        ).selections(DiscordEventSelections.__root)
        .build(),
        CompiledFragment.Builder(
          typeCondition = "DiscordEvent",
          possibleTypes = listOf("DiscordEvent")
        ).selections(__onDiscordEvent)
        .build(),
        CompiledFragment.Builder(
          typeCondition = "OtherEvent",
          possibleTypes = listOf("OtherEvent")
        ).selections(OtherEventSelections.__root)
        .build()
      )

  private val __recapLikeInfo: List<CompiledSelection> = listOf(
        CompiledField.Builder(
          name = "likedCount",
          type = GraphQLInt.type.notNull()
        ).build(),
        CompiledField.Builder(
          name = "isLiked",
          type = GraphQLBoolean.type.notNull()
        ).build()
      )

  private val __registrantsTokenHoldings: List<CompiledSelection> = listOf(
        CompiledField.Builder(
          name = "collection",
          type = GraphQLString.type.notNull()
        ).build(),
        CompiledField.Builder(
          name = "logo",
          type = Url.type.notNull()
        ).build(),
        CompiledField.Builder(
          name = "ownedCount",
          type = GraphQLInt.type.notNull()
        ).build(),
        CompiledField.Builder(
          name = "ownersCount",
          type = GraphQLInt.type.notNull()
        ).build()
      )

  private val __event: List<CompiledSelection> = listOf(
        CompiledField.Builder(
          name = "__typename",
          type = GraphQLString.type.notNull()
        ).build(),
        CompiledField.Builder(
          name = "id",
          type = GraphQLID.type.notNull()
        ).build(),
        CompiledField.Builder(
          name = "title",
          type = GraphQLString.type.notNull()
        ).build(),
        CompiledField.Builder(
          name = "info",
          type = GraphQLString.type.notNull()
        ).build(),
        CompiledField.Builder(
          name = "recap",
          type = GraphQLString.type.notNull()
        ).build(),
        CompiledField.Builder(
          name = "posterUrl",
          type = Url.type.notNull()
        ).build(),
        CompiledField.Builder(
          name = "startTimestamp",
          type = Timestamp.type.notNull()
        ).build(),
        CompiledField.Builder(
          name = "endTimestamp",
          type = Timestamp.type.notNull()
        ).build(),
        CompiledField.Builder(
          name = "timezone",
          type = GraphQLString.type.notNull()
        ).build(),
        CompiledField.Builder(
          name = "registerStatus",
          type = EventRegisterStatus.type.notNull()
        ).build(),
        CompiledField.Builder(
          name = "status",
          type = EventStatus.type.notNull()
        ).build(),
        CompiledField.Builder(
          name = "speakers",
          type = EventSpeaker.type.notNull().list()
        ).selections(__speakers)
        .build(),
        CompiledField.Builder(
          name = "organizer",
          type = Organization.type.notNull()
        ).selections(__organizer)
        .build(),
        CompiledField.Builder(
          name = "w3st",
          type = W3ST.type
        ).selections(__w3st)
        .build(),
        CompiledField.Builder(
          name = "registrantsCount",
          type = GraphQLInt.type.notNull()
        ).build(),
        CompiledField.Builder(
          name = "registrants",
          type = UserPage.type.notNull()
        ).arguments(listOf(
          CompiledArgument.Builder("first", 7).build()
        ))
        .selections(__registrants)
        .build(),
        CompiledField.Builder(
          name = "raffle",
          type = Raffle.type
        ).selections(__raffle)
        .build(),
        CompiledField.Builder(
          name = "location",
          type = EventLocation.type.notNull()
        ).selections(__location)
        .build(),
        CompiledField.Builder(
          name = "tags",
          type = GraphQLString.type.notNull().list().notNull()
        ).build(),
        CompiledField.Builder(
          name = "language",
          type = GraphQLInt.type.notNull()
        ).build(),
        CompiledField.Builder(
          name = "recapLikeInfo",
          type = RecapLikeInfo.type.notNull()
        ).selections(__recapLikeInfo)
        .build(),
        CompiledField.Builder(
          name = "registrantsTokenHoldings",
          type = TokenSummary.type.notNull().list()
        ).selections(__registrantsTokenHoldings)
        .build()
      )

  public val __root: List<CompiledSelection> = listOf(
        CompiledField.Builder(
          name = "event",
          type = Event.type
        ).arguments(listOf(
          CompiledArgument.Builder("id", CompiledVariable("id")).build()
        ))
        .selections(__event)
        .build()
      )
}
