//
// AUTO-GENERATED FILE. DO NOT MODIFY.
//
// This class was automatically generated by Apollo GraphQL version '3.8.2'.
//
package com.cyberconnect.link3.fragment

import com.apollographql.apollo3.api.Adapter
import com.apollographql.apollo3.api.AnyAdapter
import com.apollographql.apollo3.api.BooleanAdapter
import com.apollographql.apollo3.api.CustomScalarAdapters
import com.apollographql.apollo3.api.IntAdapter
import com.apollographql.apollo3.api.NullableStringAdapter
import com.apollographql.apollo3.api.StringAdapter
import com.apollographql.apollo3.api.evaluate
import com.apollographql.apollo3.api.json.JsonReader
import com.apollographql.apollo3.api.json.JsonWriter
import com.apollographql.apollo3.api.list
import com.apollographql.apollo3.api.obj
import com.apollographql.apollo3.api.possibleTypes
import com.cyberconnect.link3.type.adapter.JoinStatus_ResponseAdapter
import kotlin.Any
import kotlin.Boolean
import kotlin.Int
import kotlin.String
import kotlin.Unit
import kotlin.collections.List

public object RaffleImpl_ResponseAdapter {
  public object Raffle : Adapter<com.cyberconnect.link3.fragment.Raffle> {
    public val RESPONSE_NAMES: List<String> = listOf("awards", "tweetUrl", "joinStatus",
        "winnersCount", "joinedCount", "claimDeadline", "participateDeadline", "requirement")

    public override fun fromJson(reader: JsonReader, customScalarAdapters: CustomScalarAdapters):
        com.cyberconnect.link3.fragment.Raffle {
      var _awards: com.cyberconnect.link3.fragment.Raffle.Awards? = null
      var _tweetUrl: Any? = null
      var _joinStatus: com.cyberconnect.link3.fragment.Raffle.JoinStatus? = null
      var _winnersCount: Int? = null
      var _joinedCount: Int? = null
      var _claimDeadline: Any? = null
      var _participateDeadline: Any? = null
      var _requirement: com.cyberconnect.link3.fragment.Raffle.Requirement? = null

      while(true) {
        when (reader.selectName(RESPONSE_NAMES)) {
          0 -> _awards = Awards.obj(true).fromJson(reader, customScalarAdapters)
          1 -> _tweetUrl = AnyAdapter.fromJson(reader, customScalarAdapters)
          2 -> _joinStatus = JoinStatus.obj().fromJson(reader, customScalarAdapters)
          3 -> _winnersCount = IntAdapter.fromJson(reader, customScalarAdapters)
          4 -> _joinedCount = IntAdapter.fromJson(reader, customScalarAdapters)
          5 -> _claimDeadline = AnyAdapter.fromJson(reader, customScalarAdapters)
          6 -> _participateDeadline = AnyAdapter.fromJson(reader, customScalarAdapters)
          7 -> _requirement = Requirement.obj().fromJson(reader, customScalarAdapters)
          else -> break
        }
      }

      return com.cyberconnect.link3.fragment.Raffle(
        awards = _awards!!,
        tweetUrl = _tweetUrl!!,
        joinStatus = _joinStatus!!,
        winnersCount = _winnersCount!!,
        joinedCount = _joinedCount!!,
        claimDeadline = _claimDeadline!!,
        participateDeadline = _participateDeadline!!,
        requirement = _requirement!!
      )
    }

    public override fun toJson(
      writer: JsonWriter,
      customScalarAdapters: CustomScalarAdapters,
      `value`: com.cyberconnect.link3.fragment.Raffle,
    ): Unit {
      writer.name("awards")
      Awards.obj(true).toJson(writer, customScalarAdapters, value.awards)

      writer.name("tweetUrl")
      AnyAdapter.toJson(writer, customScalarAdapters, value.tweetUrl)

      writer.name("joinStatus")
      JoinStatus.obj().toJson(writer, customScalarAdapters, value.joinStatus)

      writer.name("winnersCount")
      IntAdapter.toJson(writer, customScalarAdapters, value.winnersCount)

      writer.name("joinedCount")
      IntAdapter.toJson(writer, customScalarAdapters, value.joinedCount)

      writer.name("claimDeadline")
      AnyAdapter.toJson(writer, customScalarAdapters, value.claimDeadline)

      writer.name("participateDeadline")
      AnyAdapter.toJson(writer, customScalarAdapters, value.participateDeadline)

      writer.name("requirement")
      Requirement.obj().toJson(writer, customScalarAdapters, value.requirement)
    }
  }

  public object Awards : Adapter<com.cyberconnect.link3.fragment.Raffle.Awards> {
    public val RESPONSE_NAMES: List<String> = listOf("__typename")

    public override fun fromJson(reader: JsonReader, customScalarAdapters: CustomScalarAdapters):
        com.cyberconnect.link3.fragment.Raffle.Awards {
      var __typename: String? = null

      while(true) {
        when (reader.selectName(RESPONSE_NAMES)) {
          0 -> __typename = StringAdapter.fromJson(reader, customScalarAdapters)
          else -> break
        }
      }

      check(__typename != null) {
        "__typename was not found"
      }

      var _tokenAward: TokenAward? = null
      if (possibleTypes("TokenAward").evaluate(customScalarAdapters.adapterContext.variables(), __typename, customScalarAdapters.adapterContext, null)) {
        reader.rewind()
        _tokenAward = com.cyberconnect.link3.fragment.TokenAwardImpl_ResponseAdapter.TokenAward.fromJson(reader,
            customScalarAdapters)
      }

      var _codeAward: CodeAward? = null
      if (possibleTypes("CodeAward").evaluate(customScalarAdapters.adapterContext.variables(), __typename, customScalarAdapters.adapterContext, null)) {
        reader.rewind()
        _codeAward = com.cyberconnect.link3.fragment.CodeAwardImpl_ResponseAdapter.CodeAward.fromJson(reader,
            customScalarAdapters)
      }

      return com.cyberconnect.link3.fragment.Raffle.Awards(
        __typename = __typename,
        tokenAward = _tokenAward,
        codeAward = _codeAward
      )
    }

    public override fun toJson(
      writer: JsonWriter,
      customScalarAdapters: CustomScalarAdapters,
      `value`: com.cyberconnect.link3.fragment.Raffle.Awards,
    ): Unit {
      writer.name("__typename")
      StringAdapter.toJson(writer, customScalarAdapters, value.__typename)

      if (value.tokenAward != null) {
        com.cyberconnect.link3.fragment.TokenAwardImpl_ResponseAdapter.TokenAward.toJson(writer,
            customScalarAdapters, value.tokenAward)
      }

      if (value.codeAward != null) {
        com.cyberconnect.link3.fragment.CodeAwardImpl_ResponseAdapter.CodeAward.toJson(writer,
            customScalarAdapters, value.codeAward)
      }
    }
  }

  public object JoinStatus : Adapter<com.cyberconnect.link3.fragment.Raffle.JoinStatus> {
    public val RESPONSE_NAMES: List<String> = listOf("status", "myAward")

    public override fun fromJson(reader: JsonReader, customScalarAdapters: CustomScalarAdapters):
        com.cyberconnect.link3.fragment.Raffle.JoinStatus {
      var _status: com.cyberconnect.link3.type.JoinStatus? = null
      var _myAward: String? = null

      while(true) {
        when (reader.selectName(RESPONSE_NAMES)) {
          0 -> _status = JoinStatus_ResponseAdapter.fromJson(reader, customScalarAdapters)
          1 -> _myAward = NullableStringAdapter.fromJson(reader, customScalarAdapters)
          else -> break
        }
      }

      return com.cyberconnect.link3.fragment.Raffle.JoinStatus(
        status = _status!!,
        myAward = _myAward
      )
    }

    public override fun toJson(
      writer: JsonWriter,
      customScalarAdapters: CustomScalarAdapters,
      `value`: com.cyberconnect.link3.fragment.Raffle.JoinStatus,
    ): Unit {
      writer.name("status")
      JoinStatus_ResponseAdapter.toJson(writer, customScalarAdapters, value.status)

      writer.name("myAward")
      NullableStringAdapter.toJson(writer, customScalarAdapters, value.myAward)
    }
  }

  public object Requirement : Adapter<com.cyberconnect.link3.fragment.Raffle.Requirement> {
    public val RESPONSE_NAMES: List<String> = listOf("retweet", "follow", "comment",
        "likeAndRetweet", "tag", "multiFollow", "whitelist", "attend", "twittersToFollow")

    public override fun fromJson(reader: JsonReader, customScalarAdapters: CustomScalarAdapters):
        com.cyberconnect.link3.fragment.Raffle.Requirement {
      var _retweet: Boolean? = null
      var _follow: Boolean? = null
      var _comment: Boolean? = null
      var _likeAndRetweet: Boolean? = null
      var _tag: Boolean? = null
      var _multiFollow: Boolean? = null
      var _whitelist: Boolean? = null
      var _attend: Boolean? = null
      var _twittersToFollow: List<com.cyberconnect.link3.fragment.Raffle.TwittersToFollow>? = null

      while(true) {
        when (reader.selectName(RESPONSE_NAMES)) {
          0 -> _retweet = BooleanAdapter.fromJson(reader, customScalarAdapters)
          1 -> _follow = BooleanAdapter.fromJson(reader, customScalarAdapters)
          2 -> _comment = BooleanAdapter.fromJson(reader, customScalarAdapters)
          3 -> _likeAndRetweet = BooleanAdapter.fromJson(reader, customScalarAdapters)
          4 -> _tag = BooleanAdapter.fromJson(reader, customScalarAdapters)
          5 -> _multiFollow = BooleanAdapter.fromJson(reader, customScalarAdapters)
          6 -> _whitelist = BooleanAdapter.fromJson(reader, customScalarAdapters)
          7 -> _attend = BooleanAdapter.fromJson(reader, customScalarAdapters)
          8 -> _twittersToFollow = TwittersToFollow.obj().list().fromJson(reader,
              customScalarAdapters)
          else -> break
        }
      }

      return com.cyberconnect.link3.fragment.Raffle.Requirement(
        retweet = _retweet!!,
        follow = _follow!!,
        comment = _comment!!,
        likeAndRetweet = _likeAndRetweet!!,
        tag = _tag!!,
        multiFollow = _multiFollow!!,
        whitelist = _whitelist!!,
        attend = _attend!!,
        twittersToFollow = _twittersToFollow!!
      )
    }

    public override fun toJson(
      writer: JsonWriter,
      customScalarAdapters: CustomScalarAdapters,
      `value`: com.cyberconnect.link3.fragment.Raffle.Requirement,
    ): Unit {
      writer.name("retweet")
      BooleanAdapter.toJson(writer, customScalarAdapters, value.retweet)

      writer.name("follow")
      BooleanAdapter.toJson(writer, customScalarAdapters, value.follow)

      writer.name("comment")
      BooleanAdapter.toJson(writer, customScalarAdapters, value.comment)

      writer.name("likeAndRetweet")
      BooleanAdapter.toJson(writer, customScalarAdapters, value.likeAndRetweet)

      writer.name("tag")
      BooleanAdapter.toJson(writer, customScalarAdapters, value.tag)

      writer.name("multiFollow")
      BooleanAdapter.toJson(writer, customScalarAdapters, value.multiFollow)

      writer.name("whitelist")
      BooleanAdapter.toJson(writer, customScalarAdapters, value.whitelist)

      writer.name("attend")
      BooleanAdapter.toJson(writer, customScalarAdapters, value.attend)

      writer.name("twittersToFollow")
      TwittersToFollow.obj().list().toJson(writer, customScalarAdapters, value.twittersToFollow)
    }
  }

  public object TwittersToFollow : Adapter<com.cyberconnect.link3.fragment.Raffle.TwittersToFollow>
      {
    public val RESPONSE_NAMES: List<String> = listOf("twitterId", "twitterHandle")

    public override fun fromJson(reader: JsonReader, customScalarAdapters: CustomScalarAdapters):
        com.cyberconnect.link3.fragment.Raffle.TwittersToFollow {
      var _twitterId: String? = null
      var _twitterHandle: String? = null

      while(true) {
        when (reader.selectName(RESPONSE_NAMES)) {
          0 -> _twitterId = StringAdapter.fromJson(reader, customScalarAdapters)
          1 -> _twitterHandle = StringAdapter.fromJson(reader, customScalarAdapters)
          else -> break
        }
      }

      return com.cyberconnect.link3.fragment.Raffle.TwittersToFollow(
        twitterId = _twitterId!!,
        twitterHandle = _twitterHandle!!
      )
    }

    public override fun toJson(
      writer: JsonWriter,
      customScalarAdapters: CustomScalarAdapters,
      `value`: com.cyberconnect.link3.fragment.Raffle.TwittersToFollow,
    ): Unit {
      writer.name("twitterId")
      StringAdapter.toJson(writer, customScalarAdapters, value.twitterId)

      writer.name("twitterHandle")
      StringAdapter.toJson(writer, customScalarAdapters, value.twitterHandle)
    }
  }
}
