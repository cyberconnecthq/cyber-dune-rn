//
// AUTO-GENERATED FILE. DO NOT MODIFY.
//
// This class was automatically generated by Apollo GraphQL version '3.8.2'.
//
package com.cyberconnect.link3.fragment.selections

import com.apollographql.apollo3.api.CompiledArgument
import com.apollographql.apollo3.api.CompiledField
import com.apollographql.apollo3.api.CompiledSelection
import com.apollographql.apollo3.api.list
import com.apollographql.apollo3.api.notNull
import com.cyberconnect.link3.type.DateTime
import com.cyberconnect.link3.type.GraphQLID
import com.cyberconnect.link3.type.GraphQLInt
import com.cyberconnect.link3.type.GraphQLString
import com.cyberconnect.link3.type.Post
import com.cyberconnect.link3.type.PostEssence
import com.cyberconnect.link3.type.PostPage
import com.cyberconnect.link3.type.Url
import kotlin.collections.List

public object PostBlockSelections {
  private val __essence: List<CompiledSelection> = listOf(
        CompiledField.Builder(
          name = "totalCollected",
          type = GraphQLInt.type.notNull()
        ).build(),
        CompiledField.Builder(
          name = "totalSupply",
          type = GraphQLInt.type.notNull()
        ).build()
      )

  private val __list: List<CompiledSelection> = listOf(
        CompiledField.Builder(
          name = "id",
          type = GraphQLID.type.notNull()
        ).build(),
        CompiledField.Builder(
          name = "title",
          type = GraphQLString.type.notNull()
        ).build(),
        CompiledField.Builder(
          name = "description",
          type = GraphQLString.type.notNull()
        ).build(),
        CompiledField.Builder(
          name = "publishedAt",
          type = DateTime.type.notNull()
        ).build(),
        CompiledField.Builder(
          name = "readTime",
          type = GraphQLInt.type.notNull()
        ).build(),
        CompiledField.Builder(
          name = "cover",
          type = Url.type.notNull()
        ).build(),
        CompiledField.Builder(
          name = "essence",
          type = PostEssence.type
        ).selections(__essence)
        .build()
      )

  private val __postPage: List<CompiledSelection> = listOf(
        CompiledField.Builder(
          name = "list",
          type = Post.type.notNull().list().notNull()
        ).selections(__list)
        .build()
      )

  public val __root: List<CompiledSelection> = listOf(
        CompiledField.Builder(
          name = "postPage",
          type = PostPage.type.notNull()
        ).arguments(listOf(
          CompiledArgument.Builder("first", 6).build()
        ))
        .selections(__postPage)
        .build()
      )
}
