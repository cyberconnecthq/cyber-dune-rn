//
// AUTO-GENERATED FILE. DO NOT MODIFY.
//
// This class was automatically generated by Apollo GraphQL version '3.8.2'.
//
package com.cyberconnect.link3.adapter

import com.apollographql.apollo3.api.Adapter
import com.apollographql.apollo3.api.AnyAdapter
import com.apollographql.apollo3.api.CustomScalarAdapters
import com.apollographql.apollo3.api.NullableBooleanAdapter
import com.apollographql.apollo3.api.NullableIntAdapter
import com.apollographql.apollo3.api.NullableStringAdapter
import com.apollographql.apollo3.api.Optional
import com.apollographql.apollo3.api.StringAdapter
import com.apollographql.apollo3.api.json.JsonReader
import com.apollographql.apollo3.api.json.JsonWriter
import com.apollographql.apollo3.api.present
import com.cyberconnect.link3.LoginMutation
import kotlin.IllegalStateException
import kotlin.Unit

public object LoginMutation_VariablesAdapter : Adapter<LoginMutation> {
  public override fun fromJson(reader: JsonReader, customScalarAdapters: CustomScalarAdapters):
      LoginMutation = throw IllegalStateException("Input type used in output position")

  public override fun toJson(
    writer: JsonWriter,
    customScalarAdapters: CustomScalarAdapters,
    `value`: LoginMutation,
  ): Unit {
    writer.name("address")
    AnyAdapter.toJson(writer, customScalarAdapters, value.address)
    writer.name("signature")
    StringAdapter.toJson(writer, customScalarAdapters, value.signature)
    writer.name("signedMessage")
    StringAdapter.toJson(writer, customScalarAdapters, value.signedMessage)
    if (value.token is Optional.Present) {
      writer.name("token")
      NullableStringAdapter.present().toJson(writer, customScalarAdapters, value.token)
    }
    if (value.isEIP1271 is Optional.Present) {
      writer.name("isEIP1271")
      NullableBooleanAdapter.present().toJson(writer, customScalarAdapters, value.isEIP1271)
    }
    if (value.chainId is Optional.Present) {
      writer.name("chainId")
      NullableIntAdapter.present().toJson(writer, customScalarAdapters, value.chainId)
    }
  }
}
