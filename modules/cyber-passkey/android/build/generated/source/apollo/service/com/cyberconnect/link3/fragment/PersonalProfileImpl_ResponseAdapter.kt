//
// AUTO-GENERATED FILE. DO NOT MODIFY.
//
// This class was automatically generated by Apollo GraphQL version '3.8.2'.
//
package com.cyberconnect.link3.fragment

import com.apollographql.apollo3.api.Adapter
import com.apollographql.apollo3.api.AnyAdapter
import com.apollographql.apollo3.api.BooleanAdapter
import com.apollographql.apollo3.api.CustomScalarAdapters
import com.apollographql.apollo3.api.IntAdapter
import com.apollographql.apollo3.api.NullableStringAdapter
import com.apollographql.apollo3.api.StringAdapter
import com.apollographql.apollo3.api.evaluate
import com.apollographql.apollo3.api.json.JsonReader
import com.apollographql.apollo3.api.json.JsonWriter
import com.apollographql.apollo3.api.list
import com.apollographql.apollo3.api.nullable
import com.apollographql.apollo3.api.obj
import com.apollographql.apollo3.api.possibleTypes
import com.cyberconnect.link3.type.Attestation_Status
import com.cyberconnect.link3.type.Attestation_Type
import com.cyberconnect.link3.type.ConnectStatus
import com.cyberconnect.link3.type.HeadlineType
import com.cyberconnect.link3.type.PersonalDisplayName_Type
import com.cyberconnect.link3.type.PersonalPicture_Type
import com.cyberconnect.link3.type.adapter.Attestation_Status_ResponseAdapter
import com.cyberconnect.link3.type.adapter.Attestation_Type_ResponseAdapter
import com.cyberconnect.link3.type.adapter.ConnectStatus_ResponseAdapter
import com.cyberconnect.link3.type.adapter.HeadlineType_ResponseAdapter
import com.cyberconnect.link3.type.adapter.PersonalDisplayName_Type_ResponseAdapter
import com.cyberconnect.link3.type.adapter.PersonalPicture_Type_ResponseAdapter
import kotlin.Any
import kotlin.Boolean
import kotlin.Int
import kotlin.String
import kotlin.Unit

public object PersonalProfileImpl_ResponseAdapter {
  public object PersonalProfile : Adapter<com.cyberconnect.link3.fragment.PersonalProfile> {
    public val RESPONSE_NAMES: kotlin.collections.List<String> = listOf("bio", "reputation",
        "owner", "avatarFrameTokenId", "connectStatus", "connectionsCount", "isVerified",
        "connections", "mutualConnections", "headline", "identities", "isAdmin", "isFollowing",
        "region", "languages", "personaldisplayName", "personalProfilePicture",
        "personalBackgroundPicture")

    public override fun fromJson(reader: JsonReader, customScalarAdapters: CustomScalarAdapters):
        com.cyberconnect.link3.fragment.PersonalProfile {
      var _bio: String? = null
      var _reputation: com.cyberconnect.link3.fragment.PersonalProfile.Reputation? = null
      var _owner: com.cyberconnect.link3.fragment.PersonalProfile.Owner? = null
      var _avatarFrameTokenId: String? = null
      var _connectStatus: ConnectStatus? = null
      var _connectionsCount: Int? = null
      var _isVerified: Boolean? = null
      var _connections: com.cyberconnect.link3.fragment.PersonalProfile.Connections? = null
      var _mutualConnections: com.cyberconnect.link3.fragment.PersonalProfile.MutualConnections? = null
      var _headline: com.cyberconnect.link3.fragment.PersonalProfile.Headline? = null
      var _identities: kotlin.collections.List<com.cyberconnect.link3.fragment.PersonalProfile.Identity>? = null
      var _isAdmin: Boolean? = null
      var _isFollowing: Boolean? = null
      var _region: String? = null
      var _languages: kotlin.collections.List<String>? = null
      var _personaldisplayName: com.cyberconnect.link3.fragment.PersonalProfile.PersonaldisplayName? = null
      var _personalProfilePicture: com.cyberconnect.link3.fragment.PersonalProfile.PersonalProfilePicture? = null
      var _personalBackgroundPicture: com.cyberconnect.link3.fragment.PersonalProfile.PersonalBackgroundPicture? = null

      while(true) {
        when (reader.selectName(RESPONSE_NAMES)) {
          0 -> _bio = StringAdapter.fromJson(reader, customScalarAdapters)
          1 -> _reputation = Reputation.obj().fromJson(reader, customScalarAdapters)
          2 -> _owner = Owner.obj().fromJson(reader, customScalarAdapters)
          3 -> _avatarFrameTokenId = NullableStringAdapter.fromJson(reader, customScalarAdapters)
          4 -> _connectStatus = ConnectStatus_ResponseAdapter.fromJson(reader, customScalarAdapters)
          5 -> _connectionsCount = IntAdapter.fromJson(reader, customScalarAdapters)
          6 -> _isVerified = BooleanAdapter.fromJson(reader, customScalarAdapters)
          7 -> _connections = Connections.obj().fromJson(reader, customScalarAdapters)
          8 -> _mutualConnections = MutualConnections.obj().fromJson(reader, customScalarAdapters)
          9 -> _headline = Headline.obj().fromJson(reader, customScalarAdapters)
          10 -> _identities = Identity.obj().list().nullable().fromJson(reader,
              customScalarAdapters)
          11 -> _isAdmin = BooleanAdapter.fromJson(reader, customScalarAdapters)
          12 -> _isFollowing = BooleanAdapter.fromJson(reader, customScalarAdapters)
          13 -> _region = StringAdapter.fromJson(reader, customScalarAdapters)
          14 -> _languages = StringAdapter.list().nullable().fromJson(reader, customScalarAdapters)
          15 -> _personaldisplayName = PersonaldisplayName.obj().fromJson(reader,
              customScalarAdapters)
          16 -> _personalProfilePicture = PersonalProfilePicture.obj().fromJson(reader,
              customScalarAdapters)
          17 -> _personalBackgroundPicture = PersonalBackgroundPicture.obj().fromJson(reader,
              customScalarAdapters)
          else -> break
        }
      }

      return com.cyberconnect.link3.fragment.PersonalProfile(
        bio = _bio!!,
        reputation = _reputation!!,
        owner = _owner!!,
        avatarFrameTokenId = _avatarFrameTokenId,
        connectStatus = _connectStatus!!,
        connectionsCount = _connectionsCount!!,
        isVerified = _isVerified!!,
        connections = _connections!!,
        mutualConnections = _mutualConnections!!,
        headline = _headline!!,
        identities = _identities,
        isAdmin = _isAdmin!!,
        isFollowing = _isFollowing!!,
        region = _region!!,
        languages = _languages,
        personaldisplayName = _personaldisplayName!!,
        personalProfilePicture = _personalProfilePicture!!,
        personalBackgroundPicture = _personalBackgroundPicture!!
      )
    }

    public override fun toJson(
      writer: JsonWriter,
      customScalarAdapters: CustomScalarAdapters,
      `value`: com.cyberconnect.link3.fragment.PersonalProfile,
    ): Unit {
      writer.name("bio")
      StringAdapter.toJson(writer, customScalarAdapters, value.bio)

      writer.name("reputation")
      Reputation.obj().toJson(writer, customScalarAdapters, value.reputation)

      writer.name("owner")
      Owner.obj().toJson(writer, customScalarAdapters, value.owner)

      writer.name("avatarFrameTokenId")
      NullableStringAdapter.toJson(writer, customScalarAdapters, value.avatarFrameTokenId)

      writer.name("connectStatus")
      ConnectStatus_ResponseAdapter.toJson(writer, customScalarAdapters, value.connectStatus)

      writer.name("connectionsCount")
      IntAdapter.toJson(writer, customScalarAdapters, value.connectionsCount)

      writer.name("isVerified")
      BooleanAdapter.toJson(writer, customScalarAdapters, value.isVerified)

      writer.name("connections")
      Connections.obj().toJson(writer, customScalarAdapters, value.connections)

      writer.name("mutualConnections")
      MutualConnections.obj().toJson(writer, customScalarAdapters, value.mutualConnections)

      writer.name("headline")
      Headline.obj().toJson(writer, customScalarAdapters, value.headline)

      writer.name("identities")
      Identity.obj().list().nullable().toJson(writer, customScalarAdapters, value.identities)

      writer.name("isAdmin")
      BooleanAdapter.toJson(writer, customScalarAdapters, value.isAdmin)

      writer.name("isFollowing")
      BooleanAdapter.toJson(writer, customScalarAdapters, value.isFollowing)

      writer.name("region")
      StringAdapter.toJson(writer, customScalarAdapters, value.region)

      writer.name("languages")
      StringAdapter.list().nullable().toJson(writer, customScalarAdapters, value.languages)

      writer.name("personaldisplayName")
      PersonaldisplayName.obj().toJson(writer, customScalarAdapters, value.personaldisplayName)

      writer.name("personalProfilePicture")
      PersonalProfilePicture.obj().toJson(writer, customScalarAdapters,
          value.personalProfilePicture)

      writer.name("personalBackgroundPicture")
      PersonalBackgroundPicture.obj().toJson(writer, customScalarAdapters,
          value.personalBackgroundPicture)
    }
  }

  public object Reputation : Adapter<com.cyberconnect.link3.fragment.PersonalProfile.Reputation> {
    public val RESPONSE_NAMES: kotlin.collections.List<String> = listOf("total")

    public override fun fromJson(reader: JsonReader, customScalarAdapters: CustomScalarAdapters):
        com.cyberconnect.link3.fragment.PersonalProfile.Reputation {
      var _total: Int? = null

      while(true) {
        when (reader.selectName(RESPONSE_NAMES)) {
          0 -> _total = IntAdapter.fromJson(reader, customScalarAdapters)
          else -> break
        }
      }

      return com.cyberconnect.link3.fragment.PersonalProfile.Reputation(
        total = _total!!
      )
    }

    public override fun toJson(
      writer: JsonWriter,
      customScalarAdapters: CustomScalarAdapters,
      `value`: com.cyberconnect.link3.fragment.PersonalProfile.Reputation,
    ): Unit {
      writer.name("total")
      IntAdapter.toJson(writer, customScalarAdapters, value.total)
    }
  }

  public object Owner : Adapter<com.cyberconnect.link3.fragment.PersonalProfile.Owner> {
    public val RESPONSE_NAMES: kotlin.collections.List<String> = listOf("id", "lightInfo")

    public override fun fromJson(reader: JsonReader, customScalarAdapters: CustomScalarAdapters):
        com.cyberconnect.link3.fragment.PersonalProfile.Owner {
      var _id: String? = null
      var _lightInfo: com.cyberconnect.link3.fragment.PersonalProfile.LightInfo? = null

      while(true) {
        when (reader.selectName(RESPONSE_NAMES)) {
          0 -> _id = StringAdapter.fromJson(reader, customScalarAdapters)
          1 -> _lightInfo = LightInfo.obj().fromJson(reader, customScalarAdapters)
          else -> break
        }
      }

      return com.cyberconnect.link3.fragment.PersonalProfile.Owner(
        id = _id!!,
        lightInfo = _lightInfo!!
      )
    }

    public override fun toJson(
      writer: JsonWriter,
      customScalarAdapters: CustomScalarAdapters,
      `value`: com.cyberconnect.link3.fragment.PersonalProfile.Owner,
    ): Unit {
      writer.name("id")
      StringAdapter.toJson(writer, customScalarAdapters, value.id)

      writer.name("lightInfo")
      LightInfo.obj().toJson(writer, customScalarAdapters, value.lightInfo)
    }
  }

  public object LightInfo : Adapter<com.cyberconnect.link3.fragment.PersonalProfile.LightInfo> {
    public val RESPONSE_NAMES: kotlin.collections.List<String> = listOf("attestation", "remark")

    public override fun fromJson(reader: JsonReader, customScalarAdapters: CustomScalarAdapters):
        com.cyberconnect.link3.fragment.PersonalProfile.LightInfo {
      var _attestation: com.cyberconnect.link3.fragment.PersonalProfile.Attestation? = null
      var _remark: String? = null

      while(true) {
        when (reader.selectName(RESPONSE_NAMES)) {
          0 -> _attestation = Attestation.obj().nullable().fromJson(reader, customScalarAdapters)
          1 -> _remark = StringAdapter.fromJson(reader, customScalarAdapters)
          else -> break
        }
      }

      return com.cyberconnect.link3.fragment.PersonalProfile.LightInfo(
        attestation = _attestation,
        remark = _remark!!
      )
    }

    public override fun toJson(
      writer: JsonWriter,
      customScalarAdapters: CustomScalarAdapters,
      `value`: com.cyberconnect.link3.fragment.PersonalProfile.LightInfo,
    ): Unit {
      writer.name("attestation")
      Attestation.obj().nullable().toJson(writer, customScalarAdapters, value.attestation)

      writer.name("remark")
      StringAdapter.toJson(writer, customScalarAdapters, value.remark)
    }
  }

  public object Attestation : Adapter<com.cyberconnect.link3.fragment.PersonalProfile.Attestation> {
    public val RESPONSE_NAMES: kotlin.collections.List<String> = listOf("status", "uid", "type")

    public override fun fromJson(reader: JsonReader, customScalarAdapters: CustomScalarAdapters):
        com.cyberconnect.link3.fragment.PersonalProfile.Attestation {
      var _status: Attestation_Status? = null
      var _uid: String? = null
      var _type: Attestation_Type? = null

      while(true) {
        when (reader.selectName(RESPONSE_NAMES)) {
          0 -> _status = Attestation_Status_ResponseAdapter.fromJson(reader, customScalarAdapters)
          1 -> _uid = StringAdapter.fromJson(reader, customScalarAdapters)
          2 -> _type = Attestation_Type_ResponseAdapter.fromJson(reader, customScalarAdapters)
          else -> break
        }
      }

      return com.cyberconnect.link3.fragment.PersonalProfile.Attestation(
        status = _status!!,
        uid = _uid!!,
        type = _type!!
      )
    }

    public override fun toJson(
      writer: JsonWriter,
      customScalarAdapters: CustomScalarAdapters,
      `value`: com.cyberconnect.link3.fragment.PersonalProfile.Attestation,
    ): Unit {
      writer.name("status")
      Attestation_Status_ResponseAdapter.toJson(writer, customScalarAdapters, value.status)

      writer.name("uid")
      StringAdapter.toJson(writer, customScalarAdapters, value.uid)

      writer.name("type")
      Attestation_Type_ResponseAdapter.toJson(writer, customScalarAdapters, value.type)
    }
  }

  public object Connections : Adapter<com.cyberconnect.link3.fragment.PersonalProfile.Connections> {
    public val RESPONSE_NAMES: kotlin.collections.List<String> = listOf("list")

    public override fun fromJson(reader: JsonReader, customScalarAdapters: CustomScalarAdapters):
        com.cyberconnect.link3.fragment.PersonalProfile.Connections {
      var _list: kotlin.collections.List<com.cyberconnect.link3.fragment.PersonalProfile.List>? = null

      while(true) {
        when (reader.selectName(RESPONSE_NAMES)) {
          0 -> _list = List.obj(true).list().fromJson(reader, customScalarAdapters)
          else -> break
        }
      }

      return com.cyberconnect.link3.fragment.PersonalProfile.Connections(
        list = _list!!
      )
    }

    public override fun toJson(
      writer: JsonWriter,
      customScalarAdapters: CustomScalarAdapters,
      `value`: com.cyberconnect.link3.fragment.PersonalProfile.Connections,
    ): Unit {
      writer.name("list")
      List.obj(true).list().toJson(writer, customScalarAdapters, value.list)
    }
  }

  public object List : Adapter<com.cyberconnect.link3.fragment.PersonalProfile.List> {
    public val RESPONSE_NAMES: kotlin.collections.List<String> = listOf("__typename", "handle",
        "id")

    public override fun fromJson(reader: JsonReader, customScalarAdapters: CustomScalarAdapters):
        com.cyberconnect.link3.fragment.PersonalProfile.List {
      var __typename: String? = null
      var _handle: String? = null
      var _id: String? = null

      while(true) {
        when (reader.selectName(RESPONSE_NAMES)) {
          0 -> __typename = StringAdapter.fromJson(reader, customScalarAdapters)
          1 -> _handle = StringAdapter.fromJson(reader, customScalarAdapters)
          2 -> _id = StringAdapter.fromJson(reader, customScalarAdapters)
          else -> break
        }
      }

      check(__typename != null) {
        "__typename was not found"
      }

      var _onPerProfile: com.cyberconnect.link3.fragment.PersonalProfile.OnPerProfile? = null
      if (possibleTypes("PerProfile").evaluate(customScalarAdapters.adapterContext.variables(), __typename, customScalarAdapters.adapterContext, null)) {
        reader.rewind()
        _onPerProfile = com.cyberconnect.link3.fragment.PersonalProfileImpl_ResponseAdapter.OnPerProfile.fromJson(reader,
            customScalarAdapters)
      }

      return com.cyberconnect.link3.fragment.PersonalProfile.List(
        __typename = __typename,
        handle = _handle!!,
        id = _id!!,
        onPerProfile = _onPerProfile
      )
    }

    public override fun toJson(
      writer: JsonWriter,
      customScalarAdapters: CustomScalarAdapters,
      `value`: com.cyberconnect.link3.fragment.PersonalProfile.List,
    ): Unit {
      writer.name("__typename")
      StringAdapter.toJson(writer, customScalarAdapters, value.__typename)

      writer.name("handle")
      StringAdapter.toJson(writer, customScalarAdapters, value.handle)

      writer.name("id")
      StringAdapter.toJson(writer, customScalarAdapters, value.id)

      if (value.onPerProfile != null) {
        com.cyberconnect.link3.fragment.PersonalProfileImpl_ResponseAdapter.OnPerProfile.toJson(writer,
            customScalarAdapters, value.onPerProfile)
      }
    }
  }

  public object OnPerProfile : Adapter<com.cyberconnect.link3.fragment.PersonalProfile.OnPerProfile>
      {
    public val RESPONSE_NAMES: kotlin.collections.List<String> = listOf("profilePicture",
        "displayName")

    public override fun fromJson(reader: JsonReader, customScalarAdapters: CustomScalarAdapters):
        com.cyberconnect.link3.fragment.PersonalProfile.OnPerProfile {
      var _profilePicture: com.cyberconnect.link3.fragment.PersonalProfile.ProfilePicture? = null
      var _displayName: com.cyberconnect.link3.fragment.PersonalProfile.DisplayName? = null

      while(true) {
        when (reader.selectName(RESPONSE_NAMES)) {
          0 -> _profilePicture = ProfilePicture.obj().fromJson(reader, customScalarAdapters)
          1 -> _displayName = DisplayName.obj().fromJson(reader, customScalarAdapters)
          else -> break
        }
      }

      return com.cyberconnect.link3.fragment.PersonalProfile.OnPerProfile(
        profilePicture = _profilePicture!!,
        displayName = _displayName!!
      )
    }

    public override fun toJson(
      writer: JsonWriter,
      customScalarAdapters: CustomScalarAdapters,
      `value`: com.cyberconnect.link3.fragment.PersonalProfile.OnPerProfile,
    ): Unit {
      writer.name("profilePicture")
      ProfilePicture.obj().toJson(writer, customScalarAdapters, value.profilePicture)

      writer.name("displayName")
      DisplayName.obj().toJson(writer, customScalarAdapters, value.displayName)
    }
  }

  public object ProfilePicture :
      Adapter<com.cyberconnect.link3.fragment.PersonalProfile.ProfilePicture> {
    public val RESPONSE_NAMES: kotlin.collections.List<String> = listOf("picture")

    public override fun fromJson(reader: JsonReader, customScalarAdapters: CustomScalarAdapters):
        com.cyberconnect.link3.fragment.PersonalProfile.ProfilePicture {
      var _picture: String? = null

      while(true) {
        when (reader.selectName(RESPONSE_NAMES)) {
          0 -> _picture = NullableStringAdapter.fromJson(reader, customScalarAdapters)
          else -> break
        }
      }

      return com.cyberconnect.link3.fragment.PersonalProfile.ProfilePicture(
        picture = _picture
      )
    }

    public override fun toJson(
      writer: JsonWriter,
      customScalarAdapters: CustomScalarAdapters,
      `value`: com.cyberconnect.link3.fragment.PersonalProfile.ProfilePicture,
    ): Unit {
      writer.name("picture")
      NullableStringAdapter.toJson(writer, customScalarAdapters, value.picture)
    }
  }

  public object DisplayName : Adapter<com.cyberconnect.link3.fragment.PersonalProfile.DisplayName> {
    public val RESPONSE_NAMES: kotlin.collections.List<String> = listOf("displayName")

    public override fun fromJson(reader: JsonReader, customScalarAdapters: CustomScalarAdapters):
        com.cyberconnect.link3.fragment.PersonalProfile.DisplayName {
      var _displayName: String? = null

      while(true) {
        when (reader.selectName(RESPONSE_NAMES)) {
          0 -> _displayName = StringAdapter.fromJson(reader, customScalarAdapters)
          else -> break
        }
      }

      return com.cyberconnect.link3.fragment.PersonalProfile.DisplayName(
        displayName = _displayName!!
      )
    }

    public override fun toJson(
      writer: JsonWriter,
      customScalarAdapters: CustomScalarAdapters,
      `value`: com.cyberconnect.link3.fragment.PersonalProfile.DisplayName,
    ): Unit {
      writer.name("displayName")
      StringAdapter.toJson(writer, customScalarAdapters, value.displayName)
    }
  }

  public object MutualConnections :
      Adapter<com.cyberconnect.link3.fragment.PersonalProfile.MutualConnections> {
    public val RESPONSE_NAMES: kotlin.collections.List<String> = listOf("list")

    public override fun fromJson(reader: JsonReader, customScalarAdapters: CustomScalarAdapters):
        com.cyberconnect.link3.fragment.PersonalProfile.MutualConnections {
      var _list: kotlin.collections.List<com.cyberconnect.link3.fragment.PersonalProfile.List1>? = null

      while(true) {
        when (reader.selectName(RESPONSE_NAMES)) {
          0 -> _list = List1.obj(true).list().fromJson(reader, customScalarAdapters)
          else -> break
        }
      }

      return com.cyberconnect.link3.fragment.PersonalProfile.MutualConnections(
        list = _list!!
      )
    }

    public override fun toJson(
      writer: JsonWriter,
      customScalarAdapters: CustomScalarAdapters,
      `value`: com.cyberconnect.link3.fragment.PersonalProfile.MutualConnections,
    ): Unit {
      writer.name("list")
      List1.obj(true).list().toJson(writer, customScalarAdapters, value.list)
    }
  }

  public object List1 : Adapter<com.cyberconnect.link3.fragment.PersonalProfile.List1> {
    public val RESPONSE_NAMES: kotlin.collections.List<String> = listOf("__typename", "handle",
        "id")

    public override fun fromJson(reader: JsonReader, customScalarAdapters: CustomScalarAdapters):
        com.cyberconnect.link3.fragment.PersonalProfile.List1 {
      var __typename: String? = null
      var _handle: String? = null
      var _id: String? = null

      while(true) {
        when (reader.selectName(RESPONSE_NAMES)) {
          0 -> __typename = StringAdapter.fromJson(reader, customScalarAdapters)
          1 -> _handle = StringAdapter.fromJson(reader, customScalarAdapters)
          2 -> _id = StringAdapter.fromJson(reader, customScalarAdapters)
          else -> break
        }
      }

      check(__typename != null) {
        "__typename was not found"
      }

      var _onPerProfile: com.cyberconnect.link3.fragment.PersonalProfile.OnPerProfile1? = null
      if (possibleTypes("PerProfile").evaluate(customScalarAdapters.adapterContext.variables(), __typename, customScalarAdapters.adapterContext, null)) {
        reader.rewind()
        _onPerProfile = com.cyberconnect.link3.fragment.PersonalProfileImpl_ResponseAdapter.OnPerProfile1.fromJson(reader,
            customScalarAdapters)
      }

      return com.cyberconnect.link3.fragment.PersonalProfile.List1(
        __typename = __typename,
        handle = _handle!!,
        id = _id!!,
        onPerProfile = _onPerProfile
      )
    }

    public override fun toJson(
      writer: JsonWriter,
      customScalarAdapters: CustomScalarAdapters,
      `value`: com.cyberconnect.link3.fragment.PersonalProfile.List1,
    ): Unit {
      writer.name("__typename")
      StringAdapter.toJson(writer, customScalarAdapters, value.__typename)

      writer.name("handle")
      StringAdapter.toJson(writer, customScalarAdapters, value.handle)

      writer.name("id")
      StringAdapter.toJson(writer, customScalarAdapters, value.id)

      if (value.onPerProfile != null) {
        com.cyberconnect.link3.fragment.PersonalProfileImpl_ResponseAdapter.OnPerProfile1.toJson(writer,
            customScalarAdapters, value.onPerProfile)
      }
    }
  }

  public object OnPerProfile1 :
      Adapter<com.cyberconnect.link3.fragment.PersonalProfile.OnPerProfile1> {
    public val RESPONSE_NAMES: kotlin.collections.List<String> = listOf("profilePicture",
        "displayName")

    public override fun fromJson(reader: JsonReader, customScalarAdapters: CustomScalarAdapters):
        com.cyberconnect.link3.fragment.PersonalProfile.OnPerProfile1 {
      var _profilePicture: com.cyberconnect.link3.fragment.PersonalProfile.ProfilePicture1? = null
      var _displayName: com.cyberconnect.link3.fragment.PersonalProfile.DisplayName1? = null

      while(true) {
        when (reader.selectName(RESPONSE_NAMES)) {
          0 -> _profilePicture = ProfilePicture1.obj().fromJson(reader, customScalarAdapters)
          1 -> _displayName = DisplayName1.obj().fromJson(reader, customScalarAdapters)
          else -> break
        }
      }

      return com.cyberconnect.link3.fragment.PersonalProfile.OnPerProfile1(
        profilePicture = _profilePicture!!,
        displayName = _displayName!!
      )
    }

    public override fun toJson(
      writer: JsonWriter,
      customScalarAdapters: CustomScalarAdapters,
      `value`: com.cyberconnect.link3.fragment.PersonalProfile.OnPerProfile1,
    ): Unit {
      writer.name("profilePicture")
      ProfilePicture1.obj().toJson(writer, customScalarAdapters, value.profilePicture)

      writer.name("displayName")
      DisplayName1.obj().toJson(writer, customScalarAdapters, value.displayName)
    }
  }

  public object ProfilePicture1 :
      Adapter<com.cyberconnect.link3.fragment.PersonalProfile.ProfilePicture1> {
    public val RESPONSE_NAMES: kotlin.collections.List<String> = listOf("picture")

    public override fun fromJson(reader: JsonReader, customScalarAdapters: CustomScalarAdapters):
        com.cyberconnect.link3.fragment.PersonalProfile.ProfilePicture1 {
      var _picture: String? = null

      while(true) {
        when (reader.selectName(RESPONSE_NAMES)) {
          0 -> _picture = NullableStringAdapter.fromJson(reader, customScalarAdapters)
          else -> break
        }
      }

      return com.cyberconnect.link3.fragment.PersonalProfile.ProfilePicture1(
        picture = _picture
      )
    }

    public override fun toJson(
      writer: JsonWriter,
      customScalarAdapters: CustomScalarAdapters,
      `value`: com.cyberconnect.link3.fragment.PersonalProfile.ProfilePicture1,
    ): Unit {
      writer.name("picture")
      NullableStringAdapter.toJson(writer, customScalarAdapters, value.picture)
    }
  }

  public object DisplayName1 : Adapter<com.cyberconnect.link3.fragment.PersonalProfile.DisplayName1>
      {
    public val RESPONSE_NAMES: kotlin.collections.List<String> = listOf("displayName")

    public override fun fromJson(reader: JsonReader, customScalarAdapters: CustomScalarAdapters):
        com.cyberconnect.link3.fragment.PersonalProfile.DisplayName1 {
      var _displayName: String? = null

      while(true) {
        when (reader.selectName(RESPONSE_NAMES)) {
          0 -> _displayName = StringAdapter.fromJson(reader, customScalarAdapters)
          else -> break
        }
      }

      return com.cyberconnect.link3.fragment.PersonalProfile.DisplayName1(
        displayName = _displayName!!
      )
    }

    public override fun toJson(
      writer: JsonWriter,
      customScalarAdapters: CustomScalarAdapters,
      `value`: com.cyberconnect.link3.fragment.PersonalProfile.DisplayName1,
    ): Unit {
      writer.name("displayName")
      StringAdapter.toJson(writer, customScalarAdapters, value.displayName)
    }
  }

  public object Headline : Adapter<com.cyberconnect.link3.fragment.PersonalProfile.Headline> {
    public val RESPONSE_NAMES: kotlin.collections.List<String> = listOf("twitterId",
        "twitterHandle", "displayName", "avatar", "title", "description", "headlineType",
        "followersCount", "profileId")

    public override fun fromJson(reader: JsonReader, customScalarAdapters: CustomScalarAdapters):
        com.cyberconnect.link3.fragment.PersonalProfile.Headline {
      var _twitterId: String? = null
      var _twitterHandle: String? = null
      var _displayName: String? = null
      var _avatar: Any? = null
      var _title: String? = null
      var _description: String? = null
      var _headlineType: HeadlineType? = null
      var _followersCount: Int? = null
      var _profileId: String? = null

      while(true) {
        when (reader.selectName(RESPONSE_NAMES)) {
          0 -> _twitterId = StringAdapter.fromJson(reader, customScalarAdapters)
          1 -> _twitterHandle = StringAdapter.fromJson(reader, customScalarAdapters)
          2 -> _displayName = StringAdapter.fromJson(reader, customScalarAdapters)
          3 -> _avatar = AnyAdapter.fromJson(reader, customScalarAdapters)
          4 -> _title = StringAdapter.fromJson(reader, customScalarAdapters)
          5 -> _description = StringAdapter.fromJson(reader, customScalarAdapters)
          6 -> _headlineType = HeadlineType_ResponseAdapter.fromJson(reader, customScalarAdapters)
          7 -> _followersCount = IntAdapter.fromJson(reader, customScalarAdapters)
          8 -> _profileId = NullableStringAdapter.fromJson(reader, customScalarAdapters)
          else -> break
        }
      }

      return com.cyberconnect.link3.fragment.PersonalProfile.Headline(
        twitterId = _twitterId!!,
        twitterHandle = _twitterHandle!!,
        displayName = _displayName!!,
        avatar = _avatar!!,
        title = _title!!,
        description = _description!!,
        headlineType = _headlineType!!,
        followersCount = _followersCount!!,
        profileId = _profileId
      )
    }

    public override fun toJson(
      writer: JsonWriter,
      customScalarAdapters: CustomScalarAdapters,
      `value`: com.cyberconnect.link3.fragment.PersonalProfile.Headline,
    ): Unit {
      writer.name("twitterId")
      StringAdapter.toJson(writer, customScalarAdapters, value.twitterId)

      writer.name("twitterHandle")
      StringAdapter.toJson(writer, customScalarAdapters, value.twitterHandle)

      writer.name("displayName")
      StringAdapter.toJson(writer, customScalarAdapters, value.displayName)

      writer.name("avatar")
      AnyAdapter.toJson(writer, customScalarAdapters, value.avatar)

      writer.name("title")
      StringAdapter.toJson(writer, customScalarAdapters, value.title)

      writer.name("description")
      StringAdapter.toJson(writer, customScalarAdapters, value.description)

      writer.name("headlineType")
      HeadlineType_ResponseAdapter.toJson(writer, customScalarAdapters, value.headlineType)

      writer.name("followersCount")
      IntAdapter.toJson(writer, customScalarAdapters, value.followersCount)

      writer.name("profileId")
      NullableStringAdapter.toJson(writer, customScalarAdapters, value.profileId)
    }
  }

  public object Identity : Adapter<com.cyberconnect.link3.fragment.PersonalProfile.Identity> {
    public val RESPONSE_NAMES: kotlin.collections.List<String> = listOf("headline", "attestation")

    public override fun fromJson(reader: JsonReader, customScalarAdapters: CustomScalarAdapters):
        com.cyberconnect.link3.fragment.PersonalProfile.Identity {
      var _headline: com.cyberconnect.link3.fragment.PersonalProfile.Headline1? = null
      var _attestation: com.cyberconnect.link3.fragment.PersonalProfile.Attestation1? = null

      while(true) {
        when (reader.selectName(RESPONSE_NAMES)) {
          0 -> _headline = Headline1.obj().fromJson(reader, customScalarAdapters)
          1 -> _attestation = Attestation1.obj().nullable().fromJson(reader, customScalarAdapters)
          else -> break
        }
      }

      return com.cyberconnect.link3.fragment.PersonalProfile.Identity(
        headline = _headline!!,
        attestation = _attestation
      )
    }

    public override fun toJson(
      writer: JsonWriter,
      customScalarAdapters: CustomScalarAdapters,
      `value`: com.cyberconnect.link3.fragment.PersonalProfile.Identity,
    ): Unit {
      writer.name("headline")
      Headline1.obj().toJson(writer, customScalarAdapters, value.headline)

      writer.name("attestation")
      Attestation1.obj().nullable().toJson(writer, customScalarAdapters, value.attestation)
    }
  }

  public object Headline1 : Adapter<com.cyberconnect.link3.fragment.PersonalProfile.Headline1> {
    public val RESPONSE_NAMES: kotlin.collections.List<String> = listOf("twitterId",
        "twitterHandle", "displayName", "avatar", "title", "description", "headlineType",
        "followersCount")

    public override fun fromJson(reader: JsonReader, customScalarAdapters: CustomScalarAdapters):
        com.cyberconnect.link3.fragment.PersonalProfile.Headline1 {
      var _twitterId: String? = null
      var _twitterHandle: String? = null
      var _displayName: String? = null
      var _avatar: Any? = null
      var _title: String? = null
      var _description: String? = null
      var _headlineType: HeadlineType? = null
      var _followersCount: Int? = null

      while(true) {
        when (reader.selectName(RESPONSE_NAMES)) {
          0 -> _twitterId = StringAdapter.fromJson(reader, customScalarAdapters)
          1 -> _twitterHandle = StringAdapter.fromJson(reader, customScalarAdapters)
          2 -> _displayName = StringAdapter.fromJson(reader, customScalarAdapters)
          3 -> _avatar = AnyAdapter.fromJson(reader, customScalarAdapters)
          4 -> _title = StringAdapter.fromJson(reader, customScalarAdapters)
          5 -> _description = StringAdapter.fromJson(reader, customScalarAdapters)
          6 -> _headlineType = HeadlineType_ResponseAdapter.fromJson(reader, customScalarAdapters)
          7 -> _followersCount = IntAdapter.fromJson(reader, customScalarAdapters)
          else -> break
        }
      }

      return com.cyberconnect.link3.fragment.PersonalProfile.Headline1(
        twitterId = _twitterId!!,
        twitterHandle = _twitterHandle!!,
        displayName = _displayName!!,
        avatar = _avatar!!,
        title = _title!!,
        description = _description!!,
        headlineType = _headlineType!!,
        followersCount = _followersCount!!
      )
    }

    public override fun toJson(
      writer: JsonWriter,
      customScalarAdapters: CustomScalarAdapters,
      `value`: com.cyberconnect.link3.fragment.PersonalProfile.Headline1,
    ): Unit {
      writer.name("twitterId")
      StringAdapter.toJson(writer, customScalarAdapters, value.twitterId)

      writer.name("twitterHandle")
      StringAdapter.toJson(writer, customScalarAdapters, value.twitterHandle)

      writer.name("displayName")
      StringAdapter.toJson(writer, customScalarAdapters, value.displayName)

      writer.name("avatar")
      AnyAdapter.toJson(writer, customScalarAdapters, value.avatar)

      writer.name("title")
      StringAdapter.toJson(writer, customScalarAdapters, value.title)

      writer.name("description")
      StringAdapter.toJson(writer, customScalarAdapters, value.description)

      writer.name("headlineType")
      HeadlineType_ResponseAdapter.toJson(writer, customScalarAdapters, value.headlineType)

      writer.name("followersCount")
      IntAdapter.toJson(writer, customScalarAdapters, value.followersCount)
    }
  }

  public object Attestation1 : Adapter<com.cyberconnect.link3.fragment.PersonalProfile.Attestation1>
      {
    public val RESPONSE_NAMES: kotlin.collections.List<String> = listOf("uid", "status", "type")

    public override fun fromJson(reader: JsonReader, customScalarAdapters: CustomScalarAdapters):
        com.cyberconnect.link3.fragment.PersonalProfile.Attestation1 {
      var _uid: String? = null
      var _status: Attestation_Status? = null
      var _type: Attestation_Type? = null

      while(true) {
        when (reader.selectName(RESPONSE_NAMES)) {
          0 -> _uid = StringAdapter.fromJson(reader, customScalarAdapters)
          1 -> _status = Attestation_Status_ResponseAdapter.fromJson(reader, customScalarAdapters)
          2 -> _type = Attestation_Type_ResponseAdapter.fromJson(reader, customScalarAdapters)
          else -> break
        }
      }

      return com.cyberconnect.link3.fragment.PersonalProfile.Attestation1(
        uid = _uid!!,
        status = _status!!,
        type = _type!!
      )
    }

    public override fun toJson(
      writer: JsonWriter,
      customScalarAdapters: CustomScalarAdapters,
      `value`: com.cyberconnect.link3.fragment.PersonalProfile.Attestation1,
    ): Unit {
      writer.name("uid")
      StringAdapter.toJson(writer, customScalarAdapters, value.uid)

      writer.name("status")
      Attestation_Status_ResponseAdapter.toJson(writer, customScalarAdapters, value.status)

      writer.name("type")
      Attestation_Type_ResponseAdapter.toJson(writer, customScalarAdapters, value.type)
    }
  }

  public object PersonaldisplayName :
      Adapter<com.cyberconnect.link3.fragment.PersonalProfile.PersonaldisplayName> {
    public val RESPONSE_NAMES: kotlin.collections.List<String> = listOf("type", "displayName")

    public override fun fromJson(reader: JsonReader, customScalarAdapters: CustomScalarAdapters):
        com.cyberconnect.link3.fragment.PersonalProfile.PersonaldisplayName {
      var _type: PersonalDisplayName_Type? = null
      var _displayName: String? = null

      while(true) {
        when (reader.selectName(RESPONSE_NAMES)) {
          0 -> _type = PersonalDisplayName_Type_ResponseAdapter.fromJson(reader,
              customScalarAdapters)
          1 -> _displayName = StringAdapter.fromJson(reader, customScalarAdapters)
          else -> break
        }
      }

      return com.cyberconnect.link3.fragment.PersonalProfile.PersonaldisplayName(
        type = _type!!,
        displayName = _displayName!!
      )
    }

    public override fun toJson(
      writer: JsonWriter,
      customScalarAdapters: CustomScalarAdapters,
      `value`: com.cyberconnect.link3.fragment.PersonalProfile.PersonaldisplayName,
    ): Unit {
      writer.name("type")
      PersonalDisplayName_Type_ResponseAdapter.toJson(writer, customScalarAdapters, value.type)

      writer.name("displayName")
      StringAdapter.toJson(writer, customScalarAdapters, value.displayName)
    }
  }

  public object PersonalProfilePicture :
      Adapter<com.cyberconnect.link3.fragment.PersonalProfile.PersonalProfilePicture> {
    public val RESPONSE_NAMES: kotlin.collections.List<String> = listOf("picture", "type", "nfts")

    public override fun fromJson(reader: JsonReader, customScalarAdapters: CustomScalarAdapters):
        com.cyberconnect.link3.fragment.PersonalProfile.PersonalProfilePicture {
      var _picture: String? = null
      var _type: PersonalPicture_Type? = null
      var _nfts: kotlin.collections.List<com.cyberconnect.link3.fragment.PersonalProfile.Nft>? = null

      while(true) {
        when (reader.selectName(RESPONSE_NAMES)) {
          0 -> _picture = NullableStringAdapter.fromJson(reader, customScalarAdapters)
          1 -> _type = PersonalPicture_Type_ResponseAdapter.fromJson(reader, customScalarAdapters)
          2 -> _nfts = Nft.obj(true).list().nullable().fromJson(reader, customScalarAdapters)
          else -> break
        }
      }

      return com.cyberconnect.link3.fragment.PersonalProfile.PersonalProfilePicture(
        picture = _picture,
        type = _type!!,
        nfts = _nfts
      )
    }

    public override fun toJson(
      writer: JsonWriter,
      customScalarAdapters: CustomScalarAdapters,
      `value`: com.cyberconnect.link3.fragment.PersonalProfile.PersonalProfilePicture,
    ): Unit {
      writer.name("picture")
      NullableStringAdapter.toJson(writer, customScalarAdapters, value.picture)

      writer.name("type")
      PersonalPicture_Type_ResponseAdapter.toJson(writer, customScalarAdapters, value.type)

      writer.name("nfts")
      Nft.obj(true).list().nullable().toJson(writer, customScalarAdapters, value.nfts)
    }
  }

  public object Nft : Adapter<com.cyberconnect.link3.fragment.PersonalProfile.Nft> {
    public val RESPONSE_NAMES: kotlin.collections.List<String> = listOf("__typename")

    public override fun fromJson(reader: JsonReader, customScalarAdapters: CustomScalarAdapters):
        com.cyberconnect.link3.fragment.PersonalProfile.Nft {
      var __typename: String? = null

      while(true) {
        when (reader.selectName(RESPONSE_NAMES)) {
          0 -> __typename = StringAdapter.fromJson(reader, customScalarAdapters)
          else -> break
        }
      }

      reader.rewind()
      val _nFT = com.cyberconnect.link3.fragment.NFTImpl_ResponseAdapter.NFT.fromJson(reader,
          customScalarAdapters)

      return com.cyberconnect.link3.fragment.PersonalProfile.Nft(
        __typename = __typename!!,
        nFT = _nFT
      )
    }

    public override fun toJson(
      writer: JsonWriter,
      customScalarAdapters: CustomScalarAdapters,
      `value`: com.cyberconnect.link3.fragment.PersonalProfile.Nft,
    ): Unit {
      writer.name("__typename")
      StringAdapter.toJson(writer, customScalarAdapters, value.__typename)

      com.cyberconnect.link3.fragment.NFTImpl_ResponseAdapter.NFT.toJson(writer,
          customScalarAdapters, value.nFT)
    }
  }

  public object PersonalBackgroundPicture :
      Adapter<com.cyberconnect.link3.fragment.PersonalProfile.PersonalBackgroundPicture> {
    public val RESPONSE_NAMES: kotlin.collections.List<String> = listOf("picture", "type", "nfts")

    public override fun fromJson(reader: JsonReader, customScalarAdapters: CustomScalarAdapters):
        com.cyberconnect.link3.fragment.PersonalProfile.PersonalBackgroundPicture {
      var _picture: String? = null
      var _type: PersonalPicture_Type? = null
      var _nfts: kotlin.collections.List<com.cyberconnect.link3.fragment.PersonalProfile.Nft1>? = null

      while(true) {
        when (reader.selectName(RESPONSE_NAMES)) {
          0 -> _picture = NullableStringAdapter.fromJson(reader, customScalarAdapters)
          1 -> _type = PersonalPicture_Type_ResponseAdapter.fromJson(reader, customScalarAdapters)
          2 -> _nfts = Nft1.obj(true).list().nullable().fromJson(reader, customScalarAdapters)
          else -> break
        }
      }

      return com.cyberconnect.link3.fragment.PersonalProfile.PersonalBackgroundPicture(
        picture = _picture,
        type = _type!!,
        nfts = _nfts
      )
    }

    public override fun toJson(
      writer: JsonWriter,
      customScalarAdapters: CustomScalarAdapters,
      `value`: com.cyberconnect.link3.fragment.PersonalProfile.PersonalBackgroundPicture,
    ): Unit {
      writer.name("picture")
      NullableStringAdapter.toJson(writer, customScalarAdapters, value.picture)

      writer.name("type")
      PersonalPicture_Type_ResponseAdapter.toJson(writer, customScalarAdapters, value.type)

      writer.name("nfts")
      Nft1.obj(true).list().nullable().toJson(writer, customScalarAdapters, value.nfts)
    }
  }

  public object Nft1 : Adapter<com.cyberconnect.link3.fragment.PersonalProfile.Nft1> {
    public val RESPONSE_NAMES: kotlin.collections.List<String> = listOf("__typename")

    public override fun fromJson(reader: JsonReader, customScalarAdapters: CustomScalarAdapters):
        com.cyberconnect.link3.fragment.PersonalProfile.Nft1 {
      var __typename: String? = null

      while(true) {
        when (reader.selectName(RESPONSE_NAMES)) {
          0 -> __typename = StringAdapter.fromJson(reader, customScalarAdapters)
          else -> break
        }
      }

      reader.rewind()
      val _nFT = com.cyberconnect.link3.fragment.NFTImpl_ResponseAdapter.NFT.fromJson(reader,
          customScalarAdapters)

      return com.cyberconnect.link3.fragment.PersonalProfile.Nft1(
        __typename = __typename!!,
        nFT = _nFT
      )
    }

    public override fun toJson(
      writer: JsonWriter,
      customScalarAdapters: CustomScalarAdapters,
      `value`: com.cyberconnect.link3.fragment.PersonalProfile.Nft1,
    ): Unit {
      writer.name("__typename")
      StringAdapter.toJson(writer, customScalarAdapters, value.__typename)

      com.cyberconnect.link3.fragment.NFTImpl_ResponseAdapter.NFT.toJson(writer,
          customScalarAdapters, value.nFT)
    }
  }
}
