//
// AUTO-GENERATED FILE. DO NOT MODIFY.
//
// This class was automatically generated by Apollo GraphQL version '3.8.2'.
//
package com.cyberconnect.link3.adapter

import com.apollographql.apollo3.api.Adapter
import com.apollographql.apollo3.api.BooleanAdapter
import com.apollographql.apollo3.api.CustomScalarAdapters
import com.apollographql.apollo3.api.StringAdapter
import com.apollographql.apollo3.api.json.JsonReader
import com.apollographql.apollo3.api.json.JsonWriter
import com.apollographql.apollo3.api.list
import com.apollographql.apollo3.api.obj
import com.cyberconnect.link3.JoinEventRaffleMutation
import com.cyberconnect.link3.type.JoinRaffleResponse_Status
import com.cyberconnect.link3.type.adapter.JoinRaffleResponse_Status_ResponseAdapter
import kotlin.Boolean
import kotlin.String
import kotlin.Unit
import kotlin.collections.List

public object JoinEventRaffleMutation_ResponseAdapter {
  public object Data : Adapter<JoinEventRaffleMutation.Data> {
    public val RESPONSE_NAMES: List<String> = listOf("joinRaffle")

    public override fun fromJson(reader: JsonReader, customScalarAdapters: CustomScalarAdapters):
        JoinEventRaffleMutation.Data {
      var _joinRaffle: JoinEventRaffleMutation.JoinRaffle? = null

      while(true) {
        when (reader.selectName(RESPONSE_NAMES)) {
          0 -> _joinRaffle = JoinRaffle.obj().fromJson(reader, customScalarAdapters)
          else -> break
        }
      }

      return JoinEventRaffleMutation.Data(
        joinRaffle = _joinRaffle!!
      )
    }

    public override fun toJson(
      writer: JsonWriter,
      customScalarAdapters: CustomScalarAdapters,
      `value`: JoinEventRaffleMutation.Data,
    ): Unit {
      writer.name("joinRaffle")
      JoinRaffle.obj().toJson(writer, customScalarAdapters, value.joinRaffle)
    }
  }

  public object JoinRaffle : Adapter<JoinEventRaffleMutation.JoinRaffle> {
    public val RESPONSE_NAMES: List<String> = listOf("status", "requirement")

    public override fun fromJson(reader: JsonReader, customScalarAdapters: CustomScalarAdapters):
        JoinEventRaffleMutation.JoinRaffle {
      var _status: JoinRaffleResponse_Status? = null
      var _requirement: JoinEventRaffleMutation.Requirement? = null

      while(true) {
        when (reader.selectName(RESPONSE_NAMES)) {
          0 -> _status = JoinRaffleResponse_Status_ResponseAdapter.fromJson(reader,
              customScalarAdapters)
          1 -> _requirement = Requirement.obj().fromJson(reader, customScalarAdapters)
          else -> break
        }
      }

      return JoinEventRaffleMutation.JoinRaffle(
        status = _status!!,
        requirement = _requirement!!
      )
    }

    public override fun toJson(
      writer: JsonWriter,
      customScalarAdapters: CustomScalarAdapters,
      `value`: JoinEventRaffleMutation.JoinRaffle,
    ): Unit {
      writer.name("status")
      JoinRaffleResponse_Status_ResponseAdapter.toJson(writer, customScalarAdapters, value.status)

      writer.name("requirement")
      Requirement.obj().toJson(writer, customScalarAdapters, value.requirement)
    }
  }

  public object Requirement : Adapter<JoinEventRaffleMutation.Requirement> {
    public val RESPONSE_NAMES: List<String> = listOf("retweet", "follow", "likeAndRetweet", "tag",
        "comment", "whitelist", "attend", "twittersToFollow")

    public override fun fromJson(reader: JsonReader, customScalarAdapters: CustomScalarAdapters):
        JoinEventRaffleMutation.Requirement {
      var _retweet: Boolean? = null
      var _follow: Boolean? = null
      var _likeAndRetweet: Boolean? = null
      var _tag: Boolean? = null
      var _comment: Boolean? = null
      var _whitelist: Boolean? = null
      var _attend: Boolean? = null
      var _twittersToFollow: List<JoinEventRaffleMutation.TwittersToFollow>? = null

      while(true) {
        when (reader.selectName(RESPONSE_NAMES)) {
          0 -> _retweet = BooleanAdapter.fromJson(reader, customScalarAdapters)
          1 -> _follow = BooleanAdapter.fromJson(reader, customScalarAdapters)
          2 -> _likeAndRetweet = BooleanAdapter.fromJson(reader, customScalarAdapters)
          3 -> _tag = BooleanAdapter.fromJson(reader, customScalarAdapters)
          4 -> _comment = BooleanAdapter.fromJson(reader, customScalarAdapters)
          5 -> _whitelist = BooleanAdapter.fromJson(reader, customScalarAdapters)
          6 -> _attend = BooleanAdapter.fromJson(reader, customScalarAdapters)
          7 -> _twittersToFollow = TwittersToFollow.obj().list().fromJson(reader,
              customScalarAdapters)
          else -> break
        }
      }

      return JoinEventRaffleMutation.Requirement(
        retweet = _retweet!!,
        follow = _follow!!,
        likeAndRetweet = _likeAndRetweet!!,
        tag = _tag!!,
        comment = _comment!!,
        whitelist = _whitelist!!,
        attend = _attend!!,
        twittersToFollow = _twittersToFollow!!
      )
    }

    public override fun toJson(
      writer: JsonWriter,
      customScalarAdapters: CustomScalarAdapters,
      `value`: JoinEventRaffleMutation.Requirement,
    ): Unit {
      writer.name("retweet")
      BooleanAdapter.toJson(writer, customScalarAdapters, value.retweet)

      writer.name("follow")
      BooleanAdapter.toJson(writer, customScalarAdapters, value.follow)

      writer.name("likeAndRetweet")
      BooleanAdapter.toJson(writer, customScalarAdapters, value.likeAndRetweet)

      writer.name("tag")
      BooleanAdapter.toJson(writer, customScalarAdapters, value.tag)

      writer.name("comment")
      BooleanAdapter.toJson(writer, customScalarAdapters, value.comment)

      writer.name("whitelist")
      BooleanAdapter.toJson(writer, customScalarAdapters, value.whitelist)

      writer.name("attend")
      BooleanAdapter.toJson(writer, customScalarAdapters, value.attend)

      writer.name("twittersToFollow")
      TwittersToFollow.obj().list().toJson(writer, customScalarAdapters, value.twittersToFollow)
    }
  }

  public object TwittersToFollow : Adapter<JoinEventRaffleMutation.TwittersToFollow> {
    public val RESPONSE_NAMES: List<String> = listOf("twitterId", "twitterHandle")

    public override fun fromJson(reader: JsonReader, customScalarAdapters: CustomScalarAdapters):
        JoinEventRaffleMutation.TwittersToFollow {
      var _twitterId: String? = null
      var _twitterHandle: String? = null

      while(true) {
        when (reader.selectName(RESPONSE_NAMES)) {
          0 -> _twitterId = StringAdapter.fromJson(reader, customScalarAdapters)
          1 -> _twitterHandle = StringAdapter.fromJson(reader, customScalarAdapters)
          else -> break
        }
      }

      return JoinEventRaffleMutation.TwittersToFollow(
        twitterId = _twitterId!!,
        twitterHandle = _twitterHandle!!
      )
    }

    public override fun toJson(
      writer: JsonWriter,
      customScalarAdapters: CustomScalarAdapters,
      `value`: JoinEventRaffleMutation.TwittersToFollow,
    ): Unit {
      writer.name("twitterId")
      StringAdapter.toJson(writer, customScalarAdapters, value.twitterId)

      writer.name("twitterHandle")
      StringAdapter.toJson(writer, customScalarAdapters, value.twitterHandle)
    }
  }
}
