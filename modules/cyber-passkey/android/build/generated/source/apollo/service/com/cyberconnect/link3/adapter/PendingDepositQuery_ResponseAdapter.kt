//
// AUTO-GENERATED FILE. DO NOT MODIFY.
//
// This class was automatically generated by Apollo GraphQL version '3.8.2'.
//
package com.cyberconnect.link3.adapter

import com.apollographql.apollo3.api.Adapter
import com.apollographql.apollo3.api.BooleanAdapter
import com.apollographql.apollo3.api.CustomScalarAdapters
import com.apollographql.apollo3.api.IntAdapter
import com.apollographql.apollo3.api.NullableIntAdapter
import com.apollographql.apollo3.api.NullableStringAdapter
import com.apollographql.apollo3.api.StringAdapter
import com.apollographql.apollo3.api.json.JsonReader
import com.apollographql.apollo3.api.json.JsonWriter
import com.apollographql.apollo3.api.list
import com.apollographql.apollo3.api.nullable
import com.apollographql.apollo3.api.obj
import com.cyberconnect.link3.PendingDepositQuery
import com.cyberconnect.link3.type.CreditStatus
import com.cyberconnect.link3.type.adapter.CreditStatus_ResponseAdapter
import kotlin.Boolean
import kotlin.Int
import kotlin.String
import kotlin.Unit

public object PendingDepositQuery_ResponseAdapter {
  public object Data : Adapter<PendingDepositQuery.Data> {
    public val RESPONSE_NAMES: kotlin.collections.List<String> = listOf("me")

    public override fun fromJson(reader: JsonReader, customScalarAdapters: CustomScalarAdapters):
        PendingDepositQuery.Data {
      var _me: PendingDepositQuery.Me? = null

      while(true) {
        when (reader.selectName(RESPONSE_NAMES)) {
          0 -> _me = Me.obj().fromJson(reader, customScalarAdapters)
          else -> break
        }
      }

      return PendingDepositQuery.Data(
        me = _me!!
      )
    }

    public override fun toJson(
      writer: JsonWriter,
      customScalarAdapters: CustomScalarAdapters,
      `value`: PendingDepositQuery.Data,
    ): Unit {
      writer.name("me")
      Me.obj().toJson(writer, customScalarAdapters, value.me)
    }
  }

  public object Me : Adapter<PendingDepositQuery.Me> {
    public val RESPONSE_NAMES: kotlin.collections.List<String> = listOf("data")

    public override fun fromJson(reader: JsonReader, customScalarAdapters: CustomScalarAdapters):
        PendingDepositQuery.Me {
      var _data: PendingDepositQuery.Data1? = null

      while(true) {
        when (reader.selectName(RESPONSE_NAMES)) {
          0 -> _data = Data1.obj().nullable().fromJson(reader, customScalarAdapters)
          else -> break
        }
      }

      return PendingDepositQuery.Me(
        `data` = _data
      )
    }

    public override fun toJson(
      writer: JsonWriter,
      customScalarAdapters: CustomScalarAdapters,
      `value`: PendingDepositQuery.Me,
    ): Unit {
      writer.name("data")
      Data1.obj().nullable().toJson(writer, customScalarAdapters, value.`data`)
    }
  }

  public object Data1 : Adapter<PendingDepositQuery.Data1> {
    public val RESPONSE_NAMES: kotlin.collections.List<String> = listOf("creditHistories")

    public override fun fromJson(reader: JsonReader, customScalarAdapters: CustomScalarAdapters):
        PendingDepositQuery.Data1 {
      var _creditHistories: PendingDepositQuery.CreditHistories? = null

      while(true) {
        when (reader.selectName(RESPONSE_NAMES)) {
          0 -> _creditHistories = CreditHistories.obj().fromJson(reader, customScalarAdapters)
          else -> break
        }
      }

      return PendingDepositQuery.Data1(
        creditHistories = _creditHistories!!
      )
    }

    public override fun toJson(
      writer: JsonWriter,
      customScalarAdapters: CustomScalarAdapters,
      `value`: PendingDepositQuery.Data1,
    ): Unit {
      writer.name("creditHistories")
      CreditHistories.obj().toJson(writer, customScalarAdapters, value.creditHistories)
    }
  }

  public object CreditHistories : Adapter<PendingDepositQuery.CreditHistories> {
    public val RESPONSE_NAMES: kotlin.collections.List<String> = listOf("list")

    public override fun fromJson(reader: JsonReader, customScalarAdapters: CustomScalarAdapters):
        PendingDepositQuery.CreditHistories {
      var _list: kotlin.collections.List<PendingDepositQuery.List>? = null

      while(true) {
        when (reader.selectName(RESPONSE_NAMES)) {
          0 -> _list = List.obj().list().fromJson(reader, customScalarAdapters)
          else -> break
        }
      }

      return PendingDepositQuery.CreditHistories(
        list = _list!!
      )
    }

    public override fun toJson(
      writer: JsonWriter,
      customScalarAdapters: CustomScalarAdapters,
      `value`: PendingDepositQuery.CreditHistories,
    ): Unit {
      writer.name("list")
      List.obj().list().toJson(writer, customScalarAdapters, value.list)
    }
  }

  public object List : Adapter<PendingDepositQuery.List> {
    public val RESPONSE_NAMES: kotlin.collections.List<String> = listOf("status", "confirmed",
        "time", "chainId", "txHash", "value")

    public override fun fromJson(reader: JsonReader, customScalarAdapters: CustomScalarAdapters):
        PendingDepositQuery.List {
      var _status: CreditStatus? = null
      var _confirmed: Boolean? = null
      var _time: Int? = null
      var _chainId: Int? = null
      var _txHash: String? = null
      var _value: PendingDepositQuery.Value? = null

      while(true) {
        when (reader.selectName(RESPONSE_NAMES)) {
          0 -> _status = CreditStatus_ResponseAdapter.fromJson(reader, customScalarAdapters)
          1 -> _confirmed = BooleanAdapter.fromJson(reader, customScalarAdapters)
          2 -> _time = IntAdapter.fromJson(reader, customScalarAdapters)
          3 -> _chainId = NullableIntAdapter.fromJson(reader, customScalarAdapters)
          4 -> _txHash = NullableStringAdapter.fromJson(reader, customScalarAdapters)
          5 -> _value = Value.obj(true).fromJson(reader, customScalarAdapters)
          else -> break
        }
      }

      return PendingDepositQuery.List(
        status = _status!!,
        confirmed = _confirmed!!,
        time = _time!!,
        chainId = _chainId,
        txHash = _txHash,
        `value` = _value!!
      )
    }

    public override fun toJson(
      writer: JsonWriter,
      customScalarAdapters: CustomScalarAdapters,
      `value`: PendingDepositQuery.List,
    ): Unit {
      writer.name("status")
      CreditStatus_ResponseAdapter.toJson(writer, customScalarAdapters, value.status)

      writer.name("confirmed")
      BooleanAdapter.toJson(writer, customScalarAdapters, value.confirmed)

      writer.name("time")
      IntAdapter.toJson(writer, customScalarAdapters, value.time)

      writer.name("chainId")
      NullableIntAdapter.toJson(writer, customScalarAdapters, value.chainId)

      writer.name("txHash")
      NullableStringAdapter.toJson(writer, customScalarAdapters, value.txHash)

      writer.name("value")
      Value.obj(true).toJson(writer, customScalarAdapters, value.`value`)
    }
  }

  public object Value : Adapter<PendingDepositQuery.Value> {
    public val RESPONSE_NAMES: kotlin.collections.List<String> = listOf("__typename")

    public override fun fromJson(reader: JsonReader, customScalarAdapters: CustomScalarAdapters):
        PendingDepositQuery.Value {
      var __typename: String? = null

      while(true) {
        when (reader.selectName(RESPONSE_NAMES)) {
          0 -> __typename = StringAdapter.fromJson(reader, customScalarAdapters)
          else -> break
        }
      }

      reader.rewind()
      val _price = com.cyberconnect.link3.fragment.PriceImpl_ResponseAdapter.Price.fromJson(reader,
          customScalarAdapters)

      return PendingDepositQuery.Value(
        __typename = __typename!!,
        price = _price
      )
    }

    public override fun toJson(
      writer: JsonWriter,
      customScalarAdapters: CustomScalarAdapters,
      `value`: PendingDepositQuery.Value,
    ): Unit {
      writer.name("__typename")
      StringAdapter.toJson(writer, customScalarAdapters, value.__typename)

      com.cyberconnect.link3.fragment.PriceImpl_ResponseAdapter.Price.toJson(writer,
          customScalarAdapters, value.price)
    }
  }
}
