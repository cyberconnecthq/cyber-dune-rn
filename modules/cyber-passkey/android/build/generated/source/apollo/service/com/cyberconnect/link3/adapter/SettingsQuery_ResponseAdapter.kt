//
// AUTO-GENERATED FILE. DO NOT MODIFY.
//
// This class was automatically generated by Apollo GraphQL version '3.8.2'.
//
package com.cyberconnect.link3.adapter

import com.apollographql.apollo3.api.Adapter
import com.apollographql.apollo3.api.BooleanAdapter
import com.apollographql.apollo3.api.CustomScalarAdapters
import com.apollographql.apollo3.api.StringAdapter
import com.apollographql.apollo3.api.evaluate
import com.apollographql.apollo3.api.json.JsonReader
import com.apollographql.apollo3.api.json.JsonWriter
import com.apollographql.apollo3.api.nullable
import com.apollographql.apollo3.api.obj
import com.apollographql.apollo3.api.possibleTypes
import com.cyberconnect.link3.SettingsQuery
import com.cyberconnect.link3.type.ChatPriceFeedback
import com.cyberconnect.link3.type.MeResponse_Status
import com.cyberconnect.link3.type.adapter.ChatPriceFeedback_ResponseAdapter
import com.cyberconnect.link3.type.adapter.MeResponse_Status_ResponseAdapter
import kotlin.Boolean
import kotlin.String
import kotlin.Unit
import kotlin.collections.List

public object SettingsQuery_ResponseAdapter {
  public object Data : Adapter<SettingsQuery.Data> {
    public val RESPONSE_NAMES: List<String> = listOf("me")

    public override fun fromJson(reader: JsonReader, customScalarAdapters: CustomScalarAdapters):
        SettingsQuery.Data {
      var _me: SettingsQuery.Me? = null

      while(true) {
        when (reader.selectName(RESPONSE_NAMES)) {
          0 -> _me = Me.obj().fromJson(reader, customScalarAdapters)
          else -> break
        }
      }

      return SettingsQuery.Data(
        me = _me!!
      )
    }

    public override fun toJson(
      writer: JsonWriter,
      customScalarAdapters: CustomScalarAdapters,
      `value`: SettingsQuery.Data,
    ): Unit {
      writer.name("me")
      Me.obj().toJson(writer, customScalarAdapters, value.me)
    }
  }

  public object Me : Adapter<SettingsQuery.Me> {
    public val RESPONSE_NAMES: List<String> = listOf("status", "message", "data")

    public override fun fromJson(reader: JsonReader, customScalarAdapters: CustomScalarAdapters):
        SettingsQuery.Me {
      var _status: MeResponse_Status? = null
      var _message: String? = null
      var _data: SettingsQuery.Data1? = null

      while(true) {
        when (reader.selectName(RESPONSE_NAMES)) {
          0 -> _status = MeResponse_Status_ResponseAdapter.fromJson(reader, customScalarAdapters)
          1 -> _message = StringAdapter.fromJson(reader, customScalarAdapters)
          2 -> _data = Data1.obj().nullable().fromJson(reader, customScalarAdapters)
          else -> break
        }
      }

      return SettingsQuery.Me(
        status = _status!!,
        message = _message!!,
        `data` = _data
      )
    }

    public override fun toJson(
      writer: JsonWriter,
      customScalarAdapters: CustomScalarAdapters,
      `value`: SettingsQuery.Me,
    ): Unit {
      writer.name("status")
      MeResponse_Status_ResponseAdapter.toJson(writer, customScalarAdapters, value.status)

      writer.name("message")
      StringAdapter.toJson(writer, customScalarAdapters, value.message)

      writer.name("data")
      Data1.obj().nullable().toJson(writer, customScalarAdapters, value.`data`)
    }
  }

  public object Data1 : Adapter<SettingsQuery.Data1> {
    public val RESPONSE_NAMES: List<String> = listOf("id", "privateInfo", "priceFeedback",
        "profile")

    public override fun fromJson(reader: JsonReader, customScalarAdapters: CustomScalarAdapters):
        SettingsQuery.Data1 {
      var _id: String? = null
      var _privateInfo: SettingsQuery.PrivateInfo? = null
      var _priceFeedback: SettingsQuery.PriceFeedback? = null
      var _profile: SettingsQuery.Profile? = null

      while(true) {
        when (reader.selectName(RESPONSE_NAMES)) {
          0 -> _id = StringAdapter.fromJson(reader, customScalarAdapters)
          1 -> _privateInfo = PrivateInfo.obj().nullable().fromJson(reader, customScalarAdapters)
          2 -> _priceFeedback = PriceFeedback.obj().fromJson(reader, customScalarAdapters)
          3 -> _profile = Profile.obj(true).nullable().fromJson(reader, customScalarAdapters)
          else -> break
        }
      }

      return SettingsQuery.Data1(
        id = _id!!,
        privateInfo = _privateInfo,
        priceFeedback = _priceFeedback!!,
        profile = _profile
      )
    }

    public override fun toJson(
      writer: JsonWriter,
      customScalarAdapters: CustomScalarAdapters,
      `value`: SettingsQuery.Data1,
    ): Unit {
      writer.name("id")
      StringAdapter.toJson(writer, customScalarAdapters, value.id)

      writer.name("privateInfo")
      PrivateInfo.obj().nullable().toJson(writer, customScalarAdapters, value.privateInfo)

      writer.name("priceFeedback")
      PriceFeedback.obj().toJson(writer, customScalarAdapters, value.priceFeedback)

      writer.name("profile")
      Profile.obj(true).nullable().toJson(writer, customScalarAdapters, value.profile)
    }
  }

  public object PrivateInfo : Adapter<SettingsQuery.PrivateInfo> {
    public val RESPONSE_NAMES: List<String> = listOf("accessToken", "twitterId", "discordId",
        "email", "linkedinId", "linkedinInfo", "githubId", "telegram")

    public override fun fromJson(reader: JsonReader, customScalarAdapters: CustomScalarAdapters):
        SettingsQuery.PrivateInfo {
      var _accessToken: String? = null
      var _twitterId: String? = null
      var _discordId: String? = null
      var _email: String? = null
      var _linkedinId: String? = null
      var _linkedinInfo: SettingsQuery.LinkedinInfo? = null
      var _githubId: String? = null
      var _telegram: SettingsQuery.Telegram? = null

      while(true) {
        when (reader.selectName(RESPONSE_NAMES)) {
          0 -> _accessToken = StringAdapter.fromJson(reader, customScalarAdapters)
          1 -> _twitterId = StringAdapter.fromJson(reader, customScalarAdapters)
          2 -> _discordId = StringAdapter.fromJson(reader, customScalarAdapters)
          3 -> _email = StringAdapter.fromJson(reader, customScalarAdapters)
          4 -> _linkedinId = StringAdapter.fromJson(reader, customScalarAdapters)
          5 -> _linkedinInfo = LinkedinInfo.obj().fromJson(reader, customScalarAdapters)
          6 -> _githubId = StringAdapter.fromJson(reader, customScalarAdapters)
          7 -> _telegram = Telegram.obj().nullable().fromJson(reader, customScalarAdapters)
          else -> break
        }
      }

      return SettingsQuery.PrivateInfo(
        accessToken = _accessToken!!,
        twitterId = _twitterId!!,
        discordId = _discordId!!,
        email = _email!!,
        linkedinId = _linkedinId!!,
        linkedinInfo = _linkedinInfo!!,
        githubId = _githubId!!,
        telegram = _telegram
      )
    }

    public override fun toJson(
      writer: JsonWriter,
      customScalarAdapters: CustomScalarAdapters,
      `value`: SettingsQuery.PrivateInfo,
    ): Unit {
      writer.name("accessToken")
      StringAdapter.toJson(writer, customScalarAdapters, value.accessToken)

      writer.name("twitterId")
      StringAdapter.toJson(writer, customScalarAdapters, value.twitterId)

      writer.name("discordId")
      StringAdapter.toJson(writer, customScalarAdapters, value.discordId)

      writer.name("email")
      StringAdapter.toJson(writer, customScalarAdapters, value.email)

      writer.name("linkedinId")
      StringAdapter.toJson(writer, customScalarAdapters, value.linkedinId)

      writer.name("linkedinInfo")
      LinkedinInfo.obj().toJson(writer, customScalarAdapters, value.linkedinInfo)

      writer.name("githubId")
      StringAdapter.toJson(writer, customScalarAdapters, value.githubId)

      writer.name("telegram")
      Telegram.obj().nullable().toJson(writer, customScalarAdapters, value.telegram)
    }
  }

  public object LinkedinInfo : Adapter<SettingsQuery.LinkedinInfo> {
    public val RESPONSE_NAMES: List<String> = listOf("needRefresh")

    public override fun fromJson(reader: JsonReader, customScalarAdapters: CustomScalarAdapters):
        SettingsQuery.LinkedinInfo {
      var _needRefresh: Boolean? = null

      while(true) {
        when (reader.selectName(RESPONSE_NAMES)) {
          0 -> _needRefresh = BooleanAdapter.fromJson(reader, customScalarAdapters)
          else -> break
        }
      }

      return SettingsQuery.LinkedinInfo(
        needRefresh = _needRefresh!!
      )
    }

    public override fun toJson(
      writer: JsonWriter,
      customScalarAdapters: CustomScalarAdapters,
      `value`: SettingsQuery.LinkedinInfo,
    ): Unit {
      writer.name("needRefresh")
      BooleanAdapter.toJson(writer, customScalarAdapters, value.needRefresh)
    }
  }

  public object Telegram : Adapter<SettingsQuery.Telegram> {
    public val RESPONSE_NAMES: List<String> = listOf("telegramId", "username", "subscribed")

    public override fun fromJson(reader: JsonReader, customScalarAdapters: CustomScalarAdapters):
        SettingsQuery.Telegram {
      var _telegramId: String? = null
      var _username: String? = null
      var _subscribed: Boolean? = null

      while(true) {
        when (reader.selectName(RESPONSE_NAMES)) {
          0 -> _telegramId = StringAdapter.fromJson(reader, customScalarAdapters)
          1 -> _username = StringAdapter.fromJson(reader, customScalarAdapters)
          2 -> _subscribed = BooleanAdapter.fromJson(reader, customScalarAdapters)
          else -> break
        }
      }

      return SettingsQuery.Telegram(
        telegramId = _telegramId!!,
        username = _username!!,
        subscribed = _subscribed!!
      )
    }

    public override fun toJson(
      writer: JsonWriter,
      customScalarAdapters: CustomScalarAdapters,
      `value`: SettingsQuery.Telegram,
    ): Unit {
      writer.name("telegramId")
      StringAdapter.toJson(writer, customScalarAdapters, value.telegramId)

      writer.name("username")
      StringAdapter.toJson(writer, customScalarAdapters, value.username)

      writer.name("subscribed")
      BooleanAdapter.toJson(writer, customScalarAdapters, value.subscribed)
    }
  }

  public object PriceFeedback : Adapter<SettingsQuery.PriceFeedback> {
    public val RESPONSE_NAMES: List<String> = listOf("feedback")

    public override fun fromJson(reader: JsonReader, customScalarAdapters: CustomScalarAdapters):
        SettingsQuery.PriceFeedback {
      var _feedback: ChatPriceFeedback? = null

      while(true) {
        when (reader.selectName(RESPONSE_NAMES)) {
          0 -> _feedback = ChatPriceFeedback_ResponseAdapter.nullable().fromJson(reader,
              customScalarAdapters)
          else -> break
        }
      }

      return SettingsQuery.PriceFeedback(
        feedback = _feedback
      )
    }

    public override fun toJson(
      writer: JsonWriter,
      customScalarAdapters: CustomScalarAdapters,
      `value`: SettingsQuery.PriceFeedback,
    ): Unit {
      writer.name("feedback")
      ChatPriceFeedback_ResponseAdapter.nullable().toJson(writer, customScalarAdapters,
          value.feedback)
    }
  }

  public object Profile : Adapter<SettingsQuery.Profile> {
    public val RESPONSE_NAMES: List<String> = listOf("__typename")

    public override fun fromJson(reader: JsonReader, customScalarAdapters: CustomScalarAdapters):
        SettingsQuery.Profile {
      var __typename: String? = null

      while(true) {
        when (reader.selectName(RESPONSE_NAMES)) {
          0 -> __typename = StringAdapter.fromJson(reader, customScalarAdapters)
          else -> break
        }
      }

      check(__typename != null) {
        "__typename was not found"
      }

      var _onPerProfile: SettingsQuery.OnPerProfile? = null
      if (possibleTypes("PerProfile").evaluate(customScalarAdapters.adapterContext.variables(), __typename, customScalarAdapters.adapterContext, null)) {
        reader.rewind()
        _onPerProfile = com.cyberconnect.link3.adapter.SettingsQuery_ResponseAdapter.OnPerProfile.fromJson(reader,
            customScalarAdapters)
      }

      return SettingsQuery.Profile(
        __typename = __typename,
        onPerProfile = _onPerProfile
      )
    }

    public override fun toJson(
      writer: JsonWriter,
      customScalarAdapters: CustomScalarAdapters,
      `value`: SettingsQuery.Profile,
    ): Unit {
      writer.name("__typename")
      StringAdapter.toJson(writer, customScalarAdapters, value.__typename)

      if (value.onPerProfile != null) {
        com.cyberconnect.link3.adapter.SettingsQuery_ResponseAdapter.OnPerProfile.toJson(writer,
            customScalarAdapters, value.onPerProfile)
      }
    }
  }

  public object OnPerProfile : Adapter<SettingsQuery.OnPerProfile> {
    public val RESPONSE_NAMES: List<String> = listOf("isVerified")

    public override fun fromJson(reader: JsonReader, customScalarAdapters: CustomScalarAdapters):
        SettingsQuery.OnPerProfile {
      var _isVerified: Boolean? = null

      while(true) {
        when (reader.selectName(RESPONSE_NAMES)) {
          0 -> _isVerified = BooleanAdapter.fromJson(reader, customScalarAdapters)
          else -> break
        }
      }

      return SettingsQuery.OnPerProfile(
        isVerified = _isVerified!!
      )
    }

    public override fun toJson(
      writer: JsonWriter,
      customScalarAdapters: CustomScalarAdapters,
      `value`: SettingsQuery.OnPerProfile,
    ): Unit {
      writer.name("isVerified")
      BooleanAdapter.toJson(writer, customScalarAdapters, value.isVerified)
    }
  }
}
