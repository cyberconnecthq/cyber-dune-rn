//
// AUTO-GENERATED FILE. DO NOT MODIFY.
//
// This class was automatically generated by Apollo GraphQL version '3.8.2'.
//
package com.cyberconnect.link3.adapter

import com.apollographql.apollo3.api.Adapter
import com.apollographql.apollo3.api.BooleanAdapter
import com.apollographql.apollo3.api.CustomScalarAdapters
import com.apollographql.apollo3.api.IntAdapter
import com.apollographql.apollo3.api.NullableIntAdapter
import com.apollographql.apollo3.api.StringAdapter
import com.apollographql.apollo3.api.json.JsonReader
import com.apollographql.apollo3.api.json.JsonWriter
import com.apollographql.apollo3.api.list
import com.apollographql.apollo3.api.nullable
import com.apollographql.apollo3.api.obj
import com.cyberconnect.link3.GetClaimW3stStatusQuery
import com.cyberconnect.link3.type.W3STRequirementType
import com.cyberconnect.link3.type.adapter.W3STRequirementType_ResponseAdapter
import kotlin.Boolean
import kotlin.Int
import kotlin.String
import kotlin.Unit
import kotlin.collections.List

public object GetClaimW3stStatusQuery_ResponseAdapter {
  public object Data : Adapter<GetClaimW3stStatusQuery.Data> {
    public val RESPONSE_NAMES: List<String> = listOf("event")

    public override fun fromJson(reader: JsonReader, customScalarAdapters: CustomScalarAdapters):
        GetClaimW3stStatusQuery.Data {
      var _event: GetClaimW3stStatusQuery.Event? = null

      while(true) {
        when (reader.selectName(RESPONSE_NAMES)) {
          0 -> _event = Event.obj().nullable().fromJson(reader, customScalarAdapters)
          else -> break
        }
      }

      return GetClaimW3stStatusQuery.Data(
        event = _event
      )
    }

    public override fun toJson(
      writer: JsonWriter,
      customScalarAdapters: CustomScalarAdapters,
      `value`: GetClaimW3stStatusQuery.Data,
    ): Unit {
      writer.name("event")
      Event.obj().nullable().toJson(writer, customScalarAdapters, value.event)
    }
  }

  public object Event : Adapter<GetClaimW3stStatusQuery.Event> {
    public val RESPONSE_NAMES: List<String> = listOf("organizer", "w3st")

    public override fun fromJson(reader: JsonReader, customScalarAdapters: CustomScalarAdapters):
        GetClaimW3stStatusQuery.Event {
      var _organizer: GetClaimW3stStatusQuery.Organizer? = null
      var _w3st: GetClaimW3stStatusQuery.W3st? = null

      while(true) {
        when (reader.selectName(RESPONSE_NAMES)) {
          0 -> _organizer = Organizer.obj(true).fromJson(reader, customScalarAdapters)
          1 -> _w3st = W3st.obj().nullable().fromJson(reader, customScalarAdapters)
          else -> break
        }
      }

      return GetClaimW3stStatusQuery.Event(
        organizer = _organizer!!,
        w3st = _w3st
      )
    }

    public override fun toJson(
      writer: JsonWriter,
      customScalarAdapters: CustomScalarAdapters,
      `value`: GetClaimW3stStatusQuery.Event,
    ): Unit {
      writer.name("organizer")
      Organizer.obj(true).toJson(writer, customScalarAdapters, value.organizer)

      writer.name("w3st")
      W3st.obj().nullable().toJson(writer, customScalarAdapters, value.w3st)
    }
  }

  public object Organizer : Adapter<GetClaimW3stStatusQuery.Organizer> {
    public val RESPONSE_NAMES: List<String> = listOf("__typename")

    public override fun fromJson(reader: JsonReader, customScalarAdapters: CustomScalarAdapters):
        GetClaimW3stStatusQuery.Organizer {
      var __typename: String? = null

      while(true) {
        when (reader.selectName(RESPONSE_NAMES)) {
          0 -> __typename = StringAdapter.fromJson(reader, customScalarAdapters)
          else -> break
        }
      }

      reader.rewind()
      val _organizer = com.cyberconnect.link3.fragment.OrganizerImpl_ResponseAdapter.Organizer.fromJson(reader,
          customScalarAdapters)

      return GetClaimW3stStatusQuery.Organizer(
        __typename = __typename!!,
        organizer = _organizer
      )
    }

    public override fun toJson(
      writer: JsonWriter,
      customScalarAdapters: CustomScalarAdapters,
      `value`: GetClaimW3stStatusQuery.Organizer,
    ): Unit {
      writer.name("__typename")
      StringAdapter.toJson(writer, customScalarAdapters, value.__typename)

      com.cyberconnect.link3.fragment.OrganizerImpl_ResponseAdapter.Organizer.toJson(writer,
          customScalarAdapters, value.organizer)
    }
  }

  public object W3st : Adapter<GetClaimW3stStatusQuery.W3st> {
    public val RESPONSE_NAMES: List<String> = listOf("eligible")

    public override fun fromJson(reader: JsonReader, customScalarAdapters: CustomScalarAdapters):
        GetClaimW3stStatusQuery.W3st {
      var _eligible: GetClaimW3stStatusQuery.Eligible? = null

      while(true) {
        when (reader.selectName(RESPONSE_NAMES)) {
          0 -> _eligible = Eligible.obj().nullable().fromJson(reader, customScalarAdapters)
          else -> break
        }
      }

      return GetClaimW3stStatusQuery.W3st(
        eligible = _eligible
      )
    }

    public override fun toJson(
      writer: JsonWriter,
      customScalarAdapters: CustomScalarAdapters,
      `value`: GetClaimW3stStatusQuery.W3st,
    ): Unit {
      writer.name("eligible")
      Eligible.obj().nullable().toJson(writer, customScalarAdapters, value.eligible)
    }
  }

  public object Eligible : Adapter<GetClaimW3stStatusQuery.Eligible> {
    public val RESPONSE_NAMES: List<String> = listOf("unclaimed", "claiming", "claimed", "stayTime",
        "readyToClaim", "claimedByOther", "firstClaim", "requirements")

    public override fun fromJson(reader: JsonReader, customScalarAdapters: CustomScalarAdapters):
        GetClaimW3stStatusQuery.Eligible {
      var _unclaimed: Int? = null
      var _claiming: Int? = null
      var _claimed: Int? = null
      var _stayTime: Int? = null
      var _readyToClaim: Boolean? = null
      var _claimedByOther: Boolean? = null
      var _firstClaim: Boolean? = null
      var _requirements: List<GetClaimW3stStatusQuery.Requirement>? = null

      while(true) {
        when (reader.selectName(RESPONSE_NAMES)) {
          0 -> _unclaimed = IntAdapter.fromJson(reader, customScalarAdapters)
          1 -> _claiming = IntAdapter.fromJson(reader, customScalarAdapters)
          2 -> _claimed = IntAdapter.fromJson(reader, customScalarAdapters)
          3 -> _stayTime = IntAdapter.fromJson(reader, customScalarAdapters)
          4 -> _readyToClaim = BooleanAdapter.fromJson(reader, customScalarAdapters)
          5 -> _claimedByOther = BooleanAdapter.fromJson(reader, customScalarAdapters)
          6 -> _firstClaim = BooleanAdapter.fromJson(reader, customScalarAdapters)
          7 -> _requirements = Requirement.obj().list().fromJson(reader, customScalarAdapters)
          else -> break
        }
      }

      return GetClaimW3stStatusQuery.Eligible(
        unclaimed = _unclaimed!!,
        claiming = _claiming!!,
        claimed = _claimed!!,
        stayTime = _stayTime!!,
        readyToClaim = _readyToClaim!!,
        claimedByOther = _claimedByOther!!,
        firstClaim = _firstClaim!!,
        requirements = _requirements!!
      )
    }

    public override fun toJson(
      writer: JsonWriter,
      customScalarAdapters: CustomScalarAdapters,
      `value`: GetClaimW3stStatusQuery.Eligible,
    ): Unit {
      writer.name("unclaimed")
      IntAdapter.toJson(writer, customScalarAdapters, value.unclaimed)

      writer.name("claiming")
      IntAdapter.toJson(writer, customScalarAdapters, value.claiming)

      writer.name("claimed")
      IntAdapter.toJson(writer, customScalarAdapters, value.claimed)

      writer.name("stayTime")
      IntAdapter.toJson(writer, customScalarAdapters, value.stayTime)

      writer.name("readyToClaim")
      BooleanAdapter.toJson(writer, customScalarAdapters, value.readyToClaim)

      writer.name("claimedByOther")
      BooleanAdapter.toJson(writer, customScalarAdapters, value.claimedByOther)

      writer.name("firstClaim")
      BooleanAdapter.toJson(writer, customScalarAdapters, value.firstClaim)

      writer.name("requirements")
      Requirement.obj().list().toJson(writer, customScalarAdapters, value.requirements)
    }
  }

  public object Requirement : Adapter<GetClaimW3stStatusQuery.Requirement> {
    public val RESPONSE_NAMES: List<String> = listOf("eligible", "requirement")

    public override fun fromJson(reader: JsonReader, customScalarAdapters: CustomScalarAdapters):
        GetClaimW3stStatusQuery.Requirement {
      var _eligible: Boolean? = null
      var _requirement: GetClaimW3stStatusQuery.Requirement1? = null

      while(true) {
        when (reader.selectName(RESPONSE_NAMES)) {
          0 -> _eligible = BooleanAdapter.fromJson(reader, customScalarAdapters)
          1 -> _requirement = Requirement1.obj().fromJson(reader, customScalarAdapters)
          else -> break
        }
      }

      return GetClaimW3stStatusQuery.Requirement(
        eligible = _eligible!!,
        requirement = _requirement!!
      )
    }

    public override fun toJson(
      writer: JsonWriter,
      customScalarAdapters: CustomScalarAdapters,
      `value`: GetClaimW3stStatusQuery.Requirement,
    ): Unit {
      writer.name("eligible")
      BooleanAdapter.toJson(writer, customScalarAdapters, value.eligible)

      writer.name("requirement")
      Requirement1.obj().toJson(writer, customScalarAdapters, value.requirement)
    }
  }

  public object Requirement1 : Adapter<GetClaimW3stStatusQuery.Requirement1> {
    public val RESPONSE_NAMES: List<String> = listOf("type", "value")

    public override fun fromJson(reader: JsonReader, customScalarAdapters: CustomScalarAdapters):
        GetClaimW3stStatusQuery.Requirement1 {
      var _type: W3STRequirementType? = null
      var _value: Int? = null

      while(true) {
        when (reader.selectName(RESPONSE_NAMES)) {
          0 -> _type = W3STRequirementType_ResponseAdapter.fromJson(reader, customScalarAdapters)
          1 -> _value = NullableIntAdapter.fromJson(reader, customScalarAdapters)
          else -> break
        }
      }

      return GetClaimW3stStatusQuery.Requirement1(
        type = _type!!,
        `value` = _value
      )
    }

    public override fun toJson(
      writer: JsonWriter,
      customScalarAdapters: CustomScalarAdapters,
      `value`: GetClaimW3stStatusQuery.Requirement1,
    ): Unit {
      writer.name("type")
      W3STRequirementType_ResponseAdapter.toJson(writer, customScalarAdapters, value.type)

      writer.name("value")
      NullableIntAdapter.toJson(writer, customScalarAdapters, value.`value`)
    }
  }
}
