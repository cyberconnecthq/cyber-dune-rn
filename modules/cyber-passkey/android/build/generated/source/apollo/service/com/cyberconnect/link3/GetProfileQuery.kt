//
// AUTO-GENERATED FILE. DO NOT MODIFY.
//
// This class was automatically generated by Apollo GraphQL version '3.8.2'.
//
package com.cyberconnect.link3

import com.apollographql.apollo3.annotations.ApolloAdaptableWith
import com.apollographql.apollo3.api.Adapter
import com.apollographql.apollo3.api.CompiledField
import com.apollographql.apollo3.api.CustomScalarAdapters
import com.apollographql.apollo3.api.Optional
import com.apollographql.apollo3.api.Query
import com.apollographql.apollo3.api.json.JsonWriter
import com.apollographql.apollo3.api.obj
import com.cyberconnect.link3.adapter.GetProfileQuery_ResponseAdapter
import com.cyberconnect.link3.adapter.GetProfileQuery_VariablesAdapter
import com.cyberconnect.link3.selections.GetProfileQuerySelections
import com.cyberconnect.link3.type.ProfileResponse_Status
import kotlin.String
import kotlin.Unit

public data class GetProfileQuery(
  public val id: Optional<String?> = Optional.Absent,
  public val handle: Optional<String?> = Optional.Absent,
) : Query<GetProfileQuery.Data> {
  public override fun id(): String = OPERATION_ID

  public override fun document(): String = OPERATION_DOCUMENT

  public override fun name(): String = OPERATION_NAME

  public override fun serializeVariables(writer: JsonWriter,
      customScalarAdapters: CustomScalarAdapters): Unit {
    GetProfileQuery_VariablesAdapter.toJson(writer, customScalarAdapters, this)
  }

  public override fun adapter(): Adapter<Data> = GetProfileQuery_ResponseAdapter.Data.obj()

  public override fun rootField(): CompiledField = CompiledField.Builder(
    name = "data",
    type = com.cyberconnect.link3.type.Query.type
  )
  .selections(selections = GetProfileQuerySelections.__root)
  .build()

  @ApolloAdaptableWith(GetProfileQuery_ResponseAdapter.Data::class)
  public data class Data(
    /**
     * Query a profile by a identifier. Choose one of the two parameters `id` and `handle`. If both
     * are filled in, subject to `id`.
     */
    public val profile: Profile,
  ) : Query.Data

  public data class Profile(
    public val status: ProfileResponse_Status,
    public val message: String,
    public val `data`: Data1?,
  )

  public data class Data1(
    public val __typename: String,
    /**
     * Synthetic field for 'Profile'
     */
    public val profile: com.cyberconnect.link3.fragment.Profile,
  )

  public companion object {
    public const val OPERATION_ID: String =
        "a2899eb7ebad39699e71351c2f1f1a8dbef8068eb042ac6d43c0e1754e9303ee"

    /**
     * The minimized GraphQL document being sent to the server to save a few bytes.
     * The un-minimized version is:
     *
     * query getProfile($id: ID, $handle: String) {
     *   profile(id: $id, handle: $handle) {
     *     status
     *     message
     *     data {
     *       __typename
     *       ...Profile
     *     }
     *   }
     * }
     *
     * fragment OrganizationInProfile on Organization {
     *   id
     *   twitterId
     *   verification
     *   currentAccess
     *   followersCount
     *   reviewing {
     *     handle
     *   }
     *   lightInfo {
     *     attestation {
     *       status
     *       uid
     *       type
     *     }
     *   }
     * }
     *
     * fragment OrgProfile on OrgProfile {
     *   handle
     *   bio
     *   cmcTokenId
     *   profilePicture
     *   backgroundPicture
     *   sector
     *   networks
     *   displayName
     *   isFollowing
     *   type
     *   organization {
     *     __typename
     *     ...OrganizationInProfile
     *   }
     * }
     *
     * fragment NFT on NFT {
     *   name
     *   contract
     *   tokenId
     *   imageUrl
     *   ercType
     *   owner
     * }
     *
     * fragment PersonalProfile on PerProfile {
     *   bio
     *   reputation {
     *     total
     *   }
     *   owner {
     *     id
     *     lightInfo {
     *       attestation {
     *         status
     *         uid
     *         type
     *       }
     *       remark
     *     }
     *   }
     *   avatarFrameTokenId
     *   connectStatus
     *   connectionsCount
     *   isVerified
     *   connections {
     *     list {
     *       __typename
     *       handle
     *       id
     *       ... on PerProfile {
     *         profilePicture {
     *           picture
     *         }
     *         displayName {
     *           displayName
     *         }
     *       }
     *     }
     *   }
     *   mutualConnections {
     *     list {
     *       __typename
     *       handle
     *       id
     *       ... on PerProfile {
     *         profilePicture {
     *           picture
     *         }
     *         displayName {
     *           displayName
     *         }
     *       }
     *     }
     *   }
     *   headline {
     *     twitterId
     *     twitterHandle
     *     displayName
     *     avatar
     *     title
     *     description
     *     headlineType
     *     followersCount
     *     profileId
     *   }
     *   identities {
     *     headline {
     *       twitterId
     *       twitterHandle
     *       displayName
     *       avatar
     *       title
     *       description
     *       headlineType
     *       followersCount
     *     }
     *     attestation {
     *       uid
     *       status
     *       type
     *     }
     *   }
     *   isAdmin
     *   isFollowing
     *   region
     *   languages
     *   personaldisplayName: displayName {
     *     type
     *     displayName
     *   }
     *   personalProfilePicture: profilePicture {
     *     picture
     *     type
     *     nfts {
     *       __typename
     *       ...NFT
     *     }
     *   }
     *   personalBackgroundPicture: backgroundPicture {
     *     picture
     *     type
     *     nfts {
     *       __typename
     *       ...NFT
     *     }
     *   }
     * }
     *
     * fragment LinkBlock on LinkBlock {
     *   links {
     *     title
     *     link
     *   }
     * }
     *
     * fragment SuperLinkBlock on SuperLinkBlock {
     *   superLinks {
     *     type
     *     title
     *     link
     *     description
     *     imageUrl
     *   }
     * }
     *
     * fragment TwitterBlock on TwitterBlock {
     *   avatarShape
     *   layout
     *   twitters {
     *     twitterId
     *     twitterHandle
     *     title
     *     displayName
     *     avatar
     *     description
     *     profileId
     *   }
     * }
     *
     * fragment BlockNFTFragment on NFT {
     *   name
     *   contract
     *   tokenId
     *   imageUrl
     *   ercType
     *   owner
     * }
     *
     * fragment NFTBlock on NFTBlock {
     *   nfts {
     *     __typename
     *     ...BlockNFTFragment
     *   }
     * }
     *
     * fragment CredentialBlock on CredentialBlock {
     *   galaxyCreds {
     *     id
     *     name
     *   }
     *   poaps {
     *     id
     *     imageUrl
     *   }
     * }
     *
     * fragment W3STBlock on W3STBlock {
     *   tokenUris
     * }
     *
     * fragment EventBlock on EventBlock {
     *   events {
     *     id
     *     status
     *     timezone
     *     lightInfo {
     *       hasRaffle
     *       hasW3ST
     *     }
     *     title
     *     startTimestamp
     *   }
     * }
     *
     * fragment NFTCollectionBlock on NFTCollectionBlock {
     *   slugs
     * }
     *
     * fragment SnapshotBlock on SnapshotBlock {
     *   spaceId
     * }
     *
     * fragment PostBlock on PostBlock {
     *   postPage(first: 6) {
     *     list {
     *       id
     *       title
     *       description
     *       publishedAt
     *       readTime
     *       cover
     *       essence {
     *         totalCollected
     *         totalSupply
     *       }
     *     }
     *   }
     * }
     *
     * fragment SkillBlock on SkillBlock {
     *   skills {
     *     id
     *     name
     *     endorsed
     *     endorserCount
     *   }
     * }
     *
     * fragment WorkExperienceBlock on WorkExperienceBlock {
     *   workExperiences {
     *     id
     *     startDate
     *     endDate
     *     description
     *     organization {
     *       twitterId
     *       twitterHandle
     *       displayName
     *       avatar
     *       title
     *       description
     *       profileId
     *       followersCount
     *       headlineType
     *     }
     *   }
     * }
     *
     * fragment EducationBlock on EducationBlock {
     *   educations {
     *     id
     *     startDate
     *     endDate
     *     description
     *     degree
     *     fieldOfStudy
     *     school {
     *       twitterId
     *       twitterHandle
     *       displayName
     *       avatar
     *       title
     *       description
     *       profileId
     *       followersCount
     *       headlineType
     *     }
     *   }
     * }
     *
     * fragment RecommendationBlock on RecommendationBlock {
     *   received {
     *     user {
     *       id
     *       lightInfo {
     *         handle
     *         avatar
     *         displayName
     *         formattedAddress
     *         attestation {
     *           uid
     *         }
     *       }
     *       profile {
     *         __typename
     *         id
     *         ... on PerProfile {
     *           headline {
     *             twitterId
     *             twitterHandle
     *             displayName
     *             avatar
     *             title
     *             profileId
     *           }
     *           isVerified
     *         }
     *       }
     *     }
     *     content
     *     hidden
     *   }
     *   given {
     *     user {
     *       id
     *       lightInfo {
     *         handle
     *         avatar
     *         displayName
     *         formattedAddress
     *         attestation {
     *           uid
     *         }
     *       }
     *       profile {
     *         __typename
     *         id
     *         ... on PerProfile {
     *           headline {
     *             twitterId
     *             twitterHandle
     *             displayName
     *             avatar
     *             title
     *             profileId
     *           }
     *           isVerified
     *         }
     *       }
     *     }
     *     content
     *     hidden
     *   }
     * }
     *
     * fragment ContactBlock on ContactBlock {
     *   contacts {
     *     contactType
     *     name
     *     hidden
     *   }
     * }
     *
     * fragment Block on Block {
     *   __typename
     *   id
     *   profileId
     *   type
     *   displayName
     *   index
     *   isPlaceHolder
     *   visibility
     *   ...LinkBlock
     *   ...SuperLinkBlock
     *   ...TwitterBlock
     *   ...NFTBlock
     *   ...CredentialBlock
     *   ...W3STBlock
     *   ...EventBlock
     *   ...NFTCollectionBlock
     *   ...SnapshotBlock
     *   ...PostBlock
     *   ...SkillBlock
     *   ...WorkExperienceBlock
     *   ...EducationBlock
     *   ...RecommendationBlock
     *   ...ContactBlock
     * }
     *
     * fragment Profile on Profile {
     *   __typename
     *   id
     *   handle
     *   type
     *   ...OrgProfile
     *   ...PersonalProfile
     *   blocks {
     *     __typename
     *     ...Block
     *   }
     * }
     */
    public val OPERATION_DOCUMENT: String
      get() =
          "query getProfile(${'$'}id: ID, ${'$'}handle: String) { profile(id: ${'$'}id, handle: ${'$'}handle) { status message data { __typename ...Profile } } }  fragment OrganizationInProfile on Organization { id twitterId verification currentAccess followersCount reviewing { handle } lightInfo { attestation { status uid type } } }  fragment OrgProfile on OrgProfile { handle bio cmcTokenId profilePicture backgroundPicture sector networks displayName isFollowing type organization { __typename ...OrganizationInProfile } }  fragment NFT on NFT { name contract tokenId imageUrl ercType owner }  fragment PersonalProfile on PerProfile { bio reputation { total } owner { id lightInfo { attestation { status uid type } remark } } avatarFrameTokenId connectStatus connectionsCount isVerified connections { list { __typename handle id ... on PerProfile { profilePicture { picture } displayName { displayName } } } } mutualConnections { list { __typename handle id ... on PerProfile { profilePicture { picture } displayName { displayName } } } } headline { twitterId twitterHandle displayName avatar title description headlineType followersCount profileId } identities { headline { twitterId twitterHandle displayName avatar title description headlineType followersCount } attestation { uid status type } } isAdmin isFollowing region languages personaldisplayName: displayName { type displayName } personalProfilePicture: profilePicture { picture type nfts { __typename ...NFT } } personalBackgroundPicture: backgroundPicture { picture type nfts { __typename ...NFT } } }  fragment LinkBlock on LinkBlock { links { title link } }  fragment SuperLinkBlock on SuperLinkBlock { superLinks { type title link description imageUrl } }  fragment TwitterBlock on TwitterBlock { avatarShape layout twitters { twitterId twitterHandle title displayName avatar description profileId } }  fragment BlockNFTFragment on NFT { name contract tokenId imageUrl ercType owner }  fragment NFTBlock on NFTBlock { nfts { __typename ...BlockNFTFragment } }  fragment CredentialBlock on CredentialBlock { galaxyCreds { id name } poaps { id imageUrl } }  fragment W3STBlock on W3STBlock { tokenUris }  fragment EventBlock on EventBlock { events { id status timezone lightInfo { hasRaffle hasW3ST } title startTimestamp } }  fragment NFTCollectionBlock on NFTCollectionBlock { slugs }  fragment SnapshotBlock on SnapshotBlock { spaceId }  fragment PostBlock on PostBlock { postPage(first: 6) { list { id title description publishedAt readTime cover essence { totalCollected totalSupply } } } }  fragment SkillBlock on SkillBlock { skills { id name endorsed endorserCount } }  fragment WorkExperienceBlock on WorkExperienceBlock { workExperiences { id startDate endDate description organization { twitterId twitterHandle displayName avatar title description profileId followersCount headlineType } } }  fragment EducationBlock on EducationBlock { educations { id startDate endDate description degree fieldOfStudy school { twitterId twitterHandle displayName avatar title description profileId followersCount headlineType } } }  fragment RecommendationBlock on RecommendationBlock { received { user { id lightInfo { handle avatar displayName formattedAddress attestation { uid } } profile { __typename id ... on PerProfile { headline { twitterId twitterHandle displayName avatar title profileId } isVerified } } } content hidden } given { user { id lightInfo { handle avatar displayName formattedAddress attestation { uid } } profile { __typename id ... on PerProfile { headline { twitterId twitterHandle displayName avatar title profileId } isVerified } } } content hidden } }  fragment ContactBlock on ContactBlock { contacts { contactType name hidden } }  fragment Block on Block { __typename id profileId type displayName index isPlaceHolder visibility ...LinkBlock ...SuperLinkBlock ...TwitterBlock ...NFTBlock ...CredentialBlock ...W3STBlock ...EventBlock ...NFTCollectionBlock ...SnapshotBlock ...PostBlock ...SkillBlock ...WorkExperienceBlock ...EducationBlock ...RecommendationBlock ...ContactBlock }  fragment Profile on Profile { __typename id handle type ...OrgProfile ...PersonalProfile blocks { __typename ...Block } }"

    public const val OPERATION_NAME: String = "getProfile"
  }
}
