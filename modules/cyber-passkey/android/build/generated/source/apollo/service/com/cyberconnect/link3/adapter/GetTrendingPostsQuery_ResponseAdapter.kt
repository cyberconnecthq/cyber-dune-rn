//
// AUTO-GENERATED FILE. DO NOT MODIFY.
//
// This class was automatically generated by Apollo GraphQL version '3.8.2'.
//
package com.cyberconnect.link3.adapter

import com.apollographql.apollo3.api.Adapter
import com.apollographql.apollo3.api.AnyAdapter
import com.apollographql.apollo3.api.BooleanAdapter
import com.apollographql.apollo3.api.CustomScalarAdapters
import com.apollographql.apollo3.api.IntAdapter
import com.apollographql.apollo3.api.StringAdapter
import com.apollographql.apollo3.api.json.JsonReader
import com.apollographql.apollo3.api.json.JsonWriter
import com.apollographql.apollo3.api.list
import com.apollographql.apollo3.api.nullable
import com.apollographql.apollo3.api.obj
import com.cyberconnect.link3.GetTrendingPostsQuery
import kotlin.Any
import kotlin.Boolean
import kotlin.Int
import kotlin.String
import kotlin.Unit

public object GetTrendingPostsQuery_ResponseAdapter {
  public object Data : Adapter<GetTrendingPostsQuery.Data> {
    public val RESPONSE_NAMES: kotlin.collections.List<String> = listOf("trendingPosts")

    public override fun fromJson(reader: JsonReader, customScalarAdapters: CustomScalarAdapters):
        GetTrendingPostsQuery.Data {
      var _trendingPosts: GetTrendingPostsQuery.TrendingPosts? = null

      while(true) {
        when (reader.selectName(RESPONSE_NAMES)) {
          0 -> _trendingPosts = TrendingPosts.obj().fromJson(reader, customScalarAdapters)
          else -> break
        }
      }

      return GetTrendingPostsQuery.Data(
        trendingPosts = _trendingPosts!!
      )
    }

    public override fun toJson(
      writer: JsonWriter,
      customScalarAdapters: CustomScalarAdapters,
      `value`: GetTrendingPostsQuery.Data,
    ): Unit {
      writer.name("trendingPosts")
      TrendingPosts.obj().toJson(writer, customScalarAdapters, value.trendingPosts)
    }
  }

  public object TrendingPosts : Adapter<GetTrendingPostsQuery.TrendingPosts> {
    public val RESPONSE_NAMES: kotlin.collections.List<String> = listOf("list", "pageInfo")

    public override fun fromJson(reader: JsonReader, customScalarAdapters: CustomScalarAdapters):
        GetTrendingPostsQuery.TrendingPosts {
      var _list: kotlin.collections.List<GetTrendingPostsQuery.List>? = null
      var _pageInfo: GetTrendingPostsQuery.PageInfo? = null

      while(true) {
        when (reader.selectName(RESPONSE_NAMES)) {
          0 -> _list = List.obj().list().fromJson(reader, customScalarAdapters)
          1 -> _pageInfo = PageInfo.obj().fromJson(reader, customScalarAdapters)
          else -> break
        }
      }

      return GetTrendingPostsQuery.TrendingPosts(
        list = _list!!,
        pageInfo = _pageInfo!!
      )
    }

    public override fun toJson(
      writer: JsonWriter,
      customScalarAdapters: CustomScalarAdapters,
      `value`: GetTrendingPostsQuery.TrendingPosts,
    ): Unit {
      writer.name("list")
      List.obj().list().toJson(writer, customScalarAdapters, value.list)

      writer.name("pageInfo")
      PageInfo.obj().toJson(writer, customScalarAdapters, value.pageInfo)
    }
  }

  public object List : Adapter<GetTrendingPostsQuery.List> {
    public val RESPONSE_NAMES: kotlin.collections.List<String> = listOf("id", "title", "cover",
        "description", "viewCount", "publishedAt", "likeCount", "readTime", "essence",
        "likedStatus", "profile")

    public override fun fromJson(reader: JsonReader, customScalarAdapters: CustomScalarAdapters):
        GetTrendingPostsQuery.List {
      var _id: String? = null
      var _title: String? = null
      var _cover: Any? = null
      var _description: String? = null
      var _viewCount: Int? = null
      var _publishedAt: Any? = null
      var _likeCount: Int? = null
      var _readTime: Int? = null
      var _essence: GetTrendingPostsQuery.Essence? = null
      var _likedStatus: GetTrendingPostsQuery.LikedStatus? = null
      var _profile: GetTrendingPostsQuery.Profile? = null

      while(true) {
        when (reader.selectName(RESPONSE_NAMES)) {
          0 -> _id = StringAdapter.fromJson(reader, customScalarAdapters)
          1 -> _title = StringAdapter.fromJson(reader, customScalarAdapters)
          2 -> _cover = AnyAdapter.fromJson(reader, customScalarAdapters)
          3 -> _description = StringAdapter.fromJson(reader, customScalarAdapters)
          4 -> _viewCount = IntAdapter.fromJson(reader, customScalarAdapters)
          5 -> _publishedAt = AnyAdapter.fromJson(reader, customScalarAdapters)
          6 -> _likeCount = IntAdapter.fromJson(reader, customScalarAdapters)
          7 -> _readTime = IntAdapter.fromJson(reader, customScalarAdapters)
          8 -> _essence = Essence.obj().nullable().fromJson(reader, customScalarAdapters)
          9 -> _likedStatus = LikedStatus.obj().fromJson(reader, customScalarAdapters)
          10 -> _profile = Profile.obj(true).fromJson(reader, customScalarAdapters)
          else -> break
        }
      }

      return GetTrendingPostsQuery.List(
        id = _id!!,
        title = _title!!,
        cover = _cover!!,
        description = _description!!,
        viewCount = _viewCount!!,
        publishedAt = _publishedAt!!,
        likeCount = _likeCount!!,
        readTime = _readTime!!,
        essence = _essence,
        likedStatus = _likedStatus!!,
        profile = _profile!!
      )
    }

    public override fun toJson(
      writer: JsonWriter,
      customScalarAdapters: CustomScalarAdapters,
      `value`: GetTrendingPostsQuery.List,
    ): Unit {
      writer.name("id")
      StringAdapter.toJson(writer, customScalarAdapters, value.id)

      writer.name("title")
      StringAdapter.toJson(writer, customScalarAdapters, value.title)

      writer.name("cover")
      AnyAdapter.toJson(writer, customScalarAdapters, value.cover)

      writer.name("description")
      StringAdapter.toJson(writer, customScalarAdapters, value.description)

      writer.name("viewCount")
      IntAdapter.toJson(writer, customScalarAdapters, value.viewCount)

      writer.name("publishedAt")
      AnyAdapter.toJson(writer, customScalarAdapters, value.publishedAt)

      writer.name("likeCount")
      IntAdapter.toJson(writer, customScalarAdapters, value.likeCount)

      writer.name("readTime")
      IntAdapter.toJson(writer, customScalarAdapters, value.readTime)

      writer.name("essence")
      Essence.obj().nullable().toJson(writer, customScalarAdapters, value.essence)

      writer.name("likedStatus")
      LikedStatus.obj().toJson(writer, customScalarAdapters, value.likedStatus)

      writer.name("profile")
      Profile.obj(true).toJson(writer, customScalarAdapters, value.profile)
    }
  }

  public object Essence : Adapter<GetTrendingPostsQuery.Essence> {
    public val RESPONSE_NAMES: kotlin.collections.List<String> = listOf("totalCollected",
        "totalSupply")

    public override fun fromJson(reader: JsonReader, customScalarAdapters: CustomScalarAdapters):
        GetTrendingPostsQuery.Essence {
      var _totalCollected: Int? = null
      var _totalSupply: Int? = null

      while(true) {
        when (reader.selectName(RESPONSE_NAMES)) {
          0 -> _totalCollected = IntAdapter.fromJson(reader, customScalarAdapters)
          1 -> _totalSupply = IntAdapter.fromJson(reader, customScalarAdapters)
          else -> break
        }
      }

      return GetTrendingPostsQuery.Essence(
        totalCollected = _totalCollected!!,
        totalSupply = _totalSupply!!
      )
    }

    public override fun toJson(
      writer: JsonWriter,
      customScalarAdapters: CustomScalarAdapters,
      `value`: GetTrendingPostsQuery.Essence,
    ): Unit {
      writer.name("totalCollected")
      IntAdapter.toJson(writer, customScalarAdapters, value.totalCollected)

      writer.name("totalSupply")
      IntAdapter.toJson(writer, customScalarAdapters, value.totalSupply)
    }
  }

  public object LikedStatus : Adapter<GetTrendingPostsQuery.LikedStatus> {
    public val RESPONSE_NAMES: kotlin.collections.List<String> = listOf("liked")

    public override fun fromJson(reader: JsonReader, customScalarAdapters: CustomScalarAdapters):
        GetTrendingPostsQuery.LikedStatus {
      var _liked: Boolean? = null

      while(true) {
        when (reader.selectName(RESPONSE_NAMES)) {
          0 -> _liked = BooleanAdapter.fromJson(reader, customScalarAdapters)
          else -> break
        }
      }

      return GetTrendingPostsQuery.LikedStatus(
        liked = _liked!!
      )
    }

    public override fun toJson(
      writer: JsonWriter,
      customScalarAdapters: CustomScalarAdapters,
      `value`: GetTrendingPostsQuery.LikedStatus,
    ): Unit {
      writer.name("liked")
      BooleanAdapter.toJson(writer, customScalarAdapters, value.liked)
    }
  }

  public object Profile : Adapter<GetTrendingPostsQuery.Profile> {
    public val RESPONSE_NAMES: kotlin.collections.List<String> = listOf("__typename")

    public override fun fromJson(reader: JsonReader, customScalarAdapters: CustomScalarAdapters):
        GetTrendingPostsQuery.Profile {
      var __typename: String? = null

      while(true) {
        when (reader.selectName(RESPONSE_NAMES)) {
          0 -> __typename = StringAdapter.fromJson(reader, customScalarAdapters)
          else -> break
        }
      }

      reader.rewind()
      val _profileInTrending = com.cyberconnect.link3.fragment.ProfileInTrendingImpl_ResponseAdapter.ProfileInTrending.fromJson(reader,
          customScalarAdapters)

      return GetTrendingPostsQuery.Profile(
        __typename = __typename!!,
        profileInTrending = _profileInTrending
      )
    }

    public override fun toJson(
      writer: JsonWriter,
      customScalarAdapters: CustomScalarAdapters,
      `value`: GetTrendingPostsQuery.Profile,
    ): Unit {
      writer.name("__typename")
      StringAdapter.toJson(writer, customScalarAdapters, value.__typename)

      com.cyberconnect.link3.fragment.ProfileInTrendingImpl_ResponseAdapter.ProfileInTrending.toJson(writer,
          customScalarAdapters, value.profileInTrending)
    }
  }

  public object PageInfo : Adapter<GetTrendingPostsQuery.PageInfo> {
    public val RESPONSE_NAMES: kotlin.collections.List<String> = listOf("startCursor", "endCursor",
        "hasNextPage", "hasPreviousPage")

    public override fun fromJson(reader: JsonReader, customScalarAdapters: CustomScalarAdapters):
        GetTrendingPostsQuery.PageInfo {
      var _startCursor: String? = null
      var _endCursor: String? = null
      var _hasNextPage: Boolean? = null
      var _hasPreviousPage: Boolean? = null

      while(true) {
        when (reader.selectName(RESPONSE_NAMES)) {
          0 -> _startCursor = StringAdapter.fromJson(reader, customScalarAdapters)
          1 -> _endCursor = StringAdapter.fromJson(reader, customScalarAdapters)
          2 -> _hasNextPage = BooleanAdapter.fromJson(reader, customScalarAdapters)
          3 -> _hasPreviousPage = BooleanAdapter.fromJson(reader, customScalarAdapters)
          else -> break
        }
      }

      return GetTrendingPostsQuery.PageInfo(
        startCursor = _startCursor!!,
        endCursor = _endCursor!!,
        hasNextPage = _hasNextPage!!,
        hasPreviousPage = _hasPreviousPage!!
      )
    }

    public override fun toJson(
      writer: JsonWriter,
      customScalarAdapters: CustomScalarAdapters,
      `value`: GetTrendingPostsQuery.PageInfo,
    ): Unit {
      writer.name("startCursor")
      StringAdapter.toJson(writer, customScalarAdapters, value.startCursor)

      writer.name("endCursor")
      StringAdapter.toJson(writer, customScalarAdapters, value.endCursor)

      writer.name("hasNextPage")
      BooleanAdapter.toJson(writer, customScalarAdapters, value.hasNextPage)

      writer.name("hasPreviousPage")
      BooleanAdapter.toJson(writer, customScalarAdapters, value.hasPreviousPage)
    }
  }
}
