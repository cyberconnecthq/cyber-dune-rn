//
// AUTO-GENERATED FILE. DO NOT MODIFY.
//
// This class was automatically generated by Apollo GraphQL version '3.8.2'.
//
package com.cyberconnect.link3

import com.apollographql.apollo3.annotations.ApolloAdaptableWith
import com.apollographql.apollo3.api.Adapter
import com.apollographql.apollo3.api.CompiledField
import com.apollographql.apollo3.api.CustomScalarAdapters
import com.apollographql.apollo3.api.Optional
import com.apollographql.apollo3.api.Query
import com.apollographql.apollo3.api.json.JsonWriter
import com.apollographql.apollo3.api.obj
import com.cyberconnect.link3.adapter.GetMyEventsQuery_ResponseAdapter
import com.cyberconnect.link3.adapter.GetMyEventsQuery_VariablesAdapter
import com.cyberconnect.link3.fragment.MyEventCard
import com.cyberconnect.link3.selections.GetMyEventsQuerySelections
import kotlin.String
import kotlin.Unit

public data class GetMyEventsQuery(
  public val after: Optional<String?> = Optional.Absent,
) : Query<GetMyEventsQuery.Data> {
  public override fun id(): String = OPERATION_ID

  public override fun document(): String = OPERATION_DOCUMENT

  public override fun name(): String = OPERATION_NAME

  public override fun serializeVariables(writer: JsonWriter,
      customScalarAdapters: CustomScalarAdapters): Unit {
    GetMyEventsQuery_VariablesAdapter.toJson(writer, customScalarAdapters, this)
  }

  public override fun adapter(): Adapter<Data> = GetMyEventsQuery_ResponseAdapter.Data.obj()

  public override fun rootField(): CompiledField = CompiledField.Builder(
    name = "data",
    type = com.cyberconnect.link3.type.Query.type
  )
  .selections(selections = GetMyEventsQuerySelections.__root)
  .build()

  @ApolloAdaptableWith(GetMyEventsQuery_ResponseAdapter.Data::class)
  public data class Data(
    public val me: Me,
  ) : Query.Data

  public data class Me(
    public val `data`: Data1?,
  )

  public data class Data1(
    /**
     * user registered events,
     * if ended=true, order by event start time desc,
     * if ended=false, order by event start time asc.
     */
    public val registeredEvents: RegisteredEvents?,
  )

  public data class RegisteredEvents(
    public val list: kotlin.collections.List<List>,
    public val pageInfo: PageInfo,
  )

  public data class List(
    public val __typename: String,
    /**
     * Synthetic field for 'MyEventCard'
     */
    public val myEventCard: MyEventCard,
  )

  public data class PageInfo(
    public val __typename: String,
    /**
     * Synthetic field for 'PageInfo'
     */
    public val pageInfo: com.cyberconnect.link3.fragment.PageInfo,
  )

  public companion object {
    public const val OPERATION_ID: String =
        "1fc5ff3797f25ddb7cbceba83c6a096f3c4d84206133d445ccdbda7aede63ad3"

    /**
     * The minimized GraphQL document being sent to the server to save a few bytes.
     * The un-minimized version is:
     *
     * query getMyEvents($after: String) {
     *   me {
     *     data {
     *       registeredEvents(first: 10, after: $after, ended: false) {
     *         list {
     *           __typename
     *           ...MyEventCard
     *         }
     *         pageInfo {
     *           __typename
     *           ...PageInfo
     *         }
     *       }
     *     }
     *   }
     * }
     *
     * fragment Organizer on Organization {
     *   twitterId
     *   id
     *   followersCount
     *   verification
     *   currentAccess
     *   lightInfo {
     *     isFollowing
     *     displayName
     *     profilePicture
     *     profileHandle
     *   }
     * }
     *
     * fragment MyEventCard on Event {
     *   id
     *   info
     *   title
     *   posterUrl
     *   startTimestamp
     *   endTimestamp
     *   status
     *   organizer {
     *     __typename
     *     ...Organizer
     *   }
     * }
     *
     * fragment PageInfo on PageInfo {
     *   startCursor
     *   endCursor
     *   hasNextPage
     *   hasPreviousPage
     * }
     */
    public val OPERATION_DOCUMENT: String
      get() =
          "query getMyEvents(${'$'}after: String) { me { data { registeredEvents(first: 10, after: ${'$'}after, ended: false) { list { __typename ...MyEventCard } pageInfo { __typename ...PageInfo } } } } }  fragment Organizer on Organization { twitterId id followersCount verification currentAccess lightInfo { isFollowing displayName profilePicture profileHandle } }  fragment MyEventCard on Event { id info title posterUrl startTimestamp endTimestamp status organizer { __typename ...Organizer } }  fragment PageInfo on PageInfo { startCursor endCursor hasNextPage hasPreviousPage }"

    public const val OPERATION_NAME: String = "getMyEvents"
  }
}
