//
// AUTO-GENERATED FILE. DO NOT MODIFY.
//
// This class was automatically generated by Apollo GraphQL version '3.8.2'.
//
package com.cyberconnect.link3

import com.apollographql.apollo3.annotations.ApolloAdaptableWith
import com.apollographql.apollo3.api.Adapter
import com.apollographql.apollo3.api.CompiledField
import com.apollographql.apollo3.api.CustomScalarAdapters
import com.apollographql.apollo3.api.Query
import com.apollographql.apollo3.api.json.JsonWriter
import com.apollographql.apollo3.api.obj
import com.cyberconnect.link3.adapter.SearchProfilesDetailedQuery_ResponseAdapter
import com.cyberconnect.link3.adapter.SearchProfilesDetailedQuery_VariablesAdapter
import com.cyberconnect.link3.fragment.SearchOrgProfileDetailed
import com.cyberconnect.link3.fragment.SearchPerProfileDetailed
import com.cyberconnect.link3.selections.SearchProfilesDetailedQuerySelections
import com.cyberconnect.link3.type.SearchProfilesInput
import kotlin.Boolean
import kotlin.String
import kotlin.Unit
import kotlin.collections.List

public data class SearchProfilesDetailedQuery(
  public val input: SearchProfilesInput,
) : Query<SearchProfilesDetailedQuery.Data> {
  public override fun id(): String = OPERATION_ID

  public override fun document(): String = OPERATION_DOCUMENT

  public override fun name(): String = OPERATION_NAME

  public override fun serializeVariables(writer: JsonWriter,
      customScalarAdapters: CustomScalarAdapters): Unit {
    SearchProfilesDetailedQuery_VariablesAdapter.toJson(writer, customScalarAdapters, this)
  }

  public override fun adapter(): Adapter<Data> =
      SearchProfilesDetailedQuery_ResponseAdapter.Data.obj()

  public override fun rootField(): CompiledField = CompiledField.Builder(
    name = "data",
    type = com.cyberconnect.link3.type.Query.type
  )
  .selections(selections = SearchProfilesDetailedQuerySelections.__root)
  .build()

  @ApolloAdaptableWith(SearchProfilesDetailedQuery_ResponseAdapter.Data::class)
  public data class Data(
    public val searchProfiles: SearchProfiles,
  ) : Query.Data

  public data class SearchProfiles(
    public val profiles: List<Profile>,
    public val orgProfiles: List<OrgProfile>,
    public val pageInfo: PageInfo,
  )

  public data class Profile(
    public val __typename: String,
    /**
     * Synthetic field for 'SearchPerProfileDetailed'
     */
    public val searchPerProfileDetailed: SearchPerProfileDetailed?,
  )

  public data class OrgProfile(
    public val __typename: String,
    /**
     * Synthetic field for 'SearchOrgProfileDetailed'
     */
    public val searchOrgProfileDetailed: SearchOrgProfileDetailed?,
  )

  public data class PageInfo(
    public val startCursor: String,
    public val endCursor: String,
    public val hasNextPage: Boolean,
    public val hasPreviousPage: Boolean,
  )

  public companion object {
    public const val OPERATION_ID: String =
        "93bde62dc4d83b12d3a91b164bfd85d913cd41d812346c837ed62337059c3c92"

    /**
     * The minimized GraphQL document being sent to the server to save a few bytes.
     * The un-minimized version is:
     *
     * query searchProfilesDetailed($input: SearchProfilesInput!) {
     *   searchProfiles(input: $input) {
     *     profiles {
     *       __typename
     *       ...SearchPerProfileDetailed
     *     }
     *     orgProfiles {
     *       __typename
     *       ...SearchOrgProfileDetailed
     *     }
     *     pageInfo {
     *       startCursor
     *       endCursor
     *       hasNextPage
     *       hasPreviousPage
     *     }
     *   }
     * }
     *
     * fragment SearchPerProfileDetailed on PerProfile {
     *   id
     *   handle
     *   type
     *   __typename
     *   personalProfilePicture: profilePicture {
     *     picture
     *   }
     *   personalDisplayName: displayName {
     *     displayName
     *   }
     *   headline {
     *     twitterId
     *     twitterHandle
     *     displayName
     *     title
     *     profileId
     *   }
     *   owner {
     *     lightInfo {
     *       attestation {
     *         uid
     *       }
     *     }
     *   }
     *   isVerified
     * }
     *
     * fragment SearchOrgProfileDetailed on OrgProfile {
     *   id
     *   handle
     *   type
     *   profilePicture
     *   displayName
     *   isFollowing
     *   bio
     *   organization {
     *     followersCount
     *     verification
     *   }
     * }
     */
    public val OPERATION_DOCUMENT: String
      get() =
          "query searchProfilesDetailed(${'$'}input: SearchProfilesInput!) { searchProfiles(input: ${'$'}input) { profiles { __typename ...SearchPerProfileDetailed } orgProfiles { __typename ...SearchOrgProfileDetailed } pageInfo { startCursor endCursor hasNextPage hasPreviousPage } } }  fragment SearchPerProfileDetailed on PerProfile { id handle type __typename personalProfilePicture: profilePicture { picture } personalDisplayName: displayName { displayName } headline { twitterId twitterHandle displayName title profileId } owner { lightInfo { attestation { uid } } } isVerified }  fragment SearchOrgProfileDetailed on OrgProfile { id handle type profilePicture displayName isFollowing bio organization { followersCount verification } }"

    public const val OPERATION_NAME: String = "searchProfilesDetailed"
  }
}
