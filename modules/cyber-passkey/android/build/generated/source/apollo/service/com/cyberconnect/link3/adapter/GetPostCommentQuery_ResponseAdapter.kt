//
// AUTO-GENERATED FILE. DO NOT MODIFY.
//
// This class was automatically generated by Apollo GraphQL version '3.8.2'.
//
package com.cyberconnect.link3.adapter

import com.apollographql.apollo3.api.Adapter
import com.apollographql.apollo3.api.AnyAdapter
import com.apollographql.apollo3.api.BooleanAdapter
import com.apollographql.apollo3.api.CustomScalarAdapters
import com.apollographql.apollo3.api.IntAdapter
import com.apollographql.apollo3.api.NullableStringAdapter
import com.apollographql.apollo3.api.StringAdapter
import com.apollographql.apollo3.api.json.JsonReader
import com.apollographql.apollo3.api.json.JsonWriter
import com.apollographql.apollo3.api.list
import com.apollographql.apollo3.api.nullable
import com.apollographql.apollo3.api.obj
import com.cyberconnect.link3.GetPostCommentQuery
import kotlin.Any
import kotlin.Boolean
import kotlin.Int
import kotlin.String
import kotlin.Unit

public object GetPostCommentQuery_ResponseAdapter {
  public object Data : Adapter<GetPostCommentQuery.Data> {
    public val RESPONSE_NAMES: kotlin.collections.List<String> = listOf("post")

    public override fun fromJson(reader: JsonReader, customScalarAdapters: CustomScalarAdapters):
        GetPostCommentQuery.Data {
      var _post: GetPostCommentQuery.Post? = null

      while(true) {
        when (reader.selectName(RESPONSE_NAMES)) {
          0 -> _post = Post.obj().nullable().fromJson(reader, customScalarAdapters)
          else -> break
        }
      }

      return GetPostCommentQuery.Data(
        post = _post
      )
    }

    public override fun toJson(
      writer: JsonWriter,
      customScalarAdapters: CustomScalarAdapters,
      `value`: GetPostCommentQuery.Data,
    ): Unit {
      writer.name("post")
      Post.obj().nullable().toJson(writer, customScalarAdapters, value.post)
    }
  }

  public object Post : Adapter<GetPostCommentQuery.Post> {
    public val RESPONSE_NAMES: kotlin.collections.List<String> = listOf("comments")

    public override fun fromJson(reader: JsonReader, customScalarAdapters: CustomScalarAdapters):
        GetPostCommentQuery.Post {
      var _comments: GetPostCommentQuery.Comments? = null

      while(true) {
        when (reader.selectName(RESPONSE_NAMES)) {
          0 -> _comments = Comments.obj().fromJson(reader, customScalarAdapters)
          else -> break
        }
      }

      return GetPostCommentQuery.Post(
        comments = _comments!!
      )
    }

    public override fun toJson(
      writer: JsonWriter,
      customScalarAdapters: CustomScalarAdapters,
      `value`: GetPostCommentQuery.Post,
    ): Unit {
      writer.name("comments")
      Comments.obj().toJson(writer, customScalarAdapters, value.comments)
    }
  }

  public object Comments : Adapter<GetPostCommentQuery.Comments> {
    public val RESPONSE_NAMES: kotlin.collections.List<String> = listOf("pageInfo", "list")

    public override fun fromJson(reader: JsonReader, customScalarAdapters: CustomScalarAdapters):
        GetPostCommentQuery.Comments {
      var _pageInfo: GetPostCommentQuery.PageInfo? = null
      var _list: kotlin.collections.List<GetPostCommentQuery.List>? = null

      while(true) {
        when (reader.selectName(RESPONSE_NAMES)) {
          0 -> _pageInfo = PageInfo.obj().fromJson(reader, customScalarAdapters)
          1 -> _list = List.obj().list().fromJson(reader, customScalarAdapters)
          else -> break
        }
      }

      return GetPostCommentQuery.Comments(
        pageInfo = _pageInfo!!,
        list = _list!!
      )
    }

    public override fun toJson(
      writer: JsonWriter,
      customScalarAdapters: CustomScalarAdapters,
      `value`: GetPostCommentQuery.Comments,
    ): Unit {
      writer.name("pageInfo")
      PageInfo.obj().toJson(writer, customScalarAdapters, value.pageInfo)

      writer.name("list")
      List.obj().list().toJson(writer, customScalarAdapters, value.list)
    }
  }

  public object PageInfo : Adapter<GetPostCommentQuery.PageInfo> {
    public val RESPONSE_NAMES: kotlin.collections.List<String> = listOf("startCursor", "endCursor",
        "hasNextPage", "hasPreviousPage")

    public override fun fromJson(reader: JsonReader, customScalarAdapters: CustomScalarAdapters):
        GetPostCommentQuery.PageInfo {
      var _startCursor: String? = null
      var _endCursor: String? = null
      var _hasNextPage: Boolean? = null
      var _hasPreviousPage: Boolean? = null

      while(true) {
        when (reader.selectName(RESPONSE_NAMES)) {
          0 -> _startCursor = StringAdapter.fromJson(reader, customScalarAdapters)
          1 -> _endCursor = StringAdapter.fromJson(reader, customScalarAdapters)
          2 -> _hasNextPage = BooleanAdapter.fromJson(reader, customScalarAdapters)
          3 -> _hasPreviousPage = BooleanAdapter.fromJson(reader, customScalarAdapters)
          else -> break
        }
      }

      return GetPostCommentQuery.PageInfo(
        startCursor = _startCursor!!,
        endCursor = _endCursor!!,
        hasNextPage = _hasNextPage!!,
        hasPreviousPage = _hasPreviousPage!!
      )
    }

    public override fun toJson(
      writer: JsonWriter,
      customScalarAdapters: CustomScalarAdapters,
      `value`: GetPostCommentQuery.PageInfo,
    ): Unit {
      writer.name("startCursor")
      StringAdapter.toJson(writer, customScalarAdapters, value.startCursor)

      writer.name("endCursor")
      StringAdapter.toJson(writer, customScalarAdapters, value.endCursor)

      writer.name("hasNextPage")
      BooleanAdapter.toJson(writer, customScalarAdapters, value.hasNextPage)

      writer.name("hasPreviousPage")
      BooleanAdapter.toJson(writer, customScalarAdapters, value.hasPreviousPage)
    }
  }

  public object List : Adapter<GetPostCommentQuery.List> {
    public val RESPONSE_NAMES: kotlin.collections.List<String> = listOf("id", "author",
        "trendingComments", "body", "likedStatus", "likeCount", "commentCount", "publishedAt")

    public override fun fromJson(reader: JsonReader, customScalarAdapters: CustomScalarAdapters):
        GetPostCommentQuery.List {
      var _id: String? = null
      var _author: GetPostCommentQuery.Author? = null
      var _trendingComments: GetPostCommentQuery.TrendingComments? = null
      var _body: String? = null
      var _likedStatus: GetPostCommentQuery.LikedStatus1? = null
      var _likeCount: Int? = null
      var _commentCount: Int? = null
      var _publishedAt: Any? = null

      while(true) {
        when (reader.selectName(RESPONSE_NAMES)) {
          0 -> _id = StringAdapter.fromJson(reader, customScalarAdapters)
          1 -> _author = Author.obj().fromJson(reader, customScalarAdapters)
          2 -> _trendingComments = TrendingComments.obj().fromJson(reader, customScalarAdapters)
          3 -> _body = StringAdapter.fromJson(reader, customScalarAdapters)
          4 -> _likedStatus = LikedStatus1.obj().fromJson(reader, customScalarAdapters)
          5 -> _likeCount = IntAdapter.fromJson(reader, customScalarAdapters)
          6 -> _commentCount = IntAdapter.fromJson(reader, customScalarAdapters)
          7 -> _publishedAt = AnyAdapter.fromJson(reader, customScalarAdapters)
          else -> break
        }
      }

      return GetPostCommentQuery.List(
        id = _id!!,
        author = _author!!,
        trendingComments = _trendingComments!!,
        body = _body!!,
        likedStatus = _likedStatus!!,
        likeCount = _likeCount!!,
        commentCount = _commentCount!!,
        publishedAt = _publishedAt!!
      )
    }

    public override fun toJson(
      writer: JsonWriter,
      customScalarAdapters: CustomScalarAdapters,
      `value`: GetPostCommentQuery.List,
    ): Unit {
      writer.name("id")
      StringAdapter.toJson(writer, customScalarAdapters, value.id)

      writer.name("author")
      Author.obj().toJson(writer, customScalarAdapters, value.author)

      writer.name("trendingComments")
      TrendingComments.obj().toJson(writer, customScalarAdapters, value.trendingComments)

      writer.name("body")
      StringAdapter.toJson(writer, customScalarAdapters, value.body)

      writer.name("likedStatus")
      LikedStatus1.obj().toJson(writer, customScalarAdapters, value.likedStatus)

      writer.name("likeCount")
      IntAdapter.toJson(writer, customScalarAdapters, value.likeCount)

      writer.name("commentCount")
      IntAdapter.toJson(writer, customScalarAdapters, value.commentCount)

      writer.name("publishedAt")
      AnyAdapter.toJson(writer, customScalarAdapters, value.publishedAt)
    }
  }

  public object Author : Adapter<GetPostCommentQuery.Author> {
    public val RESPONSE_NAMES: kotlin.collections.List<String> = listOf("lightInfo")

    public override fun fromJson(reader: JsonReader, customScalarAdapters: CustomScalarAdapters):
        GetPostCommentQuery.Author {
      var _lightInfo: GetPostCommentQuery.LightInfo? = null

      while(true) {
        when (reader.selectName(RESPONSE_NAMES)) {
          0 -> _lightInfo = LightInfo.obj().fromJson(reader, customScalarAdapters)
          else -> break
        }
      }

      return GetPostCommentQuery.Author(
        lightInfo = _lightInfo!!
      )
    }

    public override fun toJson(
      writer: JsonWriter,
      customScalarAdapters: CustomScalarAdapters,
      `value`: GetPostCommentQuery.Author,
    ): Unit {
      writer.name("lightInfo")
      LightInfo.obj().toJson(writer, customScalarAdapters, value.lightInfo)
    }
  }

  public object LightInfo : Adapter<GetPostCommentQuery.LightInfo> {
    public val RESPONSE_NAMES: kotlin.collections.List<String> = listOf("handle", "avatar",
        "avatarFrameTokenId", "displayName", "formattedAddress")

    public override fun fromJson(reader: JsonReader, customScalarAdapters: CustomScalarAdapters):
        GetPostCommentQuery.LightInfo {
      var _handle: String? = null
      var _avatar: String? = null
      var _avatarFrameTokenId: String? = null
      var _displayName: String? = null
      var _formattedAddress: String? = null

      while(true) {
        when (reader.selectName(RESPONSE_NAMES)) {
          0 -> _handle = StringAdapter.fromJson(reader, customScalarAdapters)
          1 -> _avatar = StringAdapter.fromJson(reader, customScalarAdapters)
          2 -> _avatarFrameTokenId = NullableStringAdapter.fromJson(reader, customScalarAdapters)
          3 -> _displayName = StringAdapter.fromJson(reader, customScalarAdapters)
          4 -> _formattedAddress = StringAdapter.fromJson(reader, customScalarAdapters)
          else -> break
        }
      }

      return GetPostCommentQuery.LightInfo(
        handle = _handle!!,
        avatar = _avatar!!,
        avatarFrameTokenId = _avatarFrameTokenId,
        displayName = _displayName!!,
        formattedAddress = _formattedAddress!!
      )
    }

    public override fun toJson(
      writer: JsonWriter,
      customScalarAdapters: CustomScalarAdapters,
      `value`: GetPostCommentQuery.LightInfo,
    ): Unit {
      writer.name("handle")
      StringAdapter.toJson(writer, customScalarAdapters, value.handle)

      writer.name("avatar")
      StringAdapter.toJson(writer, customScalarAdapters, value.avatar)

      writer.name("avatarFrameTokenId")
      NullableStringAdapter.toJson(writer, customScalarAdapters, value.avatarFrameTokenId)

      writer.name("displayName")
      StringAdapter.toJson(writer, customScalarAdapters, value.displayName)

      writer.name("formattedAddress")
      StringAdapter.toJson(writer, customScalarAdapters, value.formattedAddress)
    }
  }

  public object TrendingComments : Adapter<GetPostCommentQuery.TrendingComments> {
    public val RESPONSE_NAMES: kotlin.collections.List<String> = listOf("list")

    public override fun fromJson(reader: JsonReader, customScalarAdapters: CustomScalarAdapters):
        GetPostCommentQuery.TrendingComments {
      var _list: kotlin.collections.List<GetPostCommentQuery.List1>? = null

      while(true) {
        when (reader.selectName(RESPONSE_NAMES)) {
          0 -> _list = List1.obj().list().fromJson(reader, customScalarAdapters)
          else -> break
        }
      }

      return GetPostCommentQuery.TrendingComments(
        list = _list!!
      )
    }

    public override fun toJson(
      writer: JsonWriter,
      customScalarAdapters: CustomScalarAdapters,
      `value`: GetPostCommentQuery.TrendingComments,
    ): Unit {
      writer.name("list")
      List1.obj().list().toJson(writer, customScalarAdapters, value.list)
    }
  }

  public object List1 : Adapter<GetPostCommentQuery.List1> {
    public val RESPONSE_NAMES: kotlin.collections.List<String> = listOf("id", "body", "likedStatus",
        "likeCount", "commentCount", "publishedAt", "author")

    public override fun fromJson(reader: JsonReader, customScalarAdapters: CustomScalarAdapters):
        GetPostCommentQuery.List1 {
      var _id: String? = null
      var _body: String? = null
      var _likedStatus: GetPostCommentQuery.LikedStatus? = null
      var _likeCount: Int? = null
      var _commentCount: Int? = null
      var _publishedAt: Any? = null
      var _author: GetPostCommentQuery.Author1? = null

      while(true) {
        when (reader.selectName(RESPONSE_NAMES)) {
          0 -> _id = StringAdapter.fromJson(reader, customScalarAdapters)
          1 -> _body = StringAdapter.fromJson(reader, customScalarAdapters)
          2 -> _likedStatus = LikedStatus.obj().fromJson(reader, customScalarAdapters)
          3 -> _likeCount = IntAdapter.fromJson(reader, customScalarAdapters)
          4 -> _commentCount = IntAdapter.fromJson(reader, customScalarAdapters)
          5 -> _publishedAt = AnyAdapter.fromJson(reader, customScalarAdapters)
          6 -> _author = Author1.obj().fromJson(reader, customScalarAdapters)
          else -> break
        }
      }

      return GetPostCommentQuery.List1(
        id = _id!!,
        body = _body!!,
        likedStatus = _likedStatus!!,
        likeCount = _likeCount!!,
        commentCount = _commentCount!!,
        publishedAt = _publishedAt!!,
        author = _author!!
      )
    }

    public override fun toJson(
      writer: JsonWriter,
      customScalarAdapters: CustomScalarAdapters,
      `value`: GetPostCommentQuery.List1,
    ): Unit {
      writer.name("id")
      StringAdapter.toJson(writer, customScalarAdapters, value.id)

      writer.name("body")
      StringAdapter.toJson(writer, customScalarAdapters, value.body)

      writer.name("likedStatus")
      LikedStatus.obj().toJson(writer, customScalarAdapters, value.likedStatus)

      writer.name("likeCount")
      IntAdapter.toJson(writer, customScalarAdapters, value.likeCount)

      writer.name("commentCount")
      IntAdapter.toJson(writer, customScalarAdapters, value.commentCount)

      writer.name("publishedAt")
      AnyAdapter.toJson(writer, customScalarAdapters, value.publishedAt)

      writer.name("author")
      Author1.obj().toJson(writer, customScalarAdapters, value.author)
    }
  }

  public object LikedStatus : Adapter<GetPostCommentQuery.LikedStatus> {
    public val RESPONSE_NAMES: kotlin.collections.List<String> = listOf("liked")

    public override fun fromJson(reader: JsonReader, customScalarAdapters: CustomScalarAdapters):
        GetPostCommentQuery.LikedStatus {
      var _liked: Boolean? = null

      while(true) {
        when (reader.selectName(RESPONSE_NAMES)) {
          0 -> _liked = BooleanAdapter.fromJson(reader, customScalarAdapters)
          else -> break
        }
      }

      return GetPostCommentQuery.LikedStatus(
        liked = _liked!!
      )
    }

    public override fun toJson(
      writer: JsonWriter,
      customScalarAdapters: CustomScalarAdapters,
      `value`: GetPostCommentQuery.LikedStatus,
    ): Unit {
      writer.name("liked")
      BooleanAdapter.toJson(writer, customScalarAdapters, value.liked)
    }
  }

  public object Author1 : Adapter<GetPostCommentQuery.Author1> {
    public val RESPONSE_NAMES: kotlin.collections.List<String> = listOf("lightInfo")

    public override fun fromJson(reader: JsonReader, customScalarAdapters: CustomScalarAdapters):
        GetPostCommentQuery.Author1 {
      var _lightInfo: GetPostCommentQuery.LightInfo1? = null

      while(true) {
        when (reader.selectName(RESPONSE_NAMES)) {
          0 -> _lightInfo = LightInfo1.obj().fromJson(reader, customScalarAdapters)
          else -> break
        }
      }

      return GetPostCommentQuery.Author1(
        lightInfo = _lightInfo!!
      )
    }

    public override fun toJson(
      writer: JsonWriter,
      customScalarAdapters: CustomScalarAdapters,
      `value`: GetPostCommentQuery.Author1,
    ): Unit {
      writer.name("lightInfo")
      LightInfo1.obj().toJson(writer, customScalarAdapters, value.lightInfo)
    }
  }

  public object LightInfo1 : Adapter<GetPostCommentQuery.LightInfo1> {
    public val RESPONSE_NAMES: kotlin.collections.List<String> = listOf("handle", "avatar",
        "displayName", "formattedAddress")

    public override fun fromJson(reader: JsonReader, customScalarAdapters: CustomScalarAdapters):
        GetPostCommentQuery.LightInfo1 {
      var _handle: String? = null
      var _avatar: String? = null
      var _displayName: String? = null
      var _formattedAddress: String? = null

      while(true) {
        when (reader.selectName(RESPONSE_NAMES)) {
          0 -> _handle = StringAdapter.fromJson(reader, customScalarAdapters)
          1 -> _avatar = StringAdapter.fromJson(reader, customScalarAdapters)
          2 -> _displayName = StringAdapter.fromJson(reader, customScalarAdapters)
          3 -> _formattedAddress = StringAdapter.fromJson(reader, customScalarAdapters)
          else -> break
        }
      }

      return GetPostCommentQuery.LightInfo1(
        handle = _handle!!,
        avatar = _avatar!!,
        displayName = _displayName!!,
        formattedAddress = _formattedAddress!!
      )
    }

    public override fun toJson(
      writer: JsonWriter,
      customScalarAdapters: CustomScalarAdapters,
      `value`: GetPostCommentQuery.LightInfo1,
    ): Unit {
      writer.name("handle")
      StringAdapter.toJson(writer, customScalarAdapters, value.handle)

      writer.name("avatar")
      StringAdapter.toJson(writer, customScalarAdapters, value.avatar)

      writer.name("displayName")
      StringAdapter.toJson(writer, customScalarAdapters, value.displayName)

      writer.name("formattedAddress")
      StringAdapter.toJson(writer, customScalarAdapters, value.formattedAddress)
    }
  }

  public object LikedStatus1 : Adapter<GetPostCommentQuery.LikedStatus1> {
    public val RESPONSE_NAMES: kotlin.collections.List<String> = listOf("liked")

    public override fun fromJson(reader: JsonReader, customScalarAdapters: CustomScalarAdapters):
        GetPostCommentQuery.LikedStatus1 {
      var _liked: Boolean? = null

      while(true) {
        when (reader.selectName(RESPONSE_NAMES)) {
          0 -> _liked = BooleanAdapter.fromJson(reader, customScalarAdapters)
          else -> break
        }
      }

      return GetPostCommentQuery.LikedStatus1(
        liked = _liked!!
      )
    }

    public override fun toJson(
      writer: JsonWriter,
      customScalarAdapters: CustomScalarAdapters,
      `value`: GetPostCommentQuery.LikedStatus1,
    ): Unit {
      writer.name("liked")
      BooleanAdapter.toJson(writer, customScalarAdapters, value.liked)
    }
  }
}
