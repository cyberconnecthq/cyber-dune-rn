//
// AUTO-GENERATED FILE. DO NOT MODIFY.
//
// This class was automatically generated by Apollo GraphQL version '3.8.2'.
//
package com.cyberconnect.link3.selections

import com.apollographql.apollo3.api.CompiledArgument
import com.apollographql.apollo3.api.CompiledField
import com.apollographql.apollo3.api.CompiledFragment
import com.apollographql.apollo3.api.CompiledSelection
import com.apollographql.apollo3.api.CompiledVariable
import com.apollographql.apollo3.api.list
import com.apollographql.apollo3.api.notNull
import com.cyberconnect.link3.fragment.selections.ProfileInTrendingSelections
import com.cyberconnect.link3.type.ContentLikeStatus
import com.cyberconnect.link3.type.DateTime
import com.cyberconnect.link3.type.GraphQLBoolean
import com.cyberconnect.link3.type.GraphQLID
import com.cyberconnect.link3.type.GraphQLInt
import com.cyberconnect.link3.type.GraphQLString
import com.cyberconnect.link3.type.PageInfo
import com.cyberconnect.link3.type.Post
import com.cyberconnect.link3.type.PostEssence
import com.cyberconnect.link3.type.PostPage
import com.cyberconnect.link3.type.Profile
import com.cyberconnect.link3.type.Url
import kotlin.collections.List

public object GetTrendingPostsQuerySelections {
  private val __essence: List<CompiledSelection> = listOf(
        CompiledField.Builder(
          name = "totalCollected",
          type = GraphQLInt.type.notNull()
        ).build(),
        CompiledField.Builder(
          name = "totalSupply",
          type = GraphQLInt.type.notNull()
        ).build()
      )

  private val __likedStatus: List<CompiledSelection> = listOf(
        CompiledField.Builder(
          name = "liked",
          type = GraphQLBoolean.type.notNull()
        ).build()
      )

  private val __profile: List<CompiledSelection> = listOf(
        CompiledField.Builder(
          name = "__typename",
          type = GraphQLString.type.notNull()
        ).build(),
        CompiledFragment.Builder(
          typeCondition = "Profile",
          possibleTypes = listOf("OrgProfile", "PerProfile")
        ).selections(ProfileInTrendingSelections.__root)
        .build()
      )

  private val __list: List<CompiledSelection> = listOf(
        CompiledField.Builder(
          name = "id",
          type = GraphQLID.type.notNull()
        ).build(),
        CompiledField.Builder(
          name = "title",
          type = GraphQLString.type.notNull()
        ).build(),
        CompiledField.Builder(
          name = "cover",
          type = Url.type.notNull()
        ).build(),
        CompiledField.Builder(
          name = "description",
          type = GraphQLString.type.notNull()
        ).build(),
        CompiledField.Builder(
          name = "viewCount",
          type = GraphQLInt.type.notNull()
        ).build(),
        CompiledField.Builder(
          name = "publishedAt",
          type = DateTime.type.notNull()
        ).build(),
        CompiledField.Builder(
          name = "likeCount",
          type = GraphQLInt.type.notNull()
        ).build(),
        CompiledField.Builder(
          name = "readTime",
          type = GraphQLInt.type.notNull()
        ).build(),
        CompiledField.Builder(
          name = "essence",
          type = PostEssence.type
        ).selections(__essence)
        .build(),
        CompiledField.Builder(
          name = "likedStatus",
          type = ContentLikeStatus.type.notNull()
        ).selections(__likedStatus)
        .build(),
        CompiledField.Builder(
          name = "profile",
          type = Profile.type.notNull()
        ).selections(__profile)
        .build()
      )

  private val __pageInfo: List<CompiledSelection> = listOf(
        CompiledField.Builder(
          name = "startCursor",
          type = GraphQLString.type.notNull()
        ).build(),
        CompiledField.Builder(
          name = "endCursor",
          type = GraphQLString.type.notNull()
        ).build(),
        CompiledField.Builder(
          name = "hasNextPage",
          type = GraphQLBoolean.type.notNull()
        ).build(),
        CompiledField.Builder(
          name = "hasPreviousPage",
          type = GraphQLBoolean.type.notNull()
        ).build()
      )

  private val __trendingPosts: List<CompiledSelection> = listOf(
        CompiledField.Builder(
          name = "list",
          type = Post.type.notNull().list().notNull()
        ).selections(__list)
        .build(),
        CompiledField.Builder(
          name = "pageInfo",
          type = PageInfo.type.notNull()
        ).selections(__pageInfo)
        .build()
      )

  public val __root: List<CompiledSelection> = listOf(
        CompiledField.Builder(
          name = "trendingPosts",
          type = PostPage.type.notNull()
        ).arguments(listOf(
          CompiledArgument.Builder("after", CompiledVariable("after")).build(),
          CompiledArgument.Builder("filter", CompiledVariable("filter")).build(),
          CompiledArgument.Builder("first", CompiledVariable("first")).build()
        ))
        .selections(__trendingPosts)
        .build()
      )
}
