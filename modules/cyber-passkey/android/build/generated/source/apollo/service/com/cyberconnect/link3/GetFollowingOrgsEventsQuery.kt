//
// AUTO-GENERATED FILE. DO NOT MODIFY.
//
// This class was automatically generated by Apollo GraphQL version '3.8.2'.
//
package com.cyberconnect.link3

import com.apollographql.apollo3.annotations.ApolloAdaptableWith
import com.apollographql.apollo3.api.Adapter
import com.apollographql.apollo3.api.CompiledField
import com.apollographql.apollo3.api.CustomScalarAdapters
import com.apollographql.apollo3.api.Optional
import com.apollographql.apollo3.api.Query
import com.apollographql.apollo3.api.json.JsonWriter
import com.apollographql.apollo3.api.obj
import com.cyberconnect.link3.adapter.GetFollowingOrgsEventsQuery_ResponseAdapter
import com.cyberconnect.link3.adapter.GetFollowingOrgsEventsQuery_VariablesAdapter
import com.cyberconnect.link3.selections.GetFollowingOrgsEventsQuerySelections
import com.cyberconnect.link3.type.EventRegisterStatus
import com.cyberconnect.link3.type.EventStatus
import kotlin.Any
import kotlin.Boolean
import kotlin.Int
import kotlin.String
import kotlin.Unit

public data class GetFollowingOrgsEventsQuery(
  public val first: Optional<Int?> = Optional.Absent,
  public val after: Optional<String?> = Optional.Absent,
) : Query<GetFollowingOrgsEventsQuery.Data> {
  public override fun id(): String = OPERATION_ID

  public override fun document(): String = OPERATION_DOCUMENT

  public override fun name(): String = OPERATION_NAME

  public override fun serializeVariables(writer: JsonWriter,
      customScalarAdapters: CustomScalarAdapters): Unit {
    GetFollowingOrgsEventsQuery_VariablesAdapter.toJson(writer, customScalarAdapters, this)
  }

  public override fun adapter(): Adapter<Data> =
      GetFollowingOrgsEventsQuery_ResponseAdapter.Data.obj()

  public override fun rootField(): CompiledField = CompiledField.Builder(
    name = "data",
    type = com.cyberconnect.link3.type.Query.type
  )
  .selections(selections = GetFollowingOrgsEventsQuerySelections.__root)
  .build()

  @ApolloAdaptableWith(GetFollowingOrgsEventsQuery_ResponseAdapter.Data::class)
  public data class Data(
    public val me: Me,
  ) : Query.Data

  public data class Me(
    public val `data`: Data1?,
  )

  public data class Data1(
    /**
     * user's following organizations' upcoming events, order by event start time asc
     */
    public val followingOrgsEvents: FollowingOrgsEvents?,
  )

  public data class FollowingOrgsEvents(
    public val pageInfo: PageInfo,
    public val list: kotlin.collections.List<List>,
  )

  public data class PageInfo(
    public val __typename: String,
    /**
     * Synthetic field for 'PageInfo'
     */
    public val pageInfo: com.cyberconnect.link3.fragment.PageInfo,
  )

  public data class List(
    public val id: String,
    public val info: String,
    public val title: String,
    public val posterUrl: Any,
    public val startTimestamp: Any,
    public val endTimestamp: Any,
    public val registrantsCount: Int,
    /**
     * current user status
     */
    public val registerStatus: EventRegisterStatus,
    public val status: EventStatus,
    public val organizer: Organizer,
    public val lightInfo: LightInfo,
  )

  public data class Organizer(
    public val __typename: String,
    /**
     * Synthetic field for 'Organizer'
     */
    public val organizer: com.cyberconnect.link3.fragment.Organizer,
  )

  public data class LightInfo(
    public val hasRaffle: Boolean,
    public val hasW3ST: Boolean,
  )

  public companion object {
    public const val OPERATION_ID: String =
        "ea8c6d745829b7bbdc46e8e8af1c5c4913ed4d8c416558064f8f94ecd2e20df1"

    /**
     * The minimized GraphQL document being sent to the server to save a few bytes.
     * The un-minimized version is:
     *
     * query getFollowingOrgsEvents($first: Int, $after: String) {
     *   me {
     *     data {
     *       followingOrgsEvents(first: $first, after: $after) {
     *         pageInfo {
     *           __typename
     *           ...PageInfo
     *         }
     *         list {
     *           id
     *           info
     *           title
     *           posterUrl
     *           startTimestamp
     *           endTimestamp
     *           registrantsCount
     *           registerStatus
     *           status
     *           organizer {
     *             __typename
     *             ...Organizer
     *           }
     *           lightInfo {
     *             hasRaffle
     *             hasW3ST
     *           }
     *         }
     *       }
     *     }
     *   }
     * }
     *
     * fragment PageInfo on PageInfo {
     *   startCursor
     *   endCursor
     *   hasNextPage
     *   hasPreviousPage
     * }
     *
     * fragment Organizer on Organization {
     *   twitterId
     *   id
     *   followersCount
     *   verification
     *   currentAccess
     *   lightInfo {
     *     isFollowing
     *     displayName
     *     profilePicture
     *     profileHandle
     *   }
     * }
     */
    public val OPERATION_DOCUMENT: String
      get() =
          "query getFollowingOrgsEvents(${'$'}first: Int, ${'$'}after: String) { me { data { followingOrgsEvents(first: ${'$'}first, after: ${'$'}after) { pageInfo { __typename ...PageInfo } list { id info title posterUrl startTimestamp endTimestamp registrantsCount registerStatus status organizer { __typename ...Organizer } lightInfo { hasRaffle hasW3ST } } } } } }  fragment PageInfo on PageInfo { startCursor endCursor hasNextPage hasPreviousPage }  fragment Organizer on Organization { twitterId id followersCount verification currentAccess lightInfo { isFollowing displayName profilePicture profileHandle } }"

    public const val OPERATION_NAME: String = "getFollowingOrgsEvents"
  }
}
