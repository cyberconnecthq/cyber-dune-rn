//
// AUTO-GENERATED FILE. DO NOT MODIFY.
//
// This class was automatically generated by Apollo GraphQL version '3.8.2'.
//
package com.cyberconnect.link3.adapter

import com.apollographql.apollo3.api.Adapter
import com.apollographql.apollo3.api.CustomScalarAdapters
import com.apollographql.apollo3.api.StringAdapter
import com.apollographql.apollo3.api.json.JsonReader
import com.apollographql.apollo3.api.json.JsonWriter
import com.apollographql.apollo3.api.list
import com.apollographql.apollo3.api.obj
import com.cyberconnect.link3.GetRecomendedEventsQuery
import kotlin.String
import kotlin.Unit

public object GetRecomendedEventsQuery_ResponseAdapter {
  public object Data : Adapter<GetRecomendedEventsQuery.Data> {
    public val RESPONSE_NAMES: kotlin.collections.List<String> = listOf("trendingEvents")

    public override fun fromJson(reader: JsonReader, customScalarAdapters: CustomScalarAdapters):
        GetRecomendedEventsQuery.Data {
      var _trendingEvents: GetRecomendedEventsQuery.TrendingEvents? = null

      while(true) {
        when (reader.selectName(RESPONSE_NAMES)) {
          0 -> _trendingEvents = TrendingEvents.obj().fromJson(reader, customScalarAdapters)
          else -> break
        }
      }

      return GetRecomendedEventsQuery.Data(
        trendingEvents = _trendingEvents!!
      )
    }

    public override fun toJson(
      writer: JsonWriter,
      customScalarAdapters: CustomScalarAdapters,
      `value`: GetRecomendedEventsQuery.Data,
    ): Unit {
      writer.name("trendingEvents")
      TrendingEvents.obj().toJson(writer, customScalarAdapters, value.trendingEvents)
    }
  }

  public object TrendingEvents : Adapter<GetRecomendedEventsQuery.TrendingEvents> {
    public val RESPONSE_NAMES: kotlin.collections.List<String> = listOf("list")

    public override fun fromJson(reader: JsonReader, customScalarAdapters: CustomScalarAdapters):
        GetRecomendedEventsQuery.TrendingEvents {
      var _list: kotlin.collections.List<GetRecomendedEventsQuery.List>? = null

      while(true) {
        when (reader.selectName(RESPONSE_NAMES)) {
          0 -> _list = List.obj(true).list().fromJson(reader, customScalarAdapters)
          else -> break
        }
      }

      return GetRecomendedEventsQuery.TrendingEvents(
        list = _list!!
      )
    }

    public override fun toJson(
      writer: JsonWriter,
      customScalarAdapters: CustomScalarAdapters,
      `value`: GetRecomendedEventsQuery.TrendingEvents,
    ): Unit {
      writer.name("list")
      List.obj(true).list().toJson(writer, customScalarAdapters, value.list)
    }
  }

  public object List : Adapter<GetRecomendedEventsQuery.List> {
    public val RESPONSE_NAMES: kotlin.collections.List<String> = listOf("__typename")

    public override fun fromJson(reader: JsonReader, customScalarAdapters: CustomScalarAdapters):
        GetRecomendedEventsQuery.List {
      var __typename: String? = null

      while(true) {
        when (reader.selectName(RESPONSE_NAMES)) {
          0 -> __typename = StringAdapter.fromJson(reader, customScalarAdapters)
          else -> break
        }
      }

      reader.rewind()
      val _posterEventCard = com.cyberconnect.link3.fragment.PosterEventCardImpl_ResponseAdapter.PosterEventCard.fromJson(reader,
          customScalarAdapters)

      return GetRecomendedEventsQuery.List(
        __typename = __typename!!,
        posterEventCard = _posterEventCard
      )
    }

    public override fun toJson(
      writer: JsonWriter,
      customScalarAdapters: CustomScalarAdapters,
      `value`: GetRecomendedEventsQuery.List,
    ): Unit {
      writer.name("__typename")
      StringAdapter.toJson(writer, customScalarAdapters, value.__typename)

      com.cyberconnect.link3.fragment.PosterEventCardImpl_ResponseAdapter.PosterEventCard.toJson(writer,
          customScalarAdapters, value.posterEventCard)
    }
  }
}
