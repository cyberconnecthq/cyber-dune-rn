//
// AUTO-GENERATED FILE. DO NOT MODIFY.
//
// This class was automatically generated by Apollo GraphQL version '3.8.2'.
//
package com.cyberconnect.link3

import com.apollographql.apollo3.annotations.ApolloAdaptableWith
import com.apollographql.apollo3.api.Adapter
import com.apollographql.apollo3.api.CompiledField
import com.apollographql.apollo3.api.CustomScalarAdapters
import com.apollographql.apollo3.api.Optional
import com.apollographql.apollo3.api.Query
import com.apollographql.apollo3.api.json.JsonWriter
import com.apollographql.apollo3.api.obj
import com.cyberconnect.link3.adapter.IndividualConnectionsQuery_ResponseAdapter
import com.cyberconnect.link3.adapter.IndividualConnectionsQuery_VariablesAdapter
import com.cyberconnect.link3.fragment.ConnectionPersonalProfile
import com.cyberconnect.link3.selections.IndividualConnectionsQuerySelections
import kotlin.String
import kotlin.Unit

public data class IndividualConnectionsQuery(
  public val after: Optional<String?> = Optional.Absent,
) : Query<IndividualConnectionsQuery.Data> {
  public override fun id(): String = OPERATION_ID

  public override fun document(): String = OPERATION_DOCUMENT

  public override fun name(): String = OPERATION_NAME

  public override fun serializeVariables(writer: JsonWriter,
      customScalarAdapters: CustomScalarAdapters): Unit {
    IndividualConnectionsQuery_VariablesAdapter.toJson(writer, customScalarAdapters, this)
  }

  public override fun adapter(): Adapter<Data> =
      IndividualConnectionsQuery_ResponseAdapter.Data.obj()

  public override fun rootField(): CompiledField = CompiledField.Builder(
    name = "data",
    type = com.cyberconnect.link3.type.Query.type
  )
  .selections(selections = IndividualConnectionsQuerySelections.__root)
  .build()

  @ApolloAdaptableWith(IndividualConnectionsQuery_ResponseAdapter.Data::class)
  public data class Data(
    public val recommended: Recommended,
  ) : Query.Data

  public data class Recommended(
    public val `data`: Data1?,
  )

  public data class Data1(
    public val recommendedProfiles: RecommendedProfiles,
  )

  public data class RecommendedProfiles(
    public val list: kotlin.collections.List<List>,
    public val pageInfo: PageInfo,
  )

  public data class List(
    public val __typename: String,
    /**
     * Synthetic field for 'ConnectionPersonalProfile'
     */
    public val connectionPersonalProfile: ConnectionPersonalProfile?,
  )

  public data class PageInfo(
    public val __typename: String,
    /**
     * Synthetic field for 'PageInfo'
     */
    public val pageInfo: com.cyberconnect.link3.fragment.PageInfo,
  )

  public companion object {
    public const val OPERATION_ID: String =
        "302bd29db25414e9bbed169828931c11cfc2af7e247afaa6c18d3eadd99123a3"

    /**
     * The minimized GraphQL document being sent to the server to save a few bytes.
     * The un-minimized version is:
     *
     * query individualConnections($after: String) {
     *   recommended: me {
     *     data {
     *       recommendedProfiles(first: 12, after: $after) {
     *         list {
     *           __typename
     *           ...ConnectionPersonalProfile
     *         }
     *         pageInfo {
     *           __typename
     *           ...PageInfo
     *         }
     *       }
     *     }
     *   }
     * }
     *
     * fragment ConnectionPersonalProfile on PerProfile {
     *   id
     *   handle
     *   owner {
     *     id
     *     price {
     *       price {
     *         value
     *         decimal
     *       }
     *     }
     *     lightInfo {
     *       attestation {
     *         uid
     *       }
     *     }
     *   }
     *   headline {
     *     displayName
     *     title
     *   }
     *   displayName {
     *     displayName
     *     type
     *   }
     *   profilePicture {
     *     picture
     *   }
     *   connectStatus
     *   connectionDegree
     *   reputation {
     *     total
     *   }
     *   isVerified
     *   mutualConnections {
     *     list {
     *       __typename
     *       handle
     *       id
     *       ... on PerProfile {
     *         profilePicture {
     *           picture
     *         }
     *         displayName {
     *           displayName
     *         }
     *       }
     *     }
     *   }
     * }
     *
     * fragment PageInfo on PageInfo {
     *   startCursor
     *   endCursor
     *   hasNextPage
     *   hasPreviousPage
     * }
     */
    public val OPERATION_DOCUMENT: String
      get() =
          "query individualConnections(${'$'}after: String) { recommended: me { data { recommendedProfiles(first: 12, after: ${'$'}after) { list { __typename ...ConnectionPersonalProfile } pageInfo { __typename ...PageInfo } } } } }  fragment ConnectionPersonalProfile on PerProfile { id handle owner { id price { price { value decimal } } lightInfo { attestation { uid } } } headline { displayName title } displayName { displayName type } profilePicture { picture } connectStatus connectionDegree reputation { total } isVerified mutualConnections { list { __typename handle id ... on PerProfile { profilePicture { picture } displayName { displayName } } } } }  fragment PageInfo on PageInfo { startCursor endCursor hasNextPage hasPreviousPage }"

    public const val OPERATION_NAME: String = "individualConnections"
  }
}
