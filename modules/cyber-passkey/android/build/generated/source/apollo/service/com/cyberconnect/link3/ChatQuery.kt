//
// AUTO-GENERATED FILE. DO NOT MODIFY.
//
// This class was automatically generated by Apollo GraphQL version '3.8.2'.
//
package com.cyberconnect.link3

import com.apollographql.apollo3.annotations.ApolloAdaptableWith
import com.apollographql.apollo3.api.Adapter
import com.apollographql.apollo3.api.CompiledField
import com.apollographql.apollo3.api.CustomScalarAdapters
import com.apollographql.apollo3.api.Optional
import com.apollographql.apollo3.api.Query
import com.apollographql.apollo3.api.json.JsonWriter
import com.apollographql.apollo3.api.obj
import com.cyberconnect.link3.adapter.ChatQuery_ResponseAdapter
import com.cyberconnect.link3.adapter.ChatQuery_VariablesAdapter
import com.cyberconnect.link3.fragment.PerMessage
import com.cyberconnect.link3.selections.ChatQuerySelections
import kotlin.Boolean
import kotlin.Int
import kotlin.String
import kotlin.Unit

public data class ChatQuery(
  public val id: String,
  public val after: Optional<String?> = Optional.Absent,
  public val first: Optional<Int?> = Optional.Absent,
) : Query<ChatQuery.Data> {
  public override fun id(): String = OPERATION_ID

  public override fun document(): String = OPERATION_DOCUMENT

  public override fun name(): String = OPERATION_NAME

  public override fun serializeVariables(writer: JsonWriter,
      customScalarAdapters: CustomScalarAdapters): Unit {
    ChatQuery_VariablesAdapter.toJson(writer, customScalarAdapters, this)
  }

  public override fun adapter(): Adapter<Data> = ChatQuery_ResponseAdapter.Data.obj()

  public override fun rootField(): CompiledField = CompiledField.Builder(
    name = "data",
    type = com.cyberconnect.link3.type.Query.type
  )
  .selections(selections = ChatQuerySelections.__root)
  .build()

  @ApolloAdaptableWith(ChatQuery_ResponseAdapter.Data::class)
  public data class Data(
    public val me: Me,
  ) : Query.Data

  public data class Me(
    public val `data`: Data1?,
  )

  public data class Data1(
    public val chat: Chat?,
  )

  public data class Chat(
    public val receiverDeleted: Boolean,
    public val lastMessage: LastMessage?,
    /**
     * default direction is NEXT
     */
    public val messages: Messages,
  )

  public data class LastMessage(
    public val __typename: String,
    /**
     * Synthetic field for 'PerMessage'
     */
    public val perMessage: PerMessage,
  )

  public data class Messages(
    public val list: kotlin.collections.List<List>,
    public val pageInfo: PageInfo,
  )

  public data class List(
    public val __typename: String,
    /**
     * Synthetic field for 'PerMessage'
     */
    public val perMessage: PerMessage,
  )

  public data class PageInfo(
    public val __typename: String,
    /**
     * Synthetic field for 'PageInfo'
     */
    public val pageInfo: com.cyberconnect.link3.fragment.PageInfo,
  )

  public companion object {
    public const val OPERATION_ID: String =
        "bda99ef853e2bd4363dd9e693a4c152d68146d4ae9809f82f135f927fe524bbc"

    /**
     * The minimized GraphQL document being sent to the server to save a few bytes.
     * The un-minimized version is:
     *
     * query chat($id: ID!, $after: String, $first: Int = 20 ) {
     *   me {
     *     data {
     *       chat(id: $id) {
     *         receiverDeleted
     *         lastMessage {
     *           __typename
     *           ...PerMessage
     *         }
     *         messages(first: $first, after: $after, order: PREVIOUS) {
     *           list {
     *             __typename
     *             ...PerMessage
     *           }
     *           pageInfo {
     *             __typename
     *             ...PageInfo
     *           }
     *         }
     *       }
     *     }
     *   }
     * }
     *
     * fragment Price on TokenValue {
     *   currency
     *   decimal
     *   value
     * }
     *
     * fragment PerMessage on Message {
     *   content
     *   id
     *   msgType
     *   paid {
     *     earnValue {
     *       __typename
     *       ...Price
     *     }
     *     status
     *     value {
     *       __typename
     *       ...Price
     *     }
     *     refundAt
     *   }
     *   sender {
     *     lightInfo {
     *       displayName
     *       handle
     *       avatar
     *     }
     *   }
     *   chatUser {
     *     lightInfo {
     *       displayName
     *       handle
     *       avatar
     *     }
     *   }
     *   msgTime
     *   replyToEarn
     *   status
     * }
     *
     * fragment PageInfo on PageInfo {
     *   startCursor
     *   endCursor
     *   hasNextPage
     *   hasPreviousPage
     * }
     */
    public val OPERATION_DOCUMENT: String
      get() =
          "query chat(${'$'}id: ID!, ${'$'}after: String, ${'$'}first: Int = 20 ) { me { data { chat(id: ${'$'}id) { receiverDeleted lastMessage { __typename ...PerMessage } messages(first: ${'$'}first, after: ${'$'}after, order: PREVIOUS) { list { __typename ...PerMessage } pageInfo { __typename ...PageInfo } } } } } }  fragment Price on TokenValue { currency decimal value }  fragment PerMessage on Message { content id msgType paid { earnValue { __typename ...Price } status value { __typename ...Price } refundAt } sender { lightInfo { displayName handle avatar } } chatUser { lightInfo { displayName handle avatar } } msgTime replyToEarn status }  fragment PageInfo on PageInfo { startCursor endCursor hasNextPage hasPreviousPage }"

    public const val OPERATION_NAME: String = "chat"
  }
}
