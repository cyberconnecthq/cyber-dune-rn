//
// AUTO-GENERATED FILE. DO NOT MODIFY.
//
// This class was automatically generated by Apollo GraphQL version '3.8.2'.
//
package com.cyberconnect.link3.adapter

import com.apollographql.apollo3.api.Adapter
import com.apollographql.apollo3.api.AnyAdapter
import com.apollographql.apollo3.api.BooleanAdapter
import com.apollographql.apollo3.api.CustomScalarAdapters
import com.apollographql.apollo3.api.NullableStringAdapter
import com.apollographql.apollo3.api.StringAdapter
import com.apollographql.apollo3.api.evaluate
import com.apollographql.apollo3.api.json.JsonReader
import com.apollographql.apollo3.api.json.JsonWriter
import com.apollographql.apollo3.api.list
import com.apollographql.apollo3.api.nullable
import com.apollographql.apollo3.api.obj
import com.apollographql.apollo3.api.possibleTypes
import com.cyberconnect.link3.MyRecommendationQuery
import kotlin.Any
import kotlin.Boolean
import kotlin.String
import kotlin.Unit
import kotlin.collections.List

public object MyRecommendationQuery_ResponseAdapter {
  public object Data : Adapter<MyRecommendationQuery.Data> {
    public val RESPONSE_NAMES: List<String> = listOf("me")

    public override fun fromJson(reader: JsonReader, customScalarAdapters: CustomScalarAdapters):
        MyRecommendationQuery.Data {
      var _me: MyRecommendationQuery.Me? = null

      while(true) {
        when (reader.selectName(RESPONSE_NAMES)) {
          0 -> _me = Me.obj().fromJson(reader, customScalarAdapters)
          else -> break
        }
      }

      return MyRecommendationQuery.Data(
        me = _me!!
      )
    }

    public override fun toJson(
      writer: JsonWriter,
      customScalarAdapters: CustomScalarAdapters,
      `value`: MyRecommendationQuery.Data,
    ): Unit {
      writer.name("me")
      Me.obj().toJson(writer, customScalarAdapters, value.me)
    }
  }

  public object Me : Adapter<MyRecommendationQuery.Me> {
    public val RESPONSE_NAMES: List<String> = listOf("data")

    public override fun fromJson(reader: JsonReader, customScalarAdapters: CustomScalarAdapters):
        MyRecommendationQuery.Me {
      var _data: MyRecommendationQuery.Data1? = null

      while(true) {
        when (reader.selectName(RESPONSE_NAMES)) {
          0 -> _data = Data1.obj().nullable().fromJson(reader, customScalarAdapters)
          else -> break
        }
      }

      return MyRecommendationQuery.Me(
        `data` = _data
      )
    }

    public override fun toJson(
      writer: JsonWriter,
      customScalarAdapters: CustomScalarAdapters,
      `value`: MyRecommendationQuery.Me,
    ): Unit {
      writer.name("data")
      Data1.obj().nullable().toJson(writer, customScalarAdapters, value.`data`)
    }
  }

  public object Data1 : Adapter<MyRecommendationQuery.Data1> {
    public val RESPONSE_NAMES: List<String> = listOf("myRecommendations")

    public override fun fromJson(reader: JsonReader, customScalarAdapters: CustomScalarAdapters):
        MyRecommendationQuery.Data1 {
      var _myRecommendations: MyRecommendationQuery.MyRecommendations? = null

      while(true) {
        when (reader.selectName(RESPONSE_NAMES)) {
          0 -> _myRecommendations = MyRecommendations.obj().fromJson(reader, customScalarAdapters)
          else -> break
        }
      }

      return MyRecommendationQuery.Data1(
        myRecommendations = _myRecommendations!!
      )
    }

    public override fun toJson(
      writer: JsonWriter,
      customScalarAdapters: CustomScalarAdapters,
      `value`: MyRecommendationQuery.Data1,
    ): Unit {
      writer.name("myRecommendations")
      MyRecommendations.obj().toJson(writer, customScalarAdapters, value.myRecommendations)
    }
  }

  public object MyRecommendations : Adapter<MyRecommendationQuery.MyRecommendations> {
    public val RESPONSE_NAMES: List<String> = listOf("received", "given")

    public override fun fromJson(reader: JsonReader, customScalarAdapters: CustomScalarAdapters):
        MyRecommendationQuery.MyRecommendations {
      var _received: List<MyRecommendationQuery.Received>? = null
      var _given: List<MyRecommendationQuery.Given>? = null

      while(true) {
        when (reader.selectName(RESPONSE_NAMES)) {
          0 -> _received = Received.obj().list().fromJson(reader, customScalarAdapters)
          1 -> _given = Given.obj().list().fromJson(reader, customScalarAdapters)
          else -> break
        }
      }

      return MyRecommendationQuery.MyRecommendations(
        received = _received!!,
        given = _given!!
      )
    }

    public override fun toJson(
      writer: JsonWriter,
      customScalarAdapters: CustomScalarAdapters,
      `value`: MyRecommendationQuery.MyRecommendations,
    ): Unit {
      writer.name("received")
      Received.obj().list().toJson(writer, customScalarAdapters, value.received)

      writer.name("given")
      Given.obj().list().toJson(writer, customScalarAdapters, value.given)
    }
  }

  public object Received : Adapter<MyRecommendationQuery.Received> {
    public val RESPONSE_NAMES: List<String> = listOf("hidden", "content", "user")

    public override fun fromJson(reader: JsonReader, customScalarAdapters: CustomScalarAdapters):
        MyRecommendationQuery.Received {
      var _hidden: Boolean? = null
      var _content: String? = null
      var _user: MyRecommendationQuery.User? = null

      while(true) {
        when (reader.selectName(RESPONSE_NAMES)) {
          0 -> _hidden = BooleanAdapter.fromJson(reader, customScalarAdapters)
          1 -> _content = StringAdapter.fromJson(reader, customScalarAdapters)
          2 -> _user = User.obj().fromJson(reader, customScalarAdapters)
          else -> break
        }
      }

      return MyRecommendationQuery.Received(
        hidden = _hidden!!,
        content = _content!!,
        user = _user!!
      )
    }

    public override fun toJson(
      writer: JsonWriter,
      customScalarAdapters: CustomScalarAdapters,
      `value`: MyRecommendationQuery.Received,
    ): Unit {
      writer.name("hidden")
      BooleanAdapter.toJson(writer, customScalarAdapters, value.hidden)

      writer.name("content")
      StringAdapter.toJson(writer, customScalarAdapters, value.content)

      writer.name("user")
      User.obj().toJson(writer, customScalarAdapters, value.user)
    }
  }

  public object User : Adapter<MyRecommendationQuery.User> {
    public val RESPONSE_NAMES: List<String> = listOf("id", "lightInfo", "profile")

    public override fun fromJson(reader: JsonReader, customScalarAdapters: CustomScalarAdapters):
        MyRecommendationQuery.User {
      var _id: String? = null
      var _lightInfo: MyRecommendationQuery.LightInfo? = null
      var _profile: MyRecommendationQuery.Profile? = null

      while(true) {
        when (reader.selectName(RESPONSE_NAMES)) {
          0 -> _id = StringAdapter.fromJson(reader, customScalarAdapters)
          1 -> _lightInfo = LightInfo.obj().fromJson(reader, customScalarAdapters)
          2 -> _profile = Profile.obj(true).nullable().fromJson(reader, customScalarAdapters)
          else -> break
        }
      }

      return MyRecommendationQuery.User(
        id = _id!!,
        lightInfo = _lightInfo!!,
        profile = _profile
      )
    }

    public override fun toJson(
      writer: JsonWriter,
      customScalarAdapters: CustomScalarAdapters,
      `value`: MyRecommendationQuery.User,
    ): Unit {
      writer.name("id")
      StringAdapter.toJson(writer, customScalarAdapters, value.id)

      writer.name("lightInfo")
      LightInfo.obj().toJson(writer, customScalarAdapters, value.lightInfo)

      writer.name("profile")
      Profile.obj(true).nullable().toJson(writer, customScalarAdapters, value.profile)
    }
  }

  public object LightInfo : Adapter<MyRecommendationQuery.LightInfo> {
    public val RESPONSE_NAMES: List<String> = listOf("handle", "avatar", "displayName",
        "formattedAddress")

    public override fun fromJson(reader: JsonReader, customScalarAdapters: CustomScalarAdapters):
        MyRecommendationQuery.LightInfo {
      var _handle: String? = null
      var _avatar: String? = null
      var _displayName: String? = null
      var _formattedAddress: String? = null

      while(true) {
        when (reader.selectName(RESPONSE_NAMES)) {
          0 -> _handle = StringAdapter.fromJson(reader, customScalarAdapters)
          1 -> _avatar = StringAdapter.fromJson(reader, customScalarAdapters)
          2 -> _displayName = StringAdapter.fromJson(reader, customScalarAdapters)
          3 -> _formattedAddress = StringAdapter.fromJson(reader, customScalarAdapters)
          else -> break
        }
      }

      return MyRecommendationQuery.LightInfo(
        handle = _handle!!,
        avatar = _avatar!!,
        displayName = _displayName!!,
        formattedAddress = _formattedAddress!!
      )
    }

    public override fun toJson(
      writer: JsonWriter,
      customScalarAdapters: CustomScalarAdapters,
      `value`: MyRecommendationQuery.LightInfo,
    ): Unit {
      writer.name("handle")
      StringAdapter.toJson(writer, customScalarAdapters, value.handle)

      writer.name("avatar")
      StringAdapter.toJson(writer, customScalarAdapters, value.avatar)

      writer.name("displayName")
      StringAdapter.toJson(writer, customScalarAdapters, value.displayName)

      writer.name("formattedAddress")
      StringAdapter.toJson(writer, customScalarAdapters, value.formattedAddress)
    }
  }

  public object Profile : Adapter<MyRecommendationQuery.Profile> {
    public val RESPONSE_NAMES: List<String> = listOf("__typename", "id")

    public override fun fromJson(reader: JsonReader, customScalarAdapters: CustomScalarAdapters):
        MyRecommendationQuery.Profile {
      var __typename: String? = null
      var _id: String? = null

      while(true) {
        when (reader.selectName(RESPONSE_NAMES)) {
          0 -> __typename = StringAdapter.fromJson(reader, customScalarAdapters)
          1 -> _id = StringAdapter.fromJson(reader, customScalarAdapters)
          else -> break
        }
      }

      check(__typename != null) {
        "__typename was not found"
      }

      var _onPerProfile: MyRecommendationQuery.OnPerProfile? = null
      if (possibleTypes("PerProfile").evaluate(customScalarAdapters.adapterContext.variables(), __typename, customScalarAdapters.adapterContext, null)) {
        reader.rewind()
        _onPerProfile = com.cyberconnect.link3.adapter.MyRecommendationQuery_ResponseAdapter.OnPerProfile.fromJson(reader,
            customScalarAdapters)
      }

      return MyRecommendationQuery.Profile(
        __typename = __typename,
        id = _id!!,
        onPerProfile = _onPerProfile
      )
    }

    public override fun toJson(
      writer: JsonWriter,
      customScalarAdapters: CustomScalarAdapters,
      `value`: MyRecommendationQuery.Profile,
    ): Unit {
      writer.name("__typename")
      StringAdapter.toJson(writer, customScalarAdapters, value.__typename)

      writer.name("id")
      StringAdapter.toJson(writer, customScalarAdapters, value.id)

      if (value.onPerProfile != null) {
        com.cyberconnect.link3.adapter.MyRecommendationQuery_ResponseAdapter.OnPerProfile.toJson(writer,
            customScalarAdapters, value.onPerProfile)
      }
    }
  }

  public object OnPerProfile : Adapter<MyRecommendationQuery.OnPerProfile> {
    public val RESPONSE_NAMES: List<String> = listOf("headline", "isVerified")

    public override fun fromJson(reader: JsonReader, customScalarAdapters: CustomScalarAdapters):
        MyRecommendationQuery.OnPerProfile {
      var _headline: MyRecommendationQuery.Headline? = null
      var _isVerified: Boolean? = null

      while(true) {
        when (reader.selectName(RESPONSE_NAMES)) {
          0 -> _headline = Headline.obj().fromJson(reader, customScalarAdapters)
          1 -> _isVerified = BooleanAdapter.fromJson(reader, customScalarAdapters)
          else -> break
        }
      }

      return MyRecommendationQuery.OnPerProfile(
        headline = _headline!!,
        isVerified = _isVerified!!
      )
    }

    public override fun toJson(
      writer: JsonWriter,
      customScalarAdapters: CustomScalarAdapters,
      `value`: MyRecommendationQuery.OnPerProfile,
    ): Unit {
      writer.name("headline")
      Headline.obj().toJson(writer, customScalarAdapters, value.headline)

      writer.name("isVerified")
      BooleanAdapter.toJson(writer, customScalarAdapters, value.isVerified)
    }
  }

  public object Headline : Adapter<MyRecommendationQuery.Headline> {
    public val RESPONSE_NAMES: List<String> = listOf("twitterId", "twitterHandle", "displayName",
        "avatar", "title", "profileId")

    public override fun fromJson(reader: JsonReader, customScalarAdapters: CustomScalarAdapters):
        MyRecommendationQuery.Headline {
      var _twitterId: String? = null
      var _twitterHandle: String? = null
      var _displayName: String? = null
      var _avatar: Any? = null
      var _title: String? = null
      var _profileId: String? = null

      while(true) {
        when (reader.selectName(RESPONSE_NAMES)) {
          0 -> _twitterId = StringAdapter.fromJson(reader, customScalarAdapters)
          1 -> _twitterHandle = StringAdapter.fromJson(reader, customScalarAdapters)
          2 -> _displayName = StringAdapter.fromJson(reader, customScalarAdapters)
          3 -> _avatar = AnyAdapter.fromJson(reader, customScalarAdapters)
          4 -> _title = StringAdapter.fromJson(reader, customScalarAdapters)
          5 -> _profileId = NullableStringAdapter.fromJson(reader, customScalarAdapters)
          else -> break
        }
      }

      return MyRecommendationQuery.Headline(
        twitterId = _twitterId!!,
        twitterHandle = _twitterHandle!!,
        displayName = _displayName!!,
        avatar = _avatar!!,
        title = _title!!,
        profileId = _profileId
      )
    }

    public override fun toJson(
      writer: JsonWriter,
      customScalarAdapters: CustomScalarAdapters,
      `value`: MyRecommendationQuery.Headline,
    ): Unit {
      writer.name("twitterId")
      StringAdapter.toJson(writer, customScalarAdapters, value.twitterId)

      writer.name("twitterHandle")
      StringAdapter.toJson(writer, customScalarAdapters, value.twitterHandle)

      writer.name("displayName")
      StringAdapter.toJson(writer, customScalarAdapters, value.displayName)

      writer.name("avatar")
      AnyAdapter.toJson(writer, customScalarAdapters, value.avatar)

      writer.name("title")
      StringAdapter.toJson(writer, customScalarAdapters, value.title)

      writer.name("profileId")
      NullableStringAdapter.toJson(writer, customScalarAdapters, value.profileId)
    }
  }

  public object Given : Adapter<MyRecommendationQuery.Given> {
    public val RESPONSE_NAMES: List<String> = listOf("hidden", "content", "user")

    public override fun fromJson(reader: JsonReader, customScalarAdapters: CustomScalarAdapters):
        MyRecommendationQuery.Given {
      var _hidden: Boolean? = null
      var _content: String? = null
      var _user: MyRecommendationQuery.User1? = null

      while(true) {
        when (reader.selectName(RESPONSE_NAMES)) {
          0 -> _hidden = BooleanAdapter.fromJson(reader, customScalarAdapters)
          1 -> _content = StringAdapter.fromJson(reader, customScalarAdapters)
          2 -> _user = User1.obj().fromJson(reader, customScalarAdapters)
          else -> break
        }
      }

      return MyRecommendationQuery.Given(
        hidden = _hidden!!,
        content = _content!!,
        user = _user!!
      )
    }

    public override fun toJson(
      writer: JsonWriter,
      customScalarAdapters: CustomScalarAdapters,
      `value`: MyRecommendationQuery.Given,
    ): Unit {
      writer.name("hidden")
      BooleanAdapter.toJson(writer, customScalarAdapters, value.hidden)

      writer.name("content")
      StringAdapter.toJson(writer, customScalarAdapters, value.content)

      writer.name("user")
      User1.obj().toJson(writer, customScalarAdapters, value.user)
    }
  }

  public object User1 : Adapter<MyRecommendationQuery.User1> {
    public val RESPONSE_NAMES: List<String> = listOf("id", "lightInfo", "profile")

    public override fun fromJson(reader: JsonReader, customScalarAdapters: CustomScalarAdapters):
        MyRecommendationQuery.User1 {
      var _id: String? = null
      var _lightInfo: MyRecommendationQuery.LightInfo1? = null
      var _profile: MyRecommendationQuery.Profile1? = null

      while(true) {
        when (reader.selectName(RESPONSE_NAMES)) {
          0 -> _id = StringAdapter.fromJson(reader, customScalarAdapters)
          1 -> _lightInfo = LightInfo1.obj().fromJson(reader, customScalarAdapters)
          2 -> _profile = Profile1.obj(true).nullable().fromJson(reader, customScalarAdapters)
          else -> break
        }
      }

      return MyRecommendationQuery.User1(
        id = _id!!,
        lightInfo = _lightInfo!!,
        profile = _profile
      )
    }

    public override fun toJson(
      writer: JsonWriter,
      customScalarAdapters: CustomScalarAdapters,
      `value`: MyRecommendationQuery.User1,
    ): Unit {
      writer.name("id")
      StringAdapter.toJson(writer, customScalarAdapters, value.id)

      writer.name("lightInfo")
      LightInfo1.obj().toJson(writer, customScalarAdapters, value.lightInfo)

      writer.name("profile")
      Profile1.obj(true).nullable().toJson(writer, customScalarAdapters, value.profile)
    }
  }

  public object LightInfo1 : Adapter<MyRecommendationQuery.LightInfo1> {
    public val RESPONSE_NAMES: List<String> = listOf("handle", "avatar", "displayName",
        "formattedAddress")

    public override fun fromJson(reader: JsonReader, customScalarAdapters: CustomScalarAdapters):
        MyRecommendationQuery.LightInfo1 {
      var _handle: String? = null
      var _avatar: String? = null
      var _displayName: String? = null
      var _formattedAddress: String? = null

      while(true) {
        when (reader.selectName(RESPONSE_NAMES)) {
          0 -> _handle = StringAdapter.fromJson(reader, customScalarAdapters)
          1 -> _avatar = StringAdapter.fromJson(reader, customScalarAdapters)
          2 -> _displayName = StringAdapter.fromJson(reader, customScalarAdapters)
          3 -> _formattedAddress = StringAdapter.fromJson(reader, customScalarAdapters)
          else -> break
        }
      }

      return MyRecommendationQuery.LightInfo1(
        handle = _handle!!,
        avatar = _avatar!!,
        displayName = _displayName!!,
        formattedAddress = _formattedAddress!!
      )
    }

    public override fun toJson(
      writer: JsonWriter,
      customScalarAdapters: CustomScalarAdapters,
      `value`: MyRecommendationQuery.LightInfo1,
    ): Unit {
      writer.name("handle")
      StringAdapter.toJson(writer, customScalarAdapters, value.handle)

      writer.name("avatar")
      StringAdapter.toJson(writer, customScalarAdapters, value.avatar)

      writer.name("displayName")
      StringAdapter.toJson(writer, customScalarAdapters, value.displayName)

      writer.name("formattedAddress")
      StringAdapter.toJson(writer, customScalarAdapters, value.formattedAddress)
    }
  }

  public object Profile1 : Adapter<MyRecommendationQuery.Profile1> {
    public val RESPONSE_NAMES: List<String> = listOf("__typename", "id")

    public override fun fromJson(reader: JsonReader, customScalarAdapters: CustomScalarAdapters):
        MyRecommendationQuery.Profile1 {
      var __typename: String? = null
      var _id: String? = null

      while(true) {
        when (reader.selectName(RESPONSE_NAMES)) {
          0 -> __typename = StringAdapter.fromJson(reader, customScalarAdapters)
          1 -> _id = StringAdapter.fromJson(reader, customScalarAdapters)
          else -> break
        }
      }

      check(__typename != null) {
        "__typename was not found"
      }

      var _onPerProfile: MyRecommendationQuery.OnPerProfile1? = null
      if (possibleTypes("PerProfile").evaluate(customScalarAdapters.adapterContext.variables(), __typename, customScalarAdapters.adapterContext, null)) {
        reader.rewind()
        _onPerProfile = com.cyberconnect.link3.adapter.MyRecommendationQuery_ResponseAdapter.OnPerProfile1.fromJson(reader,
            customScalarAdapters)
      }

      return MyRecommendationQuery.Profile1(
        __typename = __typename,
        id = _id!!,
        onPerProfile = _onPerProfile
      )
    }

    public override fun toJson(
      writer: JsonWriter,
      customScalarAdapters: CustomScalarAdapters,
      `value`: MyRecommendationQuery.Profile1,
    ): Unit {
      writer.name("__typename")
      StringAdapter.toJson(writer, customScalarAdapters, value.__typename)

      writer.name("id")
      StringAdapter.toJson(writer, customScalarAdapters, value.id)

      if (value.onPerProfile != null) {
        com.cyberconnect.link3.adapter.MyRecommendationQuery_ResponseAdapter.OnPerProfile1.toJson(writer,
            customScalarAdapters, value.onPerProfile)
      }
    }
  }

  public object OnPerProfile1 : Adapter<MyRecommendationQuery.OnPerProfile1> {
    public val RESPONSE_NAMES: List<String> = listOf("headline", "isVerified")

    public override fun fromJson(reader: JsonReader, customScalarAdapters: CustomScalarAdapters):
        MyRecommendationQuery.OnPerProfile1 {
      var _headline: MyRecommendationQuery.Headline1? = null
      var _isVerified: Boolean? = null

      while(true) {
        when (reader.selectName(RESPONSE_NAMES)) {
          0 -> _headline = Headline1.obj().fromJson(reader, customScalarAdapters)
          1 -> _isVerified = BooleanAdapter.fromJson(reader, customScalarAdapters)
          else -> break
        }
      }

      return MyRecommendationQuery.OnPerProfile1(
        headline = _headline!!,
        isVerified = _isVerified!!
      )
    }

    public override fun toJson(
      writer: JsonWriter,
      customScalarAdapters: CustomScalarAdapters,
      `value`: MyRecommendationQuery.OnPerProfile1,
    ): Unit {
      writer.name("headline")
      Headline1.obj().toJson(writer, customScalarAdapters, value.headline)

      writer.name("isVerified")
      BooleanAdapter.toJson(writer, customScalarAdapters, value.isVerified)
    }
  }

  public object Headline1 : Adapter<MyRecommendationQuery.Headline1> {
    public val RESPONSE_NAMES: List<String> = listOf("twitterId", "twitterHandle", "displayName",
        "avatar", "title", "profileId")

    public override fun fromJson(reader: JsonReader, customScalarAdapters: CustomScalarAdapters):
        MyRecommendationQuery.Headline1 {
      var _twitterId: String? = null
      var _twitterHandle: String? = null
      var _displayName: String? = null
      var _avatar: Any? = null
      var _title: String? = null
      var _profileId: String? = null

      while(true) {
        when (reader.selectName(RESPONSE_NAMES)) {
          0 -> _twitterId = StringAdapter.fromJson(reader, customScalarAdapters)
          1 -> _twitterHandle = StringAdapter.fromJson(reader, customScalarAdapters)
          2 -> _displayName = StringAdapter.fromJson(reader, customScalarAdapters)
          3 -> _avatar = AnyAdapter.fromJson(reader, customScalarAdapters)
          4 -> _title = StringAdapter.fromJson(reader, customScalarAdapters)
          5 -> _profileId = NullableStringAdapter.fromJson(reader, customScalarAdapters)
          else -> break
        }
      }

      return MyRecommendationQuery.Headline1(
        twitterId = _twitterId!!,
        twitterHandle = _twitterHandle!!,
        displayName = _displayName!!,
        avatar = _avatar!!,
        title = _title!!,
        profileId = _profileId
      )
    }

    public override fun toJson(
      writer: JsonWriter,
      customScalarAdapters: CustomScalarAdapters,
      `value`: MyRecommendationQuery.Headline1,
    ): Unit {
      writer.name("twitterId")
      StringAdapter.toJson(writer, customScalarAdapters, value.twitterId)

      writer.name("twitterHandle")
      StringAdapter.toJson(writer, customScalarAdapters, value.twitterHandle)

      writer.name("displayName")
      StringAdapter.toJson(writer, customScalarAdapters, value.displayName)

      writer.name("avatar")
      AnyAdapter.toJson(writer, customScalarAdapters, value.avatar)

      writer.name("title")
      StringAdapter.toJson(writer, customScalarAdapters, value.title)

      writer.name("profileId")
      NullableStringAdapter.toJson(writer, customScalarAdapters, value.profileId)
    }
  }
}
