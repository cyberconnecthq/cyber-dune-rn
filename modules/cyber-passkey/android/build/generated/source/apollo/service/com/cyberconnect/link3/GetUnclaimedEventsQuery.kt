//
// AUTO-GENERATED FILE. DO NOT MODIFY.
//
// This class was automatically generated by Apollo GraphQL version '3.8.2'.
//
package com.cyberconnect.link3

import com.apollographql.apollo3.annotations.ApolloAdaptableWith
import com.apollographql.apollo3.api.Adapter
import com.apollographql.apollo3.api.CompiledField
import com.apollographql.apollo3.api.CustomScalarAdapters
import com.apollographql.apollo3.api.Query
import com.apollographql.apollo3.api.json.JsonWriter
import com.apollographql.apollo3.api.obj
import com.cyberconnect.link3.adapter.GetUnclaimedEventsQuery_ResponseAdapter
import com.cyberconnect.link3.selections.GetUnclaimedEventsQuerySelections
import com.cyberconnect.link3.type.EventRegisterStatus
import com.cyberconnect.link3.type.EventStatus
import com.cyberconnect.link3.type.MeResponse_Status
import kotlin.Any
import kotlin.Boolean
import kotlin.Int
import kotlin.String
import kotlin.Unit
import kotlin.collections.List

public class GetUnclaimedEventsQuery() : Query<GetUnclaimedEventsQuery.Data> {
  public override fun equals(other: Any?): Boolean = other != null && other::class == this::class

  public override fun hashCode(): Int = this::class.hashCode()

  public override fun id(): String = OPERATION_ID

  public override fun document(): String = OPERATION_DOCUMENT

  public override fun name(): String = OPERATION_NAME

  public override fun serializeVariables(writer: JsonWriter,
      customScalarAdapters: CustomScalarAdapters): Unit {
    // This operation doesn't have any variable
  }

  public override fun adapter(): Adapter<Data> = GetUnclaimedEventsQuery_ResponseAdapter.Data.obj()

  public override fun rootField(): CompiledField = CompiledField.Builder(
    name = "data",
    type = com.cyberconnect.link3.type.Query.type
  )
  .selections(selections = GetUnclaimedEventsQuerySelections.__root)
  .build()

  @ApolloAdaptableWith(GetUnclaimedEventsQuery_ResponseAdapter.Data::class)
  public data class Data(
    public val me: Me,
  ) : Query.Data

  public data class Me(
    public val status: MeResponse_Status,
    public val message: String,
    public val `data`: Data1?,
  )

  public data class Data1(
    public val unclaimedEvents: List<UnclaimedEvent>?,
  )

  public data class UnclaimedEvent(
    public val id: String,
    public val info: String,
    public val title: String,
    public val posterUrl: Any,
    public val startTimestamp: Any,
    public val endTimestamp: Any,
    public val status: EventStatus,
    public val registrantsCount: Int,
    /**
     * current user status
     */
    public val registerStatus: EventRegisterStatus,
    public val organizer: Organizer,
    public val lightInfo: LightInfo,
  )

  public data class Organizer(
    public val __typename: String,
    /**
     * Synthetic field for 'Organizer'
     */
    public val organizer: com.cyberconnect.link3.fragment.Organizer,
  )

  public data class LightInfo(
    public val hasRaffle: Boolean,
    public val hasW3ST: Boolean,
  )

  public companion object {
    public const val OPERATION_ID: String =
        "dddeafe7d2dcb6f55b197d82338b8e55f1d1591d9a43efbe2ab84fd6eff8b1ba"

    /**
     * The minimized GraphQL document being sent to the server to save a few bytes.
     * The un-minimized version is:
     *
     * query getUnclaimedEvents {
     *   me {
     *     status
     *     message
     *     data {
     *       unclaimedEvents {
     *         id
     *         info
     *         title
     *         posterUrl
     *         startTimestamp
     *         endTimestamp
     *         status
     *         registrantsCount
     *         registerStatus
     *         organizer {
     *           __typename
     *           ...Organizer
     *         }
     *         lightInfo {
     *           hasRaffle
     *           hasW3ST
     *         }
     *       }
     *     }
     *   }
     * }
     *
     * fragment Organizer on Organization {
     *   twitterId
     *   id
     *   followersCount
     *   verification
     *   currentAccess
     *   lightInfo {
     *     isFollowing
     *     displayName
     *     profilePicture
     *     profileHandle
     *   }
     * }
     */
    public val OPERATION_DOCUMENT: String
      get() =
          "query getUnclaimedEvents { me { status message data { unclaimedEvents { id info title posterUrl startTimestamp endTimestamp status registrantsCount registerStatus organizer { __typename ...Organizer } lightInfo { hasRaffle hasW3ST } } } } }  fragment Organizer on Organization { twitterId id followersCount verification currentAccess lightInfo { isFollowing displayName profilePicture profileHandle } }"

    public const val OPERATION_NAME: String = "getUnclaimedEvents"
  }
}
