//
// AUTO-GENERATED FILE. DO NOT MODIFY.
//
// This class was automatically generated by Apollo GraphQL version '3.8.2'.
//
package com.cyberconnect.link3

import com.apollographql.apollo3.annotations.ApolloAdaptableWith
import com.apollographql.apollo3.api.Adapter
import com.apollographql.apollo3.api.CompiledField
import com.apollographql.apollo3.api.CustomScalarAdapters
import com.apollographql.apollo3.api.Optional
import com.apollographql.apollo3.api.Query
import com.apollographql.apollo3.api.json.JsonWriter
import com.apollographql.apollo3.api.obj
import com.cyberconnect.link3.adapter.GetPostCommentReplyQuery_ResponseAdapter
import com.cyberconnect.link3.adapter.GetPostCommentReplyQuery_VariablesAdapter
import com.cyberconnect.link3.selections.GetPostCommentReplyQuerySelections
import kotlin.Any
import kotlin.Boolean
import kotlin.Int
import kotlin.String
import kotlin.Unit

public data class GetPostCommentReplyQuery(
  public val commentId: String,
  public val first: Optional<Int?> = Optional.Absent,
  public val after: Optional<String?> = Optional.Absent,
) : Query<GetPostCommentReplyQuery.Data> {
  public override fun id(): String = OPERATION_ID

  public override fun document(): String = OPERATION_DOCUMENT

  public override fun name(): String = OPERATION_NAME

  public override fun serializeVariables(writer: JsonWriter,
      customScalarAdapters: CustomScalarAdapters): Unit {
    GetPostCommentReplyQuery_VariablesAdapter.toJson(writer, customScalarAdapters, this)
  }

  public override fun adapter(): Adapter<Data> = GetPostCommentReplyQuery_ResponseAdapter.Data.obj()

  public override fun rootField(): CompiledField = CompiledField.Builder(
    name = "data",
    type = com.cyberconnect.link3.type.Query.type
  )
  .selections(selections = GetPostCommentReplyQuerySelections.__root)
  .build()

  @ApolloAdaptableWith(GetPostCommentReplyQuery_ResponseAdapter.Data::class)
  public data class Data(
    public val comment: Comment?,
  ) : Query.Data

  public data class Comment(
    public val commentCount: Int,
    public val comments: Comments,
  )

  public data class Comments(
    public val pageInfo: PageInfo,
    public val list: kotlin.collections.List<List>,
  )

  public data class PageInfo(
    public val startCursor: String,
    public val endCursor: String,
    public val hasNextPage: Boolean,
    public val hasPreviousPage: Boolean,
  )

  public data class List(
    public val id: String,
    public val author: Author,
    public val body: String,
    public val likedStatus: LikedStatus,
    public val likeCount: Int,
    public val publishedAt: Any,
  )

  public data class Author(
    public val lightInfo: LightInfo,
  )

  public data class LightInfo(
    public val handle: String,
    public val avatar: String,
    public val avatarFrameTokenId: String?,
    public val displayName: String,
    public val formattedAddress: String,
  )

  public data class LikedStatus(
    public val liked: Boolean,
  )

  public companion object {
    public const val OPERATION_ID: String =
        "4bbff11c24b362bb4a04c517e5f1baf5435a94440f1b43015b04a4e800da3b7e"

    /**
     * The minimized GraphQL document being sent to the server to save a few bytes.
     * The un-minimized version is:
     *
     * query getPostCommentReply($commentId: String!, $first: Int = 30 , $after: String) {
     *   comment(commentId: $commentId) {
     *     commentCount
     *     comments(first: $first, after: $after) {
     *       pageInfo {
     *         startCursor
     *         endCursor
     *         hasNextPage
     *         hasPreviousPage
     *       }
     *       list {
     *         id
     *         author {
     *           lightInfo {
     *             handle
     *             avatar
     *             avatarFrameTokenId
     *             displayName
     *             formattedAddress
     *           }
     *         }
     *         body
     *         likedStatus {
     *           liked
     *         }
     *         likeCount
     *         publishedAt
     *       }
     *     }
     *   }
     * }
     */
    public val OPERATION_DOCUMENT: String
      get() =
          "query getPostCommentReply(${'$'}commentId: String!, ${'$'}first: Int = 30 , ${'$'}after: String) { comment(commentId: ${'$'}commentId) { commentCount comments(first: ${'$'}first, after: ${'$'}after) { pageInfo { startCursor endCursor hasNextPage hasPreviousPage } list { id author { lightInfo { handle avatar avatarFrameTokenId displayName formattedAddress } } body likedStatus { liked } likeCount publishedAt } } } }"

    public const val OPERATION_NAME: String = "getPostCommentReply"
  }
}
