//
// AUTO-GENERATED FILE. DO NOT MODIFY.
//
// This class was automatically generated by Apollo GraphQL version '3.8.2'.
//
package com.cyberconnect.link3.selections

import com.apollographql.apollo3.api.CompiledArgument
import com.apollographql.apollo3.api.CompiledField
import com.apollographql.apollo3.api.CompiledSelection
import com.apollographql.apollo3.api.CompiledVariable
import com.apollographql.apollo3.api.list
import com.apollographql.apollo3.api.notNull
import com.cyberconnect.link3.type.GraphQLBoolean
import com.cyberconnect.link3.type.GraphQLID
import com.cyberconnect.link3.type.GraphQLInt
import com.cyberconnect.link3.type.GraphQLString
import com.cyberconnect.link3.type.Organization
import com.cyberconnect.link3.type.OrganizationLightInfo
import com.cyberconnect.link3.type.OrganizationPage
import com.cyberconnect.link3.type.PageInfo
import com.cyberconnect.link3.type.Profile
import kotlin.collections.List

public object SearchOrgsQuerySelections {
  private val __pageInfo: List<CompiledSelection> = listOf(
        CompiledField.Builder(
          name = "startCursor",
          type = GraphQLString.type.notNull()
        ).build(),
        CompiledField.Builder(
          name = "endCursor",
          type = GraphQLString.type.notNull()
        ).build(),
        CompiledField.Builder(
          name = "hasNextPage",
          type = GraphQLBoolean.type.notNull()
        ).build(),
        CompiledField.Builder(
          name = "hasPreviousPage",
          type = GraphQLBoolean.type.notNull()
        ).build()
      )

  private val __profile: List<CompiledSelection> = listOf(
        CompiledField.Builder(
          name = "id",
          type = GraphQLID.type.notNull()
        ).build()
      )

  private val __lightInfo: List<CompiledSelection> = listOf(
        CompiledField.Builder(
          name = "profilePicture",
          type = GraphQLString.type.notNull()
        ).build(),
        CompiledField.Builder(
          name = "displayName",
          type = GraphQLString.type.notNull()
        ).build(),
        CompiledField.Builder(
          name = "isFollowing",
          type = GraphQLBoolean.type.notNull()
        ).build(),
        CompiledField.Builder(
          name = "profileHandle",
          type = GraphQLString.type.notNull()
        ).build()
      )

  private val __list: List<CompiledSelection> = listOf(
        CompiledField.Builder(
          name = "profile",
          type = Profile.type.notNull()
        ).selections(__profile)
        .build(),
        CompiledField.Builder(
          name = "followersCount",
          type = GraphQLInt.type.notNull()
        ).build(),
        CompiledField.Builder(
          name = "lightInfo",
          type = OrganizationLightInfo.type.notNull()
        ).selections(__lightInfo)
        .build()
      )

  private val __organizations: List<CompiledSelection> = listOf(
        CompiledField.Builder(
          name = "pageInfo",
          type = PageInfo.type.notNull()
        ).selections(__pageInfo)
        .build(),
        CompiledField.Builder(
          name = "list",
          type = Organization.type.notNull().list().notNull()
        ).selections(__list)
        .build(),
        CompiledField.Builder(
          name = "totalCount",
          type = GraphQLInt.type.notNull()
        ).build()
      )

  public val __root: List<CompiledSelection> = listOf(
        CompiledField.Builder(
          name = "organizations",
          type = OrganizationPage.type.notNull()
        ).arguments(listOf(
          CompiledArgument.Builder("after", CompiledVariable("after")).build(),
          CompiledArgument.Builder("displayNameFilter", CompiledVariable("text")).build(),
          CompiledArgument.Builder("first", CompiledVariable("first")).build()
        ))
        .selections(__organizations)
        .build()
      )
}
