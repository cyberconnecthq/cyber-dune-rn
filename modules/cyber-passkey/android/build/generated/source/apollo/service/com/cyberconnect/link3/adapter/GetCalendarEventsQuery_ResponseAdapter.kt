//
// AUTO-GENERATED FILE. DO NOT MODIFY.
//
// This class was automatically generated by Apollo GraphQL version '3.8.2'.
//
package com.cyberconnect.link3.adapter

import com.apollographql.apollo3.api.Adapter
import com.apollographql.apollo3.api.AnyAdapter
import com.apollographql.apollo3.api.CustomScalarAdapters
import com.apollographql.apollo3.api.StringAdapter
import com.apollographql.apollo3.api.json.JsonReader
import com.apollographql.apollo3.api.json.JsonWriter
import com.apollographql.apollo3.api.list
import com.apollographql.apollo3.api.nullable
import com.apollographql.apollo3.api.obj
import com.cyberconnect.link3.GetCalendarEventsQuery
import com.cyberconnect.link3.type.EventStatus
import com.cyberconnect.link3.type.adapter.EventStatus_ResponseAdapter
import kotlin.Any
import kotlin.String
import kotlin.Unit
import kotlin.collections.List

public object GetCalendarEventsQuery_ResponseAdapter {
  public object Data : Adapter<GetCalendarEventsQuery.Data> {
    public val RESPONSE_NAMES: List<String> = listOf("me")

    public override fun fromJson(reader: JsonReader, customScalarAdapters: CustomScalarAdapters):
        GetCalendarEventsQuery.Data {
      var _me: GetCalendarEventsQuery.Me? = null

      while(true) {
        when (reader.selectName(RESPONSE_NAMES)) {
          0 -> _me = Me.obj().fromJson(reader, customScalarAdapters)
          else -> break
        }
      }

      return GetCalendarEventsQuery.Data(
        me = _me!!
      )
    }

    public override fun toJson(
      writer: JsonWriter,
      customScalarAdapters: CustomScalarAdapters,
      `value`: GetCalendarEventsQuery.Data,
    ): Unit {
      writer.name("me")
      Me.obj().toJson(writer, customScalarAdapters, value.me)
    }
  }

  public object Me : Adapter<GetCalendarEventsQuery.Me> {
    public val RESPONSE_NAMES: List<String> = listOf("data")

    public override fun fromJson(reader: JsonReader, customScalarAdapters: CustomScalarAdapters):
        GetCalendarEventsQuery.Me {
      var _data: GetCalendarEventsQuery.Data1? = null

      while(true) {
        when (reader.selectName(RESPONSE_NAMES)) {
          0 -> _data = Data1.obj().nullable().fromJson(reader, customScalarAdapters)
          else -> break
        }
      }

      return GetCalendarEventsQuery.Me(
        `data` = _data
      )
    }

    public override fun toJson(
      writer: JsonWriter,
      customScalarAdapters: CustomScalarAdapters,
      `value`: GetCalendarEventsQuery.Me,
    ): Unit {
      writer.name("data")
      Data1.obj().nullable().toJson(writer, customScalarAdapters, value.`data`)
    }
  }

  public object Data1 : Adapter<GetCalendarEventsQuery.Data1> {
    public val RESPONSE_NAMES: List<String> = listOf("calendarEvents")

    public override fun fromJson(reader: JsonReader, customScalarAdapters: CustomScalarAdapters):
        GetCalendarEventsQuery.Data1 {
      var _calendarEvents: List<GetCalendarEventsQuery.CalendarEvent>? = null

      while(true) {
        when (reader.selectName(RESPONSE_NAMES)) {
          0 -> _calendarEvents = CalendarEvent.obj().list().nullable().fromJson(reader,
              customScalarAdapters)
          else -> break
        }
      }

      return GetCalendarEventsQuery.Data1(
        calendarEvents = _calendarEvents
      )
    }

    public override fun toJson(
      writer: JsonWriter,
      customScalarAdapters: CustomScalarAdapters,
      `value`: GetCalendarEventsQuery.Data1,
    ): Unit {
      writer.name("calendarEvents")
      CalendarEvent.obj().list().nullable().toJson(writer, customScalarAdapters,
          value.calendarEvents)
    }
  }

  public object CalendarEvent : Adapter<GetCalendarEventsQuery.CalendarEvent> {
    public val RESPONSE_NAMES: List<String> = listOf("id", "info", "title", "posterUrl",
        "startTimestamp", "endTimestamp", "status", "organizer")

    public override fun fromJson(reader: JsonReader, customScalarAdapters: CustomScalarAdapters):
        GetCalendarEventsQuery.CalendarEvent {
      var _id: String? = null
      var _info: String? = null
      var _title: String? = null
      var _posterUrl: Any? = null
      var _startTimestamp: Any? = null
      var _endTimestamp: Any? = null
      var _status: EventStatus? = null
      var _organizer: GetCalendarEventsQuery.Organizer? = null

      while(true) {
        when (reader.selectName(RESPONSE_NAMES)) {
          0 -> _id = StringAdapter.fromJson(reader, customScalarAdapters)
          1 -> _info = StringAdapter.fromJson(reader, customScalarAdapters)
          2 -> _title = StringAdapter.fromJson(reader, customScalarAdapters)
          3 -> _posterUrl = AnyAdapter.fromJson(reader, customScalarAdapters)
          4 -> _startTimestamp = AnyAdapter.fromJson(reader, customScalarAdapters)
          5 -> _endTimestamp = AnyAdapter.fromJson(reader, customScalarAdapters)
          6 -> _status = EventStatus_ResponseAdapter.fromJson(reader, customScalarAdapters)
          7 -> _organizer = Organizer.obj(true).fromJson(reader, customScalarAdapters)
          else -> break
        }
      }

      return GetCalendarEventsQuery.CalendarEvent(
        id = _id!!,
        info = _info!!,
        title = _title!!,
        posterUrl = _posterUrl!!,
        startTimestamp = _startTimestamp!!,
        endTimestamp = _endTimestamp!!,
        status = _status!!,
        organizer = _organizer!!
      )
    }

    public override fun toJson(
      writer: JsonWriter,
      customScalarAdapters: CustomScalarAdapters,
      `value`: GetCalendarEventsQuery.CalendarEvent,
    ): Unit {
      writer.name("id")
      StringAdapter.toJson(writer, customScalarAdapters, value.id)

      writer.name("info")
      StringAdapter.toJson(writer, customScalarAdapters, value.info)

      writer.name("title")
      StringAdapter.toJson(writer, customScalarAdapters, value.title)

      writer.name("posterUrl")
      AnyAdapter.toJson(writer, customScalarAdapters, value.posterUrl)

      writer.name("startTimestamp")
      AnyAdapter.toJson(writer, customScalarAdapters, value.startTimestamp)

      writer.name("endTimestamp")
      AnyAdapter.toJson(writer, customScalarAdapters, value.endTimestamp)

      writer.name("status")
      EventStatus_ResponseAdapter.toJson(writer, customScalarAdapters, value.status)

      writer.name("organizer")
      Organizer.obj(true).toJson(writer, customScalarAdapters, value.organizer)
    }
  }

  public object Organizer : Adapter<GetCalendarEventsQuery.Organizer> {
    public val RESPONSE_NAMES: List<String> = listOf("__typename")

    public override fun fromJson(reader: JsonReader, customScalarAdapters: CustomScalarAdapters):
        GetCalendarEventsQuery.Organizer {
      var __typename: String? = null

      while(true) {
        when (reader.selectName(RESPONSE_NAMES)) {
          0 -> __typename = StringAdapter.fromJson(reader, customScalarAdapters)
          else -> break
        }
      }

      reader.rewind()
      val _organizer = com.cyberconnect.link3.fragment.OrganizerImpl_ResponseAdapter.Organizer.fromJson(reader,
          customScalarAdapters)

      return GetCalendarEventsQuery.Organizer(
        __typename = __typename!!,
        organizer = _organizer
      )
    }

    public override fun toJson(
      writer: JsonWriter,
      customScalarAdapters: CustomScalarAdapters,
      `value`: GetCalendarEventsQuery.Organizer,
    ): Unit {
      writer.name("__typename")
      StringAdapter.toJson(writer, customScalarAdapters, value.__typename)

      com.cyberconnect.link3.fragment.OrganizerImpl_ResponseAdapter.Organizer.toJson(writer,
          customScalarAdapters, value.organizer)
    }
  }
}
