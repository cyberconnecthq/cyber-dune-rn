//
// AUTO-GENERATED FILE. DO NOT MODIFY.
//
// This class was automatically generated by Apollo GraphQL version '3.8.2'.
//
package com.cyberconnect.link3.adapter

import com.apollographql.apollo3.api.Adapter
import com.apollographql.apollo3.api.AnyAdapter
import com.apollographql.apollo3.api.CustomScalarAdapters
import com.apollographql.apollo3.api.json.JsonReader
import com.apollographql.apollo3.api.json.JsonWriter
import com.apollographql.apollo3.api.obj
import com.cyberconnect.link3.UploadProfileImageMutation
import com.cyberconnect.link3.type.Upload_Status
import com.cyberconnect.link3.type.adapter.Upload_Status_ResponseAdapter
import kotlin.Any
import kotlin.String
import kotlin.Unit
import kotlin.collections.List

public object UploadProfileImageMutation_ResponseAdapter {
  public object Data : Adapter<UploadProfileImageMutation.Data> {
    public val RESPONSE_NAMES: List<String> = listOf("uploadProfileImage")

    public override fun fromJson(reader: JsonReader, customScalarAdapters: CustomScalarAdapters):
        UploadProfileImageMutation.Data {
      var _uploadProfileImage: UploadProfileImageMutation.UploadProfileImage? = null

      while(true) {
        when (reader.selectName(RESPONSE_NAMES)) {
          0 -> _uploadProfileImage = UploadProfileImage.obj().fromJson(reader, customScalarAdapters)
          else -> break
        }
      }

      return UploadProfileImageMutation.Data(
        uploadProfileImage = _uploadProfileImage!!
      )
    }

    public override fun toJson(
      writer: JsonWriter,
      customScalarAdapters: CustomScalarAdapters,
      `value`: UploadProfileImageMutation.Data,
    ): Unit {
      writer.name("uploadProfileImage")
      UploadProfileImage.obj().toJson(writer, customScalarAdapters, value.uploadProfileImage)
    }
  }

  public object UploadProfileImage : Adapter<UploadProfileImageMutation.UploadProfileImage> {
    public val RESPONSE_NAMES: List<String> = listOf("url", "status")

    public override fun fromJson(reader: JsonReader, customScalarAdapters: CustomScalarAdapters):
        UploadProfileImageMutation.UploadProfileImage {
      var _url: Any? = null
      var _status: Upload_Status? = null

      while(true) {
        when (reader.selectName(RESPONSE_NAMES)) {
          0 -> _url = AnyAdapter.fromJson(reader, customScalarAdapters)
          1 -> _status = Upload_Status_ResponseAdapter.fromJson(reader, customScalarAdapters)
          else -> break
        }
      }

      return UploadProfileImageMutation.UploadProfileImage(
        url = _url!!,
        status = _status!!
      )
    }

    public override fun toJson(
      writer: JsonWriter,
      customScalarAdapters: CustomScalarAdapters,
      `value`: UploadProfileImageMutation.UploadProfileImage,
    ): Unit {
      writer.name("url")
      AnyAdapter.toJson(writer, customScalarAdapters, value.url)

      writer.name("status")
      Upload_Status_ResponseAdapter.toJson(writer, customScalarAdapters, value.status)
    }
  }
}
