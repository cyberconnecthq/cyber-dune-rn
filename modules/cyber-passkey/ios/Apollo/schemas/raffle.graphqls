type Raffle {
  awards: Award!
  tweetUrl: Url!
  winnersCount: Int!
  requirement: RaffleRequirements!

  participateDeadline: Timestamp!
  claimDeadline: Timestamp!

  joinedCount: Int!
  # current user status
  joinStatus: RaffleJoinStatus!
}

type RaffleRequirements_TwitterToFollow {
  twitterId: String!
  twitterHandle: String!
}

type RaffleRequirements {
  retweet: Boolean!
  follow: Boolean!
  likeAndRetweet: Boolean!
  tag: Boolean!
  comment: Boolean!
  multiFollow: Boolean!
  twittersToFollow: [RaffleRequirements_TwitterToFollow!]!
  whitelist: Boolean!
  attend: Boolean!
}

type TokenAward {
  chainId: Int!
  contractAddress: String!
  tokenIcon: Url!
  symbol: String!
  amount: String!
}

type CodeAward {
  # reveal in edit page
  code: [String!]!
  description: String!
}

input TokenAwardInput {
  chainId: Int!
  contractAddress: String!
  tokenIcon: Url!
  symbol: String!
  amount: String!
}

input CodeAwardInput {
  # reveal in edit page
  code: [String!]!
  description: String!
}

union Award = TokenAward | CodeAward

input RaffleAwardInput {
  tokenAward: TokenAwardInput
  codeAward: CodeAwardInput
}

input CreateRaffleInput {
  awards: RaffleAwardInput!
  tweetUrl: Url!
  winnersCount: Int!
  requirement: RaffleRequirementsInput!
}

input RaffleRequirementsInput {
  retweet: Boolean!
  follow: Boolean!
  likeAndRetweet: Boolean!
  tag: Boolean!
  comment: Boolean!
  multiFollow: Boolean!
  twittersToFollow: [RaffleRequirements_TwitterToFollowInput!]!
  attend: Boolean!
}

input RaffleRequirements_TwitterToFollowInput {
  twitterId: String!
  twitterHandle: String!
}

enum CreateRaffleResponse_Status{
  SUCCESS
  NOT_LOGIN
  EVENT_NOT_FOUND
  EVENT_STARTED
  ALREADY_CREATED
  PERMISSION_DENIED
  INVALID_PARAMETER
  NOT_ENOUGH_TOKEN
  DUPLICATE_COMMENT_REQUIREMENT
  TOO_MANY_TWITTERS_TO_FOLLOW
  AT_LEAST_ONE_TWITTER_NEEDED
  TOO_MANY_FOLLOW_REQUIREMENTS
}

type CreateRaffleResponse {
  status: CreateRaffleResponse_Status!
}

enum JoinRaffleResponse_Status{
  SUCCESS
  NOT_LOGIN
  RAFFLE_NOT_FOUND
  EXPIRED_JOIN_DDL
  DUPLICATE_TWITTER
  RETWEET_NOT_FOUND
  NOT_REGISTERED
  ALREADY_JOINED
  INVALID_PARAMETER
  MISMATCH_TWITTER
  EVENT_NOT_FOUND
  ORG_NOT_FOUND
  REQUIREMENT_NOT_MET
  FAILED_TWITTER_AUTH
  TWITTER_NOT_LINKED
  TOO_FREQUENT_AUTH
  RATE_LIMITED
}

type RaffleJoinStatus {
  status: JoinStatus!
  myAward: String
}

enum JoinStatus {
  NOT_JOIN
  PARTICIPANT
  LOSER
  WINNER
  CLAIMED
  NOT_ATTEND
}

type JoinRaffleResponse {
  status: JoinRaffleResponse_Status!
  requirement: RaffleRequirements!
}

enum AwardType {
  TOKEN_AWARD
  CODE_AWARD
}

enum ClaimRaffleAwardResponse_Status{
  SUCCESS
  NOT_LOGIN
  INVALID_PARAMETER
  NOT_ELIGIBLE
  CLAIMING_OTHER_TOKEN_AWARD
  ALREADY_CLAIMED
}

type ClaimRaffleAwardResponse {
  status: ClaimRaffleAwardResponse_Status!
  type: AwardType!
  code: String!
  profileId: String!
  currency: String!
  amount: String!
  signature: String!
  deadline: String!
}

enum GetTokenInfoResponse_Status{
  SUCCESS
  UNSUPPORTED_CHAIN
  INVALID_PARAMETER
}

type GetTokenInfoResponse {
  status: GetTokenInfoResponse_Status!
  tokenIcon: Url!
  symbol: String!
  decimals: Int!
}

extend type Query {
  getTokenInfo(chainId: Int!, contractAddress: String!): GetTokenInfoResponse!
}

extend type Mutation {
  createRaffle(orgId: ID!, eventId: ID!,input: CreateRaffleInput!): CreateRaffleResponse!
  joinRaffle(eventId: ID!, token: String!, verifier: String!, nonce: String!): JoinRaffleResponse!
  claimRaffleAward(eventId: ID!): ClaimRaffleAwardResponse!
}